
ATMega32_Preipherals_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000027f8  0000288c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ef  00800068  00800068  00002894  2**0
                  ALLOC
  3 .stab         00003714  00000000  00000000  00002894  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001771  00000000  00000000  00005fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007719  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007859  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000079c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009612  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a4fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b2ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b699  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 35       	cpi	r26, 0x57	; 87
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 ef       	ldi	r30, 0xF8	; 248
      78:	f7 e2       	ldi	r31, 0x27	; 39
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 67 13 	call	0x26ce	; 0x26ce <main>
      8a:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:

static u8 RecievedMessage[UART_MSG_BUFFER_SIZE] ={0} ;
static u16 MsgLength =0 ;

void  UART_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*configure parity mode*/
	UCSRC &= UART_PARITY_MODE_CLEAR;
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e0 e4       	ldi	r30, 0x40	; 64
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7c       	andi	r24, 0xCF	; 207
     b5a:	8c 93       	st	X, r24
	UCSRC |= UART_PARITY_MODE_MASK;
     b5c:	a0 e4       	ldi	r26, 0x40	; 64
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e0 e4       	ldi	r30, 0x40	; 64
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8c 93       	st	X, r24

	/*configure stop bit*/
	UCSRC &= UART_STOP_BIT_CLEAR;
     b68:	a0 e4       	ldi	r26, 0x40	; 64
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e0 e4       	ldi	r30, 0x40	; 64
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	87 7f       	andi	r24, 0xF7	; 247
     b74:	8c 93       	st	X, r24
	UCSRC |= UART_STOP_BIT_MASK;
     b76:	a0 e4       	ldi	r26, 0x40	; 64
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e0 e4       	ldi	r30, 0x40	; 64
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8c 93       	st	X, r24

	/*set baud rate to 9600 baud/s*/
	UBRRL= 51;
     b82:	e9 e2       	ldi	r30, 0x29	; 41
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	83 e3       	ldi	r24, 0x33	; 51
     b88:	80 83       	st	Z, r24

	/*set data length*/
	/*set URSEL to one to access UCSRC register*/
	UCSRC |= 1<<URSEL	|	1<<UCSZ0	|	1<<UCSZ1	;
     b8a:	a0 e4       	ldi	r26, 0x40	; 64
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e0 e4       	ldi	r30, 0x40	; 64
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	86 68       	ori	r24, 0x86	; 134
     b96:	8c 93       	st	X, r24

	/*enable receive*/
	SET_BIT(UCSRB,RXEN);
     b98:	aa e2       	ldi	r26, 0x2A	; 42
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	ea e2       	ldi	r30, 0x2A	; 42
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	80 61       	ori	r24, 0x10	; 16
     ba4:	8c 93       	st	X, r24
	/*enable transmit*/
	SET_BIT(UCSRB,TXEN);
     ba6:	aa e2       	ldi	r26, 0x2A	; 42
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e2       	ldi	r30, 0x2A	; 42
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	88 60       	ori	r24, 0x08	; 8
     bb2:	8c 93       	st	X, r24
}
     bb4:	cf 91       	pop	r28
     bb6:	df 91       	pop	r29
     bb8:	08 95       	ret

00000bba <UART_sendByte>:

void UART_sendByte(u8 DataToSendCpy)
{
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	0f 92       	push	r0
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
	/*wait until UDR is ready*/
	while(GET_BIT(UCSRA,UDRE) == 0);
     bc6:	eb e2       	ldi	r30, 0x2B	; 43
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	80 72       	andi	r24, 0x20	; 32
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	95 95       	asr	r25
     bd6:	87 95       	ror	r24
     bd8:	95 95       	asr	r25
     bda:	87 95       	ror	r24
     bdc:	95 95       	asr	r25
     bde:	87 95       	ror	r24
     be0:	95 95       	asr	r25
     be2:	87 95       	ror	r24
     be4:	95 95       	asr	r25
     be6:	87 95       	ror	r24
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	69 f3       	breq	.-38     	; 0xbc6 <UART_sendByte+0xc>
	/*write data to be transmitted in UDR*/
	UDR = DataToSendCpy;
     bec:	ec e2       	ldi	r30, 0x2C	; 44
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	80 83       	st	Z, r24
	/*clear flag*/
	SET_BIT(UCSRA,TXC);
     bf4:	ab e2       	ldi	r26, 0x2B	; 43
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	eb e2       	ldi	r30, 0x2B	; 43
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	80 64       	ori	r24, 0x40	; 64
     c00:	8c 93       	st	X, r24
}
     c02:	0f 90       	pop	r0
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <UART_getMessage>:

void UART_getMessage(u8* MsgPtr,u16* LengthPtr)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <UART_getMessage+0x6>
     c10:	00 d0       	rcall	.+0      	; 0xc12 <UART_getMessage+0x8>
     c12:	0f 92       	push	r0
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	9b 83       	std	Y+3, r25	; 0x03
     c1a:	8a 83       	std	Y+2, r24	; 0x02
     c1c:	7d 83       	std	Y+5, r23	; 0x05
     c1e:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	for(i=0;i<MsgLength;i++)MsgPtr[i] = RecievedMessage[i];
     c20:	19 82       	std	Y+1, r1	; 0x01
     c22:	13 c0       	rjmp	.+38     	; 0xc4a <UART_getMessage+0x40>
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	9b 81       	ldd	r25, Y+3	; 0x03
     c2e:	dc 01       	movw	r26, r24
     c30:	a2 0f       	add	r26, r18
     c32:	b3 1f       	adc	r27, r19
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	fc 01       	movw	r30, r24
     c3c:	e8 59       	subi	r30, 0x98	; 152
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	80 81       	ld	r24, Z
     c42:	8c 93       	st	X, r24
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	80 91 50 04 	lds	r24, 0x0450
     c54:	90 91 51 04 	lds	r25, 0x0451
     c58:	28 17       	cp	r18, r24
     c5a:	39 07       	cpc	r19, r25
     c5c:	18 f3       	brcs	.-58     	; 0xc24 <UART_getMessage+0x1a>
	*LengthPtr  = MsgLength;
     c5e:	80 91 50 04 	lds	r24, 0x0450
     c62:	90 91 51 04 	lds	r25, 0x0451
     c66:	ec 81       	ldd	r30, Y+4	; 0x04
     c68:	fd 81       	ldd	r31, Y+5	; 0x05
     c6a:	91 83       	std	Z+1, r25	; 0x01
     c6c:	80 83       	st	Z, r24
	MsgLength = 0;
     c6e:	10 92 51 04 	sts	0x0451, r1
     c72:	10 92 50 04 	sts	0x0450, r1
}
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <UART_enRxInterrupt>:


void UART_enRxInterrupt(void)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
	/*enable receive complete interrupt*/
	SET_BIT(UCSRB,RXCIE);
     c8e:	aa e2       	ldi	r26, 0x2A	; 42
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ea e2       	ldi	r30, 0x2A	; 42
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	80 68       	ori	r24, 0x80	; 128
     c9a:	8c 93       	st	X, r24
}
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <UART_enTxInterrupt>:

void UART_enTxInterrupt(void)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	/*enable transmit complete interrupt*/
	SET_BIT(UCSRB,TXCIE);
     caa:	aa e2       	ldi	r26, 0x2A	; 42
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ea e2       	ldi	r30, 0x2A	; 42
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	80 64       	ori	r24, 0x40	; 64
     cb6:	8c 93       	st	X, r24
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <UART_enRegReadyInterrupt>:
void UART_enRegReadyInterrupt(void)
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
	/*enable interrupt of UDR empty */
	SET_BIT(UCSRB,UDRIE);
     cc6:	aa e2       	ldi	r26, 0x2A	; 42
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	ea e2       	ldi	r30, 0x2A	; 42
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	80 62       	ori	r24, 0x20	; 32
     cd2:	8c 93       	st	X, r24
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <UART_diRxInterrupt>:


void UART_diRxInterrupt(void)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	/*disable receive complete interrupt*/
	CLR_BIT(UCSRB,RXCIE);
     ce2:	aa e2       	ldi	r26, 0x2A	; 42
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ea e2       	ldi	r30, 0x2A	; 42
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8f 77       	andi	r24, 0x7F	; 127
     cee:	8c 93       	st	X, r24
}
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <UART_diTxInterrupt>:

void UART_diTxInterrupt(void)
{
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
	/*disable transmit complete interrupt*/
	CLR_BIT(UCSRB,TXCIE);
     cfe:	aa e2       	ldi	r26, 0x2A	; 42
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e2       	ldi	r30, 0x2A	; 42
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8f 7b       	andi	r24, 0xBF	; 191
     d0a:	8c 93       	st	X, r24
}
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <UART_diRegReadyInterrupt>:
void UART_diRegReadyInterrupt(void)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
	/*disable interrupt of UDR empty */
	CLR_BIT(UCSRB,UDRIE);
     d1a:	aa e2       	ldi	r26, 0x2A	; 42
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ea e2       	ldi	r30, 0x2A	; 42
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8f 7d       	andi	r24, 0xDF	; 223
     d26:	8c 93       	st	X, r24
}
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <__vector_13>:


/*ISR for receive complete interrupt*/
void __vector_13(void) __attribute__((signal,used));
void __vector_13(void)
{
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	RecievedMessage[MsgLength] = UDR;
     d58:	80 91 50 04 	lds	r24, 0x0450
     d5c:	90 91 51 04 	lds	r25, 0x0451
     d60:	ec e2       	ldi	r30, 0x2C	; 44
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	20 81       	ld	r18, Z
     d66:	fc 01       	movw	r30, r24
     d68:	e8 59       	subi	r30, 0x98	; 152
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	20 83       	st	Z, r18
	MsgLength++;
     d6e:	80 91 50 04 	lds	r24, 0x0450
     d72:	90 91 51 04 	lds	r25, 0x0451
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	90 93 51 04 	sts	0x0451, r25
     d7c:	80 93 50 04 	sts	0x0450, r24
	DIO_togglePin(DIO_PIN_B0);
     d80:	88 e0       	ldi	r24, 0x08	; 8
     d82:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_togglePin>
}
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	ff 91       	pop	r31
     d8c:	ef 91       	pop	r30
     d8e:	bf 91       	pop	r27
     d90:	af 91       	pop	r26
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	7f 91       	pop	r23
     d98:	6f 91       	pop	r22
     d9a:	5f 91       	pop	r21
     d9c:	4f 91       	pop	r20
     d9e:	3f 91       	pop	r19
     da0:	2f 91       	pop	r18
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	0f 90       	pop	r0
     da8:	1f 90       	pop	r1
     daa:	18 95       	reti

00000dac <GIE_enInterrupt>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_reg.h"
#include "GIE.h"

void GIE_enInterrupt(void)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     db4:	af e5       	ldi	r26, 0x5F	; 95
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	ef e5       	ldi	r30, 0x5F	; 95
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	80 68       	ori	r24, 0x80	; 128
     dc0:	8c 93       	st	X, r24
}
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <GIE_diInterrupt>:
void GIE_diInterrupt(void)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     dd0:	af e5       	ldi	r26, 0x5F	; 95
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ef e5       	ldi	r30, 0x5F	; 95
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	8f 77       	andi	r24, 0x7F	; 127
     ddc:	8c 93       	st	X, r24
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <EXTI_init>:

static void (*CallBackFunc)(void);
/* This function shall intialize the EXTI and
 * Set its operation initially disable*/
void EXTI_init(void)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif (EXTI_EDGE_SELECTOR == EXTI_EDGE_FALL)
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#else
	SET_BIT(MCUCR,0);
     dec:	a5 e5       	ldi	r26, 0x55	; 85
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e5       	ldi	r30, 0x55	; 85
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
     dfa:	a5 e5       	ldi	r26, 0x55	; 85
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e5 e5       	ldi	r30, 0x55	; 85
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	8c 93       	st	X, r24
#endif
}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <EXTI_setCallBack>:

/*This function shall set the callback pointer
 * to the received the address*/
void EXTI_setCallBack(void (*FuncPtr) (void) )
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	00 d0       	rcall	.+0      	; 0xe14 <EXTI_setCallBack+0x6>
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
	CallBackFunc = FuncPtr;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	90 93 53 04 	sts	0x0453, r25
     e24:	80 93 52 04 	sts	0x0452, r24
}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <EXTI_enInterrupt>:
/*This function shall enable the external interrupt*/
void EXTI_enInterrupt(void)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,6);
     e3a:	ab e5       	ldi	r26, 0x5B	; 91
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	eb e5       	ldi	r30, 0x5B	; 91
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 64       	ori	r24, 0x40	; 64
     e46:	8c 93       	st	X, r24
}
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <EXTI_diInterrupt>:

/*This function shall disable the external interrupt*/
void EXTI_diInterrupt (void)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
     e56:	ab e5       	ldi	r26, 0x5B	; 91
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e5       	ldi	r30, 0x5B	; 91
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7b       	andi	r24, 0xBF	; 191
     e62:	8c 93       	st	X, r24
}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <__vector_1>:

/*ISR for External interrupt_0*/
void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
     e6a:	1f 92       	push	r1
     e6c:	0f 92       	push	r0
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	0f 92       	push	r0
     e72:	11 24       	eor	r1, r1
     e74:	2f 93       	push	r18
     e76:	3f 93       	push	r19
     e78:	4f 93       	push	r20
     e7a:	5f 93       	push	r21
     e7c:	6f 93       	push	r22
     e7e:	7f 93       	push	r23
     e80:	8f 93       	push	r24
     e82:	9f 93       	push	r25
     e84:	af 93       	push	r26
     e86:	bf 93       	push	r27
     e88:	ef 93       	push	r30
     e8a:	ff 93       	push	r31
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
	CallBackFunc();
     e94:	e0 91 52 04 	lds	r30, 0x0452
     e98:	f0 91 53 04 	lds	r31, 0x0453
     e9c:	09 95       	icall

}
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	ff 91       	pop	r31
     ea4:	ef 91       	pop	r30
     ea6:	bf 91       	pop	r27
     ea8:	af 91       	pop	r26
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	7f 91       	pop	r23
     eb0:	6f 91       	pop	r22
     eb2:	5f 91       	pop	r21
     eb4:	4f 91       	pop	r20
     eb6:	3f 91       	pop	r19
     eb8:	2f 91       	pop	r18
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	0f 90       	pop	r0
     ec0:	1f 90       	pop	r1
     ec2:	18 95       	reti

00000ec4 <DIO_init>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO.h"

void DIO_init(void)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	/* initialize DIO module by setting DDR registers with PORT direction*/
	DDRA = BIT_CONC(DIO_u8_PIN_DIR_7,DIO_u8_PIN_DIR_6,DIO_u8_PIN_DIR_5,DIO_u8_PIN_DIR_4,DIO_u8_PIN_DIR_3,DIO_u8_PIN_DIR_2,DIO_u8_PIN_DIR_1,DIO_u8_PIN_DIR_0);
     ecc:	ea e3       	ldi	r30, 0x3A	; 58
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	8e ef       	ldi	r24, 0xFE	; 254
     ed2:	80 83       	st	Z, r24
	DDRB = BIT_CONC(DIO_u8_PIN_DIR_15,DIO_u8_PIN_DIR_14,DIO_u8_PIN_DIR_13,DIO_u8_PIN_DIR_12,DIO_u8_PIN_DIR_11,DIO_u8_PIN_DIR_10,DIO_u8_PIN_DIR_9,DIO_u8_PIN_DIR_8);
     ed4:	e7 e3       	ldi	r30, 0x37	; 55
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	80 83       	st	Z, r24
	DDRC = BIT_CONC(DIO_u8_PIN_DIR_23,DIO_u8_PIN_DIR_22,DIO_u8_PIN_DIR_21,DIO_u8_PIN_DIR_20,DIO_u8_PIN_DIR_19,DIO_u8_PIN_DIR_18,DIO_u8_PIN_DIR_17,DIO_u8_PIN_DIR_16);
     edc:	e4 e3       	ldi	r30, 0x34	; 52
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	80 83       	st	Z, r24
	DDRD = BIT_CONC(DIO_u8_PIN_DIR_31,DIO_u8_PIN_DIR_30,DIO_u8_PIN_DIR_29,DIO_u8_PIN_DIR_28,DIO_u8_PIN_DIR_27,DIO_u8_PIN_DIR_26,DIO_u8_PIN_DIR_25,DIO_u8_PIN_DIR_24);
     ee4:	e1 e3       	ldi	r30, 0x31	; 49
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	8b ef       	ldi	r24, 0xFB	; 251
     eea:	80 83       	st	Z, r24
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <DIO_setPinValue>:
void DIO_setPinValue(u8 PinNum, DIO_PinValue_t ValueCpy)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <DIO_setPinValue+0x6>
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	6a 83       	std	Y+2, r22	; 0x02
	/* switch between PORTS,
	 * assign the right bit in corresponding register with ValueCpy */
	if(PinNum <= DIO_u8_PORTA_END)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	88 30       	cpi	r24, 0x08	; 8
     f04:	48 f5       	brcc	.+82     	; 0xf58 <DIO_setPinValue+0x66>
	{
		/*in PORTA*/
		ASSIGN_BIT(PORTA,PinNum,ValueCpy);	
     f06:	ab e3       	ldi	r26, 0x3B	; 59
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	eb e3       	ldi	r30, 0x3B	; 59
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_setPinValue+0x30>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	2a 95       	dec	r18
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_setPinValue+0x2c>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	ab e3       	ldi	r26, 0x3B	; 59
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	eb e3       	ldi	r30, 0x3B	; 59
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	b9 01       	movw	r22, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_setPinValue+0x5a>
     f48:	66 0f       	add	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	8a 95       	dec	r24
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_setPinValue+0x56>
     f50:	cb 01       	movw	r24, r22
     f52:	84 2b       	or	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	95 c0       	rjmp	.+298    	; 0x1082 <DIO_setPinValue+0x190>
	}
	else if(PinNum >=DIO_u8_PORTB_START && PinNum <= DIO_u8_PORTB_END)
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	88 30       	cpi	r24, 0x08	; 8
     f5c:	78 f1       	brcs	.+94     	; 0xfbc <DIO_setPinValue+0xca>
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	80 31       	cpi	r24, 0x10	; 16
     f62:	60 f5       	brcc	.+88     	; 0xfbc <DIO_setPinValue+0xca>
	{
		/*in PORTB*/
		PinNum -= DIO_u8_PORTB_OFFSET;
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	88 50       	subi	r24, 0x08	; 8
     f68:	89 83       	std	Y+1, r24	; 0x01
		ASSIGN_BIT(PORTB,PinNum,ValueCpy);
     f6a:	a8 e3       	ldi	r26, 0x38	; 56
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e8 e3       	ldi	r30, 0x38	; 56
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_setPinValue+0x94>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	2a 95       	dec	r18
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_setPinValue+0x90>
     f8a:	80 95       	com	r24
     f8c:	84 23       	and	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	a8 e3       	ldi	r26, 0x38	; 56
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e8 e3       	ldi	r30, 0x38	; 56
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	b9 01       	movw	r22, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_setPinValue+0xbe>
     fac:	66 0f       	add	r22, r22
     fae:	77 1f       	adc	r23, r23
     fb0:	8a 95       	dec	r24
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_setPinValue+0xba>
     fb4:	cb 01       	movw	r24, r22
     fb6:	84 2b       	or	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	63 c0       	rjmp	.+198    	; 0x1082 <DIO_setPinValue+0x190>
		
	}
	else if(PinNum >=DIO_u8_PORTC_START && PinNum <= DIO_u8_PORTC_END)
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	80 31       	cpi	r24, 0x10	; 16
     fc0:	78 f1       	brcs	.+94     	; 0x1020 <DIO_setPinValue+0x12e>
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	88 31       	cpi	r24, 0x18	; 24
     fc6:	60 f5       	brcc	.+88     	; 0x1020 <DIO_setPinValue+0x12e>
	{
			/*in PORTC*/
			PinNum -= DIO_u8_PORTC_OFFSET;
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	80 51       	subi	r24, 0x10	; 16
     fcc:	89 83       	std	Y+1, r24	; 0x01
			ASSIGN_BIT(PORTC,PinNum,ValueCpy);
     fce:	a5 e3       	ldi	r26, 0x35	; 53
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e5 e3       	ldi	r30, 0x35	; 53
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_setPinValue+0xf8>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	2a 95       	dec	r18
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_setPinValue+0xf4>
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	a5 e3       	ldi	r26, 0x35	; 53
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e5 e3       	ldi	r30, 0x35	; 53
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	b9 01       	movw	r22, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_setPinValue+0x122>
    1010:	66 0f       	add	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	8a 95       	dec	r24
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_setPinValue+0x11e>
    1018:	cb 01       	movw	r24, r22
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	31 c0       	rjmp	.+98     	; 0x1082 <DIO_setPinValue+0x190>
			
	}
	else if(PinNum >=DIO_u8_PORTD_START && PinNum <= DIO_u8_PORTD_END)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	88 31       	cpi	r24, 0x18	; 24
    1024:	70 f1       	brcs	.+92     	; 0x1082 <DIO_setPinValue+0x190>
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	80 32       	cpi	r24, 0x20	; 32
    102a:	58 f5       	brcc	.+86     	; 0x1082 <DIO_setPinValue+0x190>
	{
			/*in PORTD*/
			PinNum -= DIO_u8_PORTD_OFFSET;
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	88 51       	subi	r24, 0x18	; 24
    1030:	89 83       	std	Y+1, r24	; 0x01
			ASSIGN_BIT(PORTD,PinNum,ValueCpy);
    1032:	a2 e3       	ldi	r26, 0x32	; 50
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e2 e3       	ldi	r30, 0x32	; 50
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_setPinValue+0x15c>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	2a 95       	dec	r18
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_setPinValue+0x158>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	a2 e3       	ldi	r26, 0x32	; 50
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e2 e3       	ldi	r30, 0x32	; 50
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	b9 01       	movw	r22, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_setPinValue+0x186>
    1074:	66 0f       	add	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	8a 95       	dec	r24
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_setPinValue+0x182>
    107c:	cb 01       	movw	r24, r22
    107e:	84 2b       	or	r24, r20
    1080:	8c 93       	st	X, r24
				
	}


}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <DIO_getPinValue>:
DIO_PinValue_t DIO_getPinValue(u8 PinNum)
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	00 d0       	rcall	.+0      	; 0x1092 <DIO_getPinValue+0x6>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinValue_t PinValue = DIO_Pin_low;
    1098:	19 82       	std	Y+1, r1	; 0x01

	/*TODO: switch between PORTS,
	 * get the right bit in corresponding register (PINx)
	 * and assign the value to PinValue*/
		
	if(PinNum <= DIO_u8_PORTA_END)
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	88 30       	cpi	r24, 0x08	; 8
    109e:	f0 f4       	brcc	.+60     	; 0x10dc <DIO_getPinValue+0x50>
	{
		/*in PORTA*/
		PinValue = GET_BIT(PINA,PinNum);	
    10a0:	e9 e3       	ldi	r30, 0x39	; 57
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_getPinValue+0x2e>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	2a 95       	dec	r18
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_getPinValue+0x2a>
    10be:	9a 01       	movw	r18, r20
    10c0:	28 23       	and	r18, r24
    10c2:	39 23       	and	r19, r25
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a9 01       	movw	r20, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_getPinValue+0x46>
    10ce:	55 95       	asr	r21
    10d0:	47 95       	ror	r20
    10d2:	8a 95       	dec	r24
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIO_getPinValue+0x42>
    10d6:	ca 01       	movw	r24, r20
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	74 c0       	rjmp	.+232    	; 0x11c4 <DIO_getPinValue+0x138>
	}
	else if(PinNum >=DIO_u8_PORTB_START && PinNum <= DIO_u8_PORTB_END)
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	88 30       	cpi	r24, 0x08	; 8
    10e0:	20 f1       	brcs	.+72     	; 0x112a <DIO_getPinValue+0x9e>
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	80 31       	cpi	r24, 0x10	; 16
    10e6:	08 f5       	brcc	.+66     	; 0x112a <DIO_getPinValue+0x9e>
	{
		/*in PORTB*/
		PinNum -= DIO_u8_PORTB_OFFSET;
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	88 50       	subi	r24, 0x08	; 8
    10ec:	8a 83       	std	Y+2, r24	; 0x02
		PinValue = GET_BIT(PINB,PinNum);
    10ee:	e6 e3       	ldi	r30, 0x36	; 54
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_getPinValue+0x7c>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	2a 95       	dec	r18
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_getPinValue+0x78>
    110c:	9a 01       	movw	r18, r20
    110e:	28 23       	and	r18, r24
    1110:	39 23       	and	r19, r25
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a9 01       	movw	r20, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_getPinValue+0x94>
    111c:	55 95       	asr	r21
    111e:	47 95       	ror	r20
    1120:	8a 95       	dec	r24
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_getPinValue+0x90>
    1124:	ca 01       	movw	r24, r20
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	4d c0       	rjmp	.+154    	; 0x11c4 <DIO_getPinValue+0x138>
		
	}
	else if(PinNum >=DIO_u8_PORTC_START && PinNum <= DIO_u8_PORTC_END)
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	80 31       	cpi	r24, 0x10	; 16
    112e:	20 f1       	brcs	.+72     	; 0x1178 <DIO_getPinValue+0xec>
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	88 31       	cpi	r24, 0x18	; 24
    1134:	08 f5       	brcc	.+66     	; 0x1178 <DIO_getPinValue+0xec>
	{
			/*in PORTC*/
			PinNum -= DIO_u8_PORTC_OFFSET;
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	80 51       	subi	r24, 0x10	; 16
    113a:	8a 83       	std	Y+2, r24	; 0x02
			PinValue = GET_BIT(PINC,PinNum);
    113c:	e3 e3       	ldi	r30, 0x33	; 51
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_getPinValue+0xca>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	2a 95       	dec	r18
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_getPinValue+0xc6>
    115a:	9a 01       	movw	r18, r20
    115c:	28 23       	and	r18, r24
    115e:	39 23       	and	r19, r25
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a9 01       	movw	r20, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_getPinValue+0xe2>
    116a:	55 95       	asr	r21
    116c:	47 95       	ror	r20
    116e:	8a 95       	dec	r24
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_getPinValue+0xde>
    1172:	ca 01       	movw	r24, r20
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	26 c0       	rjmp	.+76     	; 0x11c4 <DIO_getPinValue+0x138>
			
	}
	else if(PinNum >=DIO_u8_PORTD_START && PinNum <= DIO_u8_PORTD_END)
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	88 31       	cpi	r24, 0x18	; 24
    117c:	18 f1       	brcs	.+70     	; 0x11c4 <DIO_getPinValue+0x138>
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	80 32       	cpi	r24, 0x20	; 32
    1182:	00 f5       	brcc	.+64     	; 0x11c4 <DIO_getPinValue+0x138>
	{
			/*in PORTD*/
			PinNum -= DIO_u8_PORTD_OFFSET;
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	88 51       	subi	r24, 0x18	; 24
    1188:	8a 83       	std	Y+2, r24	; 0x02
			PinValue = GET_BIT(PIND,PinNum);			
    118a:	e0 e3       	ldi	r30, 0x30	; 48
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_getPinValue+0x118>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	2a 95       	dec	r18
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_getPinValue+0x114>
    11a8:	9a 01       	movw	r18, r20
    11aa:	28 23       	and	r18, r24
    11ac:	39 23       	and	r19, r25
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	a9 01       	movw	r20, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_getPinValue+0x130>
    11b8:	55 95       	asr	r21
    11ba:	47 95       	ror	r20
    11bc:	8a 95       	dec	r24
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_getPinValue+0x12c>
    11c0:	ca 01       	movw	r24, r20
    11c2:	89 83       	std	Y+1, r24	; 0x01
	}

	return PinValue;
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <DIO_setPortValue>:

void DIO_setPortValue(u8 PortNo, u8 PortVal)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <DIO_setPortValue+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <DIO_setPortValue+0x8>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNo)
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	3c 83       	std	Y+4, r19	; 0x04
    11e8:	2b 83       	std	Y+3, r18	; 0x03
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	91 05       	cpc	r25, r1
    11f2:	d1 f0       	breq	.+52     	; 0x1228 <DIO_setPortValue+0x58>
    11f4:	2b 81       	ldd	r18, Y+3	; 0x03
    11f6:	3c 81       	ldd	r19, Y+4	; 0x04
    11f8:	22 30       	cpi	r18, 0x02	; 2
    11fa:	31 05       	cpc	r19, r1
    11fc:	2c f4       	brge	.+10     	; 0x1208 <DIO_setPortValue+0x38>
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	61 f0       	breq	.+24     	; 0x121e <DIO_setPortValue+0x4e>
    1206:	1e c0       	rjmp	.+60     	; 0x1244 <DIO_setPortValue+0x74>
    1208:	2b 81       	ldd	r18, Y+3	; 0x03
    120a:	3c 81       	ldd	r19, Y+4	; 0x04
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	81 f0       	breq	.+32     	; 0x1232 <DIO_setPortValue+0x62>
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	83 30       	cpi	r24, 0x03	; 3
    1218:	91 05       	cpc	r25, r1
    121a:	81 f0       	breq	.+32     	; 0x123c <DIO_setPortValue+0x6c>
    121c:	13 c0       	rjmp	.+38     	; 0x1244 <DIO_setPortValue+0x74>
	{
		case DIO_PORT_A:
		PORTA = PortVal;
    121e:	eb e3       	ldi	r30, 0x3B	; 59
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	80 83       	st	Z, r24
    1226:	0e c0       	rjmp	.+28     	; 0x1244 <DIO_setPortValue+0x74>
		break;
		
		case DIO_PORT_B:
		PORTB = PortVal;
    1228:	e8 e3       	ldi	r30, 0x38	; 56
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	80 83       	st	Z, r24
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <DIO_setPortValue+0x74>
		break;
		
		case DIO_PORT_C:
		PORTC = PortVal;
    1232:	e5 e3       	ldi	r30, 0x35	; 53
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	80 83       	st	Z, r24
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <DIO_setPortValue+0x74>
		break;
		
		case DIO_PORT_D:
		PORTD = PortVal;
    123c:	e2 e3       	ldi	r30, 0x32	; 50
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	80 83       	st	Z, r24
		
		default:
		/*invalid Port no*/
		break;
	}	
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <DIO_getPortValue>:
u8 DIO_getPortValue(u8 PortNo)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <DIO_getPortValue+0x6>
    1258:	00 d0       	rcall	.+0      	; 0x125a <DIO_getPortValue+0x8>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	8a 83       	std	Y+2, r24	; 0x02
	u8 PortVal = 0;
    1260:	19 82       	std	Y+1, r1	; 0x01
		switch(PortNo)
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3c 83       	std	Y+4, r19	; 0x04
    126a:	2b 83       	std	Y+3, r18	; 0x03
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	d1 f0       	breq	.+52     	; 0x12aa <DIO_getPortValue+0x58>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	2c f4       	brge	.+10     	; 0x128a <DIO_getPortValue+0x38>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	61 f0       	breq	.+24     	; 0x12a0 <DIO_getPortValue+0x4e>
    1288:	1e c0       	rjmp	.+60     	; 0x12c6 <DIO_getPortValue+0x74>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	81 f0       	breq	.+32     	; 0x12b4 <DIO_getPortValue+0x62>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 05       	cpc	r25, r1
    129c:	81 f0       	breq	.+32     	; 0x12be <DIO_getPortValue+0x6c>
    129e:	13 c0       	rjmp	.+38     	; 0x12c6 <DIO_getPortValue+0x74>
		{
			case DIO_PORT_A:
			PortVal = PINA;
    12a0:	e9 e3       	ldi	r30, 0x39	; 57
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	0e c0       	rjmp	.+28     	; 0x12c6 <DIO_getPortValue+0x74>
			break;
			
			case DIO_PORT_B:
			PortVal = PINB;
    12aa:	e6 e3       	ldi	r30, 0x36	; 54
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <DIO_getPortValue+0x74>
			break;
			
			case DIO_PORT_C:
			PortVal = PINC;
    12b4:	e3 e3       	ldi	r30, 0x33	; 51
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <DIO_getPortValue+0x74>
			break;
			
			case DIO_PORT_D:
			PortVal = PIND;
    12be:	e0 e3       	ldi	r30, 0x30	; 48
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	89 83       	std	Y+1, r24	; 0x01
			default:
			/*invalid Port no*/
			break;
		}
	
	return PortVal;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <DIO_togglePin>:

void DIO_togglePin(u8 PinNum)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01
	/*TODO: switch between PORTS,
	 * assign the right bit in corresponding register with ValueCpy */
	if(PinNum <= DIO_u8_PORTA_END)
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	88 30       	cpi	r24, 0x08	; 8
    12e6:	a0 f4       	brcc	.+40     	; 0x1310 <DIO_togglePin+0x3a>
	{
		/*in PORTA*/
		TOGGLE_BIT(PORTA,PinNum);	
    12e8:	ab e3       	ldi	r26, 0x3B	; 59
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_togglePin+0x30>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_togglePin+0x2c>
    130a:	84 27       	eor	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	56 c0       	rjmp	.+172    	; 0x13bc <DIO_togglePin+0xe6>
	}
	else if(PinNum >=DIO_u8_PORTB_START && PinNum <= DIO_u8_PORTB_END)
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	88 30       	cpi	r24, 0x08	; 8
    1314:	d0 f0       	brcs	.+52     	; 0x134a <DIO_togglePin+0x74>
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	80 31       	cpi	r24, 0x10	; 16
    131a:	b8 f4       	brcc	.+46     	; 0x134a <DIO_togglePin+0x74>
	{
		/*in PORTB*/
		PinNum -= DIO_u8_PORTB_OFFSET;
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	88 50       	subi	r24, 0x08	; 8
    1320:	89 83       	std	Y+1, r24	; 0x01
		TOGGLE_BIT(PORTB,PinNum);
    1322:	a8 e3       	ldi	r26, 0x38	; 56
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e8 e3       	ldi	r30, 0x38	; 56
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_togglePin+0x6a>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_togglePin+0x66>
    1344:	84 27       	eor	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	39 c0       	rjmp	.+114    	; 0x13bc <DIO_togglePin+0xe6>
		
	}
	else if(PinNum >=DIO_u8_PORTC_START && PinNum <= DIO_u8_PORTC_END)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	80 31       	cpi	r24, 0x10	; 16
    134e:	d0 f0       	brcs	.+52     	; 0x1384 <DIO_togglePin+0xae>
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	88 31       	cpi	r24, 0x18	; 24
    1354:	b8 f4       	brcc	.+46     	; 0x1384 <DIO_togglePin+0xae>
	{
			/*in PORTC*/
			PinNum -= DIO_u8_PORTC_OFFSET;
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	80 51       	subi	r24, 0x10	; 16
    135a:	89 83       	std	Y+1, r24	; 0x01
			TOGGLE_BIT(PORTC,PinNum);
    135c:	a5 e3       	ldi	r26, 0x35	; 53
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e5 e3       	ldi	r30, 0x35	; 53
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <DIO_togglePin+0xa4>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <DIO_togglePin+0xa0>
    137e:	84 27       	eor	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	1c c0       	rjmp	.+56     	; 0x13bc <DIO_togglePin+0xe6>
			
	}
	else if(PinNum >=DIO_u8_PORTD_START && PinNum <= DIO_u8_PORTD_END)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	88 31       	cpi	r24, 0x18	; 24
    1388:	c8 f0       	brcs	.+50     	; 0x13bc <DIO_togglePin+0xe6>
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	80 32       	cpi	r24, 0x20	; 32
    138e:	b0 f4       	brcc	.+44     	; 0x13bc <DIO_togglePin+0xe6>
	{
			/*in PORTD*/
			PinNum -= DIO_u8_PORTD_OFFSET;
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	88 51       	subi	r24, 0x18	; 24
    1394:	89 83       	std	Y+1, r24	; 0x01
			TOGGLE_BIT(PORTD,PinNum);			
    1396:	a2 e3       	ldi	r26, 0x32	; 50
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e2 e3       	ldi	r30, 0x32	; 50
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_togglePin+0xde>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_togglePin+0xda>
    13b8:	84 27       	eor	r24, r20
    13ba:	8c 93       	st	X, r24
	}
}
    13bc:	0f 90       	pop	r0
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <ADC_init>:
#include <avr/interrupt.h>

u16 ADC_LastConvertedVal =0 ;

void ADC_init(void)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62

	/*Select Vref source*/
	ADMUX &= 0b00111111;
    13cc:	a7 e2       	ldi	r26, 0x27	; 39
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e7 e2       	ldi	r30, 0x27	; 39
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8f 73       	andi	r24, 0x3F	; 63
    13d8:	8c 93       	st	X, r24
	ADMUX |=(ADC_VREF_SOURCE_SELECTOR<<6);
    13da:	a7 e2       	ldi	r26, 0x27	; 39
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e7 e2       	ldi	r30, 0x27	; 39
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 64       	ori	r24, 0x40	; 64
    13e6:	8c 93       	st	X, r24

	/*select mode*/
#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
	SET_BIT(ADCSRA,5);
    13e8:	a6 e2       	ldi	r26, 0x26	; 38
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e6 e2       	ldi	r30, 0x26	; 38
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	80 62       	ori	r24, 0x20	; 32
    13f4:	8c 93       	st	X, r24

	/*Select trigger type*/
	SFIOR &=0b00011111;
    13f6:	a0 e5       	ldi	r26, 0x50	; 80
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e0 e5       	ldi	r30, 0x50	; 80
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 71       	andi	r24, 0x1F	; 31
    1402:	8c 93       	st	X, r24
	SFIOR |= (ADC_TRIGGER_TYPE<<5);
    1404:	a0 e5       	ldi	r26, 0x50	; 80
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e0 e5       	ldi	r30, 0x50	; 80
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	8c 93       	st	X, r24
#endif

	/*select prescaler*/
	ADCSRA &= 0b11111000;
    1410:	a6 e2       	ldi	r26, 0x26	; 38
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e6 e2       	ldi	r30, 0x26	; 38
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	88 7f       	andi	r24, 0xF8	; 248
    141c:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALER_SELECTOR;
    141e:	a6 e2       	ldi	r26, 0x26	; 38
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e6 e2       	ldi	r30, 0x26	; 38
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	86 60       	ori	r24, 0x06	; 6
    142a:	8c 93       	st	X, r24

	/*enable ADC peripheral*/
	SET_BIT(ADCSRA,7);
    142c:	a6 e2       	ldi	r26, 0x26	; 38
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e6 e2       	ldi	r30, 0x26	; 38
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	80 68       	ori	r24, 0x80	; 128
    1438:	8c 93       	st	X, r24

}
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <ADC_enInterrupt>:
void ADC_enInterrupt(void)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    1448:	a6 e2       	ldi	r26, 0x26	; 38
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e6 e2       	ldi	r30, 0x26	; 38
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	88 60       	ori	r24, 0x08	; 8
    1454:	8c 93       	st	X, r24
}
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <ADC_diInterrupt>:
void ADC_diInterrupt(void)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIE);
    1464:	a6 e2       	ldi	r26, 0x26	; 38
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e6 e2       	ldi	r30, 0x26	; 38
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	87 7f       	andi	r24, 0xF7	; 247
    1470:	8c 93       	st	X, r24
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <ADC_startConversion>:
void ADC_startConversion(ADC_Ch_t ChannelNo)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	0f 92       	push	r0
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	89 83       	std	Y+1, r24	; 0x01
	/*choose channel*/
	ADMUX &=0b11100000;
    1484:	a7 e2       	ldi	r26, 0x27	; 39
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e7 e2       	ldi	r30, 0x27	; 39
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	80 7e       	andi	r24, 0xE0	; 224
    1490:	8c 93       	st	X, r24
	ADMUX |= ChannelNo;
    1492:	a7 e2       	ldi	r26, 0x27	; 39
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e7 e2       	ldi	r30, 0x27	; 39
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	90 81       	ld	r25, Z
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	89 2b       	or	r24, r25
    14a0:	8c 93       	st	X, r24

	/*start conversion*/
	SET_BIT(ADCSRA,ADSC);
    14a2:	a6 e2       	ldi	r26, 0x26	; 38
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e6 e2       	ldi	r30, 0x26	; 38
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 64       	ori	r24, 0x40	; 64
    14ae:	8c 93       	st	X, r24

	/*check if interrupt disabled*/
	if(GET_BIT(ADMUX,ADIE) == 0)
    14b0:	e7 e2       	ldi	r30, 0x27	; 39
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	88 2f       	mov	r24, r24
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	88 70       	andi	r24, 0x08	; 8
    14bc:	90 70       	andi	r25, 0x00	; 0
    14be:	95 95       	asr	r25
    14c0:	87 95       	ror	r24
    14c2:	95 95       	asr	r25
    14c4:	87 95       	ror	r24
    14c6:	95 95       	asr	r25
    14c8:	87 95       	ror	r24
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	c9 f4       	brne	.+50     	; 0x1500 <ADC_startConversion+0x88>
	{
		/*wait until ADC conversion is finished*/
		while(GET_BIT(ADCSRA,ADIF));
    14ce:	e6 e2       	ldi	r30, 0x26	; 38
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	80 71       	andi	r24, 0x10	; 16
    14da:	90 70       	andi	r25, 0x00	; 0
    14dc:	95 95       	asr	r25
    14de:	87 95       	ror	r24
    14e0:	95 95       	asr	r25
    14e2:	87 95       	ror	r24
    14e4:	95 95       	asr	r25
    14e6:	87 95       	ror	r24
    14e8:	95 95       	asr	r25
    14ea:	87 95       	ror	r24
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	79 f7       	brne	.-34     	; 0x14ce <ADC_startConversion+0x56>
		/*update value*/
		ADC_LastConvertedVal = ADC;
    14f0:	e4 e2       	ldi	r30, 0x24	; 36
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	90 93 55 04 	sts	0x0455, r25
    14fc:	80 93 54 04 	sts	0x0454, r24
	}
}
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <__vector_16>:

void __vector_16(void) __attribute__((signal,used));

void __vector_16(void)
{
    1508:	1f 92       	push	r1
    150a:	0f 92       	push	r0
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
    1512:	8f 93       	push	r24
    1514:	9f 93       	push	r25
    1516:	ef 93       	push	r30
    1518:	ff 93       	push	r31
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
	/*update value*/
	ADC_LastConvertedVal = ADC;
    1522:	e4 e2       	ldi	r30, 0x24	; 36
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	90 93 55 04 	sts	0x0455, r25
    152e:	80 93 54 04 	sts	0x0454, r24
}
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	0f 90       	pop	r0
    1544:	1f 90       	pop	r1
    1546:	18 95       	reti

00001548 <SevSegments_enable>:

#include "SevSegments_Priv.h"
#include "SevSegments_config.h"
#include "SevSegments.h"
void SevSegments_enable(void)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
	#if (SEVSEGMENTS_COMMON_TYPE == SEVSEGMENTS_COMMON_CATHOD)
		/*set enable pin Low*/
		DIO_setPinValue(SEVSEGMENTS_COMMON_PIN,DIO_Pin_low);
    1550:	87 e0       	ldi	r24, 0x07	; 7
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	#else
		/*set enable pin High*/
		DIO_setPinValue(SEVSEGMENTS_COMMON_PIN,DIO_Pin_high);
	#endif
}
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <SevSegments_disable>:
void SevSegments_disable(void)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
		#if (SEVSEGMENTS_COMMON_TYPE == SEVSEGMENTS_COMMON_CATHOD)
		/*set enable pin Low*/
		DIO_setPinValue(SEVSEGMENTS_COMMON_PIN,DIO_Pin_high);
    1566:	87 e0       	ldi	r24, 0x07	; 7
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
		#else
		/*set enable pin High*/
		DIO_setPinValue(SEVSEGMENTS_COMMON_PIN,DIO_Pin_low);
		#endif
	
}
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <SevSegments_displayNo>:
void SevSegments_displayNo(u8 Val)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <SevSegments_displayNo+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <SevSegments_displayNo+0x8>
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	8a 83       	std	Y+2, r24	; 0x02
	u8 EncodedValue;
	switch(Val)
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	3c 83       	std	Y+4, r19	; 0x04
    158a:	2b 83       	std	Y+3, r18	; 0x03
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	84 30       	cpi	r24, 0x04	; 4
    1592:	91 05       	cpc	r25, r1
    1594:	09 f4       	brne	.+2      	; 0x1598 <SevSegments_displayNo+0x24>
    1596:	4b c0       	rjmp	.+150    	; 0x162e <SevSegments_displayNo+0xba>
    1598:	2b 81       	ldd	r18, Y+3	; 0x03
    159a:	3c 81       	ldd	r19, Y+4	; 0x04
    159c:	25 30       	cpi	r18, 0x05	; 5
    159e:	31 05       	cpc	r19, r1
    15a0:	d4 f4       	brge	.+52     	; 0x15d6 <SevSegments_displayNo+0x62>
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	91 05       	cpc	r25, r1
    15aa:	c1 f1       	breq	.+112    	; 0x161c <SevSegments_displayNo+0xa8>
    15ac:	2b 81       	ldd	r18, Y+3	; 0x03
    15ae:	3c 81       	ldd	r19, Y+4	; 0x04
    15b0:	22 30       	cpi	r18, 0x02	; 2
    15b2:	31 05       	cpc	r19, r1
    15b4:	2c f4       	brge	.+10     	; 0x15c0 <SevSegments_displayNo+0x4c>
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	61 f1       	breq	.+88     	; 0x1616 <SevSegments_displayNo+0xa2>
    15be:	49 c0       	rjmp	.+146    	; 0x1652 <SevSegments_displayNo+0xde>
    15c0:	2b 81       	ldd	r18, Y+3	; 0x03
    15c2:	3c 81       	ldd	r19, Y+4	; 0x04
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	61 f1       	breq	.+88     	; 0x1622 <SevSegments_displayNo+0xae>
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	91 05       	cpc	r25, r1
    15d2:	51 f1       	breq	.+84     	; 0x1628 <SevSegments_displayNo+0xb4>
    15d4:	3e c0       	rjmp	.+124    	; 0x1652 <SevSegments_displayNo+0xde>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	27 30       	cpi	r18, 0x07	; 7
    15dc:	31 05       	cpc	r19, r1
    15de:	81 f1       	breq	.+96     	; 0x1640 <SevSegments_displayNo+0xcc>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	88 30       	cpi	r24, 0x08	; 8
    15e6:	91 05       	cpc	r25, r1
    15e8:	5c f4       	brge	.+22     	; 0x1600 <SevSegments_displayNo+0x8c>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	3c 81       	ldd	r19, Y+4	; 0x04
    15ee:	25 30       	cpi	r18, 0x05	; 5
    15f0:	31 05       	cpc	r19, r1
    15f2:	01 f1       	breq	.+64     	; 0x1634 <SevSegments_displayNo+0xc0>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	86 30       	cpi	r24, 0x06	; 6
    15fa:	91 05       	cpc	r25, r1
    15fc:	f1 f0       	breq	.+60     	; 0x163a <SevSegments_displayNo+0xc6>
    15fe:	29 c0       	rjmp	.+82     	; 0x1652 <SevSegments_displayNo+0xde>
    1600:	2b 81       	ldd	r18, Y+3	; 0x03
    1602:	3c 81       	ldd	r19, Y+4	; 0x04
    1604:	28 30       	cpi	r18, 0x08	; 8
    1606:	31 05       	cpc	r19, r1
    1608:	f1 f0       	breq	.+60     	; 0x1646 <SevSegments_displayNo+0xd2>
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	89 30       	cpi	r24, 0x09	; 9
    1610:	91 05       	cpc	r25, r1
    1612:	e1 f0       	breq	.+56     	; 0x164c <SevSegments_displayNo+0xd8>
    1614:	1e c0       	rjmp	.+60     	; 0x1652 <SevSegments_displayNo+0xde>
	{
		case 0:
			EncodedValue = 0b00111111;
    1616:	8f e3       	ldi	r24, 0x3F	; 63
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	1c c0       	rjmp	.+56     	; 0x1654 <SevSegments_displayNo+0xe0>
			break;
		case 1:
			EncodedValue = 0b00000110;
    161c:	86 e0       	ldi	r24, 0x06	; 6
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	19 c0       	rjmp	.+50     	; 0x1654 <SevSegments_displayNo+0xe0>
			break;
		case 2:
			EncodedValue = 0b01011011;
    1622:	8b e5       	ldi	r24, 0x5B	; 91
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	16 c0       	rjmp	.+44     	; 0x1654 <SevSegments_displayNo+0xe0>
			break;
		case 3:
			EncodedValue = 0b01001111;
    1628:	8f e4       	ldi	r24, 0x4F	; 79
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	13 c0       	rjmp	.+38     	; 0x1654 <SevSegments_displayNo+0xe0>
			break;
		case 4:
			EncodedValue = 0b01100110;
    162e:	86 e6       	ldi	r24, 0x66	; 102
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	10 c0       	rjmp	.+32     	; 0x1654 <SevSegments_displayNo+0xe0>
			break;
		case 5:
			EncodedValue = 0b01101101;
    1634:	8d e6       	ldi	r24, 0x6D	; 109
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	0d c0       	rjmp	.+26     	; 0x1654 <SevSegments_displayNo+0xe0>
			break;
		case 6:
			EncodedValue = 0b01111101;
    163a:	8d e7       	ldi	r24, 0x7D	; 125
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	0a c0       	rjmp	.+20     	; 0x1654 <SevSegments_displayNo+0xe0>
			break;
		case 7:
			EncodedValue = 0b00000111;
    1640:	87 e0       	ldi	r24, 0x07	; 7
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	07 c0       	rjmp	.+14     	; 0x1654 <SevSegments_displayNo+0xe0>
			break;
		case 8:
			EncodedValue = 0b01111111;
    1646:	8f e7       	ldi	r24, 0x7F	; 127
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <SevSegments_displayNo+0xe0>
			break;
		case 9:
			EncodedValue = 0b01101111;
    164c:	8f e6       	ldi	r24, 0x6F	; 111
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	01 c0       	rjmp	.+2      	; 0x1654 <SevSegments_displayNo+0xe0>
			break;
		default:
			EncodedValue = 0b00000000;
    1652:	19 82       	std	Y+1, r1	; 0x01
			break;
	}
		#if (SEVSEGMENTS_COMMON_TYPE == SEVSEGMENTS_COMMON_CATHOD)
			DIO_setPortValue(SEVSEGMENTS_ATTACHED_PORT,EncodedValue);
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	69 81       	ldd	r22, Y+1	; 0x01
    1658:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <DIO_setPortValue>
		#else
			DIO_setPortValue(SEVSEGMENTS_ATTACHED_PORT,~EncodedValue);
		#endif
	
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <LCD_init>:

/************************************************/
/* 			 this function is used to          */
/*         initialze  LCD                    */
/*********************************************/
void LCD_init(void){
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	c6 54       	subi	r28, 0x46	; 70
    1678:	d0 40       	sbci	r29, 0x00	; 0
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
#else
	/*
	 * To init LCD in 4-bit mode
	 * sequence 0x33,0x32,0x28 should be written as command
	 * */
	LCD_writeCommand(0x33);/*init*/
    1684:	83 e3       	ldi	r24, 0x33	; 51
    1686:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <LCD_writeCommand>
    168a:	fe 01       	movw	r30, r28
    168c:	ed 5b       	subi	r30, 0xBD	; 189
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 e8       	ldi	r26, 0x80	; 128
    1696:	bf e3       	ldi	r27, 0x3F	; 63
    1698:	80 83       	st	Z, r24
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	a2 83       	std	Z+2, r26	; 0x02
    169e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	8e 01       	movw	r16, r28
    16a2:	01 5c       	subi	r16, 0xC1	; 193
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	fe 01       	movw	r30, r28
    16a8:	ed 5b       	subi	r30, 0xBD	; 189
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a ef       	ldi	r20, 0xFA	; 250
    16ba:	54 e4       	ldi	r21, 0x44	; 68
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	f8 01       	movw	r30, r16
    16c6:	80 83       	st	Z, r24
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	a2 83       	std	Z+2, r26	; 0x02
    16cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ce:	fe 01       	movw	r30, r28
    16d0:	ff 96       	adiw	r30, 0x3f	; 63
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <LCD_init+0x8a>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9e af       	std	Y+62, r25	; 0x3e
    16f0:	8d af       	std	Y+61, r24	; 0x3d
    16f2:	46 c0       	rjmp	.+140    	; 0x1780 <LCD_init+0x116>
	else if (__tmp > 65535)
    16f4:	fe 01       	movw	r30, r28
    16f6:	ff 96       	adiw	r30, 0x3f	; 63
    16f8:	60 81       	ld	r22, Z
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	3f ef       	ldi	r19, 0xFF	; 255
    1704:	4f e7       	ldi	r20, 0x7F	; 127
    1706:	57 e4       	ldi	r21, 0x47	; 71
    1708:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    170c:	18 16       	cp	r1, r24
    170e:	64 f5       	brge	.+88     	; 0x1768 <LCD_init+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1710:	fe 01       	movw	r30, r28
    1712:	ed 5b       	subi	r30, 0xBD	; 189
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	60 81       	ld	r22, Z
    1718:	71 81       	ldd	r23, Z+1	; 0x01
    171a:	82 81       	ldd	r24, Z+2	; 0x02
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e af       	std	Y+62, r25	; 0x3e
    173c:	8d af       	std	Y+61, r24	; 0x3d
    173e:	0f c0       	rjmp	.+30     	; 0x175e <LCD_init+0xf4>
    1740:	88 ec       	ldi	r24, 0xC8	; 200
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c af       	std	Y+60, r25	; 0x3c
    1746:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1748:	8b ad       	ldd	r24, Y+59	; 0x3b
    174a:	9c ad       	ldd	r25, Y+60	; 0x3c
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <LCD_init+0xe2>
    1750:	9c af       	std	Y+60, r25	; 0x3c
    1752:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	8d ad       	ldd	r24, Y+61	; 0x3d
    1756:	9e ad       	ldd	r25, Y+62	; 0x3e
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	9e af       	std	Y+62, r25	; 0x3e
    175c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1760:	9e ad       	ldd	r25, Y+62	; 0x3e
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f7       	brne	.-38     	; 0x1740 <LCD_init+0xd6>
    1766:	16 c0       	rjmp	.+44     	; 0x1794 <LCD_init+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1768:	fe 01       	movw	r30, r28
    176a:	ff 96       	adiw	r30, 0x3f	; 63
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9e af       	std	Y+62, r25	; 0x3e
    177e:	8d af       	std	Y+61, r24	; 0x3d
    1780:	8d ad       	ldd	r24, Y+61	; 0x3d
    1782:	9e ad       	ldd	r25, Y+62	; 0x3e
    1784:	9a af       	std	Y+58, r25	; 0x3a
    1786:	89 af       	std	Y+57, r24	; 0x39
    1788:	89 ad       	ldd	r24, Y+57	; 0x39
    178a:	9a ad       	ldd	r25, Y+58	; 0x3a
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <LCD_init+0x122>
    1790:	9a af       	std	Y+58, r25	; 0x3a
    1792:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_writeCommand(0x32);/*init*/
    1794:	82 e3       	ldi	r24, 0x32	; 50
    1796:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <LCD_writeCommand>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e8       	ldi	r26, 0x80	; 128
    17a0:	bf e3       	ldi	r27, 0x3F	; 63
    17a2:	8d ab       	std	Y+53, r24	; 0x35
    17a4:	9e ab       	std	Y+54, r25	; 0x36
    17a6:	af ab       	std	Y+55, r26	; 0x37
    17a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17aa:	6d a9       	ldd	r22, Y+53	; 0x35
    17ac:	7e a9       	ldd	r23, Y+54	; 0x36
    17ae:	8f a9       	ldd	r24, Y+55	; 0x37
    17b0:	98 ad       	ldd	r25, Y+56	; 0x38
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	4a ef       	ldi	r20, 0xFA	; 250
    17b8:	54 e4       	ldi	r21, 0x44	; 68
    17ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	89 ab       	std	Y+49, r24	; 0x31
    17c4:	9a ab       	std	Y+50, r25	; 0x32
    17c6:	ab ab       	std	Y+51, r26	; 0x33
    17c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17ca:	69 a9       	ldd	r22, Y+49	; 0x31
    17cc:	7a a9       	ldd	r23, Y+50	; 0x32
    17ce:	8b a9       	ldd	r24, Y+51	; 0x33
    17d0:	9c a9       	ldd	r25, Y+52	; 0x34
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f e3       	ldi	r21, 0x3F	; 63
    17da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17de:	88 23       	and	r24, r24
    17e0:	2c f4       	brge	.+10     	; 0x17ec <LCD_init+0x182>
		__ticks = 1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	98 ab       	std	Y+48, r25	; 0x30
    17e8:	8f a7       	std	Y+47, r24	; 0x2f
    17ea:	3f c0       	rjmp	.+126    	; 0x186a <LCD_init+0x200>
	else if (__tmp > 65535)
    17ec:	69 a9       	ldd	r22, Y+49	; 0x31
    17ee:	7a a9       	ldd	r23, Y+50	; 0x32
    17f0:	8b a9       	ldd	r24, Y+51	; 0x33
    17f2:	9c a9       	ldd	r25, Y+52	; 0x34
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	3f ef       	ldi	r19, 0xFF	; 255
    17f8:	4f e7       	ldi	r20, 0x7F	; 127
    17fa:	57 e4       	ldi	r21, 0x47	; 71
    17fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1800:	18 16       	cp	r1, r24
    1802:	4c f5       	brge	.+82     	; 0x1856 <LCD_init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	6d a9       	ldd	r22, Y+53	; 0x35
    1806:	7e a9       	ldd	r23, Y+54	; 0x36
    1808:	8f a9       	ldd	r24, Y+55	; 0x37
    180a:	98 ad       	ldd	r25, Y+56	; 0x38
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e2       	ldi	r20, 0x20	; 32
    1812:	51 e4       	ldi	r21, 0x41	; 65
    1814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	98 ab       	std	Y+48, r25	; 0x30
    182a:	8f a7       	std	Y+47, r24	; 0x2f
    182c:	0f c0       	rjmp	.+30     	; 0x184c <LCD_init+0x1e2>
    182e:	88 ec       	ldi	r24, 0xC8	; 200
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	9e a7       	std	Y+46, r25	; 0x2e
    1834:	8d a7       	std	Y+45, r24	; 0x2d
    1836:	8d a5       	ldd	r24, Y+45	; 0x2d
    1838:	9e a5       	ldd	r25, Y+46	; 0x2e
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <LCD_init+0x1d0>
    183e:	9e a7       	std	Y+46, r25	; 0x2e
    1840:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	8f a5       	ldd	r24, Y+47	; 0x2f
    1844:	98 a9       	ldd	r25, Y+48	; 0x30
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	98 ab       	std	Y+48, r25	; 0x30
    184a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184c:	8f a5       	ldd	r24, Y+47	; 0x2f
    184e:	98 a9       	ldd	r25, Y+48	; 0x30
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	69 f7       	brne	.-38     	; 0x182e <LCD_init+0x1c4>
    1854:	14 c0       	rjmp	.+40     	; 0x187e <LCD_init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	69 a9       	ldd	r22, Y+49	; 0x31
    1858:	7a a9       	ldd	r23, Y+50	; 0x32
    185a:	8b a9       	ldd	r24, Y+51	; 0x33
    185c:	9c a9       	ldd	r25, Y+52	; 0x34
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	98 ab       	std	Y+48, r25	; 0x30
    1868:	8f a7       	std	Y+47, r24	; 0x2f
    186a:	8f a5       	ldd	r24, Y+47	; 0x2f
    186c:	98 a9       	ldd	r25, Y+48	; 0x30
    186e:	9c a7       	std	Y+44, r25	; 0x2c
    1870:	8b a7       	std	Y+43, r24	; 0x2b
    1872:	8b a5       	ldd	r24, Y+43	; 0x2b
    1874:	9c a5       	ldd	r25, Y+44	; 0x2c
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <LCD_init+0x20c>
    187a:	9c a7       	std	Y+44, r25	; 0x2c
    187c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_writeCommand(0x28);/*init. LCD 2 line, 4bit mode*/
    187e:	88 e2       	ldi	r24, 0x28	; 40
    1880:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <LCD_writeCommand>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a0 e8       	ldi	r26, 0x80	; 128
    188a:	bf e3       	ldi	r27, 0x3F	; 63
    188c:	8f a3       	std	Y+39, r24	; 0x27
    188e:	98 a7       	std	Y+40, r25	; 0x28
    1890:	a9 a7       	std	Y+41, r26	; 0x29
    1892:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1894:	6f a1       	ldd	r22, Y+39	; 0x27
    1896:	78 a5       	ldd	r23, Y+40	; 0x28
    1898:	89 a5       	ldd	r24, Y+41	; 0x29
    189a:	9a a5       	ldd	r25, Y+42	; 0x2a
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	4a ef       	ldi	r20, 0xFA	; 250
    18a2:	54 e4       	ldi	r21, 0x44	; 68
    18a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	8b a3       	std	Y+35, r24	; 0x23
    18ae:	9c a3       	std	Y+36, r25	; 0x24
    18b0:	ad a3       	std	Y+37, r26	; 0x25
    18b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18b4:	6b a1       	ldd	r22, Y+35	; 0x23
    18b6:	7c a1       	ldd	r23, Y+36	; 0x24
    18b8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ba:	9e a1       	ldd	r25, Y+38	; 0x26
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <LCD_init+0x26c>
		__ticks = 1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	9a a3       	std	Y+34, r25	; 0x22
    18d2:	89 a3       	std	Y+33, r24	; 0x21
    18d4:	3f c0       	rjmp	.+126    	; 0x1954 <LCD_init+0x2ea>
	else if (__tmp > 65535)
    18d6:	6b a1       	ldd	r22, Y+35	; 0x23
    18d8:	7c a1       	ldd	r23, Y+36	; 0x24
    18da:	8d a1       	ldd	r24, Y+37	; 0x25
    18dc:	9e a1       	ldd	r25, Y+38	; 0x26
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	3f ef       	ldi	r19, 0xFF	; 255
    18e2:	4f e7       	ldi	r20, 0x7F	; 127
    18e4:	57 e4       	ldi	r21, 0x47	; 71
    18e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ea:	18 16       	cp	r1, r24
    18ec:	4c f5       	brge	.+82     	; 0x1940 <LCD_init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ee:	6f a1       	ldd	r22, Y+39	; 0x27
    18f0:	78 a5       	ldd	r23, Y+40	; 0x28
    18f2:	89 a5       	ldd	r24, Y+41	; 0x29
    18f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e2       	ldi	r20, 0x20	; 32
    18fc:	51 e4       	ldi	r21, 0x41	; 65
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	9a a3       	std	Y+34, r25	; 0x22
    1914:	89 a3       	std	Y+33, r24	; 0x21
    1916:	0f c0       	rjmp	.+30     	; 0x1936 <LCD_init+0x2cc>
    1918:	88 ec       	ldi	r24, 0xC8	; 200
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	98 a3       	std	Y+32, r25	; 0x20
    191e:	8f 8f       	std	Y+31, r24	; 0x1f
    1920:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1922:	98 a1       	ldd	r25, Y+32	; 0x20
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <LCD_init+0x2ba>
    1928:	98 a3       	std	Y+32, r25	; 0x20
    192a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192c:	89 a1       	ldd	r24, Y+33	; 0x21
    192e:	9a a1       	ldd	r25, Y+34	; 0x22
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	9a a3       	std	Y+34, r25	; 0x22
    1934:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1936:	89 a1       	ldd	r24, Y+33	; 0x21
    1938:	9a a1       	ldd	r25, Y+34	; 0x22
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	69 f7       	brne	.-38     	; 0x1918 <LCD_init+0x2ae>
    193e:	14 c0       	rjmp	.+40     	; 0x1968 <LCD_init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1940:	6b a1       	ldd	r22, Y+35	; 0x23
    1942:	7c a1       	ldd	r23, Y+36	; 0x24
    1944:	8d a1       	ldd	r24, Y+37	; 0x25
    1946:	9e a1       	ldd	r25, Y+38	; 0x26
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9a a3       	std	Y+34, r25	; 0x22
    1952:	89 a3       	std	Y+33, r24	; 0x21
    1954:	89 a1       	ldd	r24, Y+33	; 0x21
    1956:	9a a1       	ldd	r25, Y+34	; 0x22
    1958:	9e 8f       	std	Y+30, r25	; 0x1e
    195a:	8d 8f       	std	Y+29, r24	; 0x1d
    195c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <LCD_init+0x2f6>
    1964:	9e 8f       	std	Y+30, r25	; 0x1e
    1966:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#endif


	LCD_writeCommand(0x0E);/*cursor on*/
    1968:	8e e0       	ldi	r24, 0x0E	; 14
    196a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <LCD_writeCommand>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a0 e8       	ldi	r26, 0x80	; 128
    1974:	bf e3       	ldi	r27, 0x3F	; 63
    1976:	89 8f       	std	Y+25, r24	; 0x19
    1978:	9a 8f       	std	Y+26, r25	; 0x1a
    197a:	ab 8f       	std	Y+27, r26	; 0x1b
    197c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197e:	69 8d       	ldd	r22, Y+25	; 0x19
    1980:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1982:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1984:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a ef       	ldi	r20, 0xFA	; 250
    198c:	54 e4       	ldi	r21, 0x44	; 68
    198e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	8d 8b       	std	Y+21, r24	; 0x15
    1998:	9e 8b       	std	Y+22, r25	; 0x16
    199a:	af 8b       	std	Y+23, r26	; 0x17
    199c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    199e:	6d 89       	ldd	r22, Y+21	; 0x15
    19a0:	7e 89       	ldd	r23, Y+22	; 0x16
    19a2:	8f 89       	ldd	r24, Y+23	; 0x17
    19a4:	98 8d       	ldd	r25, Y+24	; 0x18
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e8       	ldi	r20, 0x80	; 128
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b2:	88 23       	and	r24, r24
    19b4:	2c f4       	brge	.+10     	; 0x19c0 <LCD_init+0x356>
		__ticks = 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9c 8b       	std	Y+20, r25	; 0x14
    19bc:	8b 8b       	std	Y+19, r24	; 0x13
    19be:	3f c0       	rjmp	.+126    	; 0x1a3e <LCD_init+0x3d4>
	else if (__tmp > 65535)
    19c0:	6d 89       	ldd	r22, Y+21	; 0x15
    19c2:	7e 89       	ldd	r23, Y+22	; 0x16
    19c4:	8f 89       	ldd	r24, Y+23	; 0x17
    19c6:	98 8d       	ldd	r25, Y+24	; 0x18
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	3f ef       	ldi	r19, 0xFF	; 255
    19cc:	4f e7       	ldi	r20, 0x7F	; 127
    19ce:	57 e4       	ldi	r21, 0x47	; 71
    19d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d4:	18 16       	cp	r1, r24
    19d6:	4c f5       	brge	.+82     	; 0x1a2a <LCD_init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d8:	69 8d       	ldd	r22, Y+25	; 0x19
    19da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e2       	ldi	r20, 0x20	; 32
    19e6:	51 e4       	ldi	r21, 0x41	; 65
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9c 8b       	std	Y+20, r25	; 0x14
    19fe:	8b 8b       	std	Y+19, r24	; 0x13
    1a00:	0f c0       	rjmp	.+30     	; 0x1a20 <LCD_init+0x3b6>
    1a02:	88 ec       	ldi	r24, 0xC8	; 200
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9a 8b       	std	Y+18, r25	; 0x12
    1a08:	89 8b       	std	Y+17, r24	; 0x11
    1a0a:	89 89       	ldd	r24, Y+17	; 0x11
    1a0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_init+0x3a4>
    1a12:	9a 8b       	std	Y+18, r25	; 0x12
    1a14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a16:	8b 89       	ldd	r24, Y+19	; 0x13
    1a18:	9c 89       	ldd	r25, Y+20	; 0x14
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	9c 8b       	std	Y+20, r25	; 0x14
    1a1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a20:	8b 89       	ldd	r24, Y+19	; 0x13
    1a22:	9c 89       	ldd	r25, Y+20	; 0x14
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	69 f7       	brne	.-38     	; 0x1a02 <LCD_init+0x398>
    1a28:	14 c0       	rjmp	.+40     	; 0x1a52 <LCD_init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a30:	98 8d       	ldd	r25, Y+24	; 0x18
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9c 8b       	std	Y+20, r25	; 0x14
    1a3c:	8b 8b       	std	Y+19, r24	; 0x13
    1a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a40:	9c 89       	ldd	r25, Y+20	; 0x14
    1a42:	98 8b       	std	Y+16, r25	; 0x10
    1a44:	8f 87       	std	Y+15, r24	; 0x0f
    1a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a48:	98 89       	ldd	r25, Y+16	; 0x10
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_init+0x3e0>
    1a4e:	98 8b       	std	Y+16, r25	; 0x10
    1a50:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_writeCommand(0x01);/*clear LCD*/
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <LCD_writeCommand>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e0       	ldi	r26, 0x00	; 0
    1a5e:	b0 e4       	ldi	r27, 0x40	; 64
    1a60:	8b 87       	std	Y+11, r24	; 0x0b
    1a62:	9c 87       	std	Y+12, r25	; 0x0c
    1a64:	ad 87       	std	Y+13, r26	; 0x0d
    1a66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	4a ef       	ldi	r20, 0xFA	; 250
    1a76:	54 e4       	ldi	r21, 0x44	; 68
    1a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	8f 83       	std	Y+7, r24	; 0x07
    1a82:	98 87       	std	Y+8, r25	; 0x08
    1a84:	a9 87       	std	Y+9, r26	; 0x09
    1a86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a88:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8a:	78 85       	ldd	r23, Y+8	; 0x08
    1a8c:	89 85       	ldd	r24, Y+9	; 0x09
    1a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	2c f4       	brge	.+10     	; 0x1aaa <LCD_init+0x440>
		__ticks = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	3f c0       	rjmp	.+126    	; 0x1b28 <LCD_init+0x4be>
	else if (__tmp > 65535)
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	3f ef       	ldi	r19, 0xFF	; 255
    1ab6:	4f e7       	ldi	r20, 0x7F	; 127
    1ab8:	57 e4       	ldi	r21, 0x47	; 71
    1aba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abe:	18 16       	cp	r1, r24
    1ac0:	4c f5       	brge	.+82     	; 0x1b14 <LCD_init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e2       	ldi	r20, 0x20	; 32
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <LCD_init+0x4a0>
    1aec:	88 ec       	ldi	r24, 0xC8	; 200
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9c 83       	std	Y+4, r25	; 0x04
    1af2:	8b 83       	std	Y+3, r24	; 0x03
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <LCD_init+0x48e>
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	69 f7       	brne	.-38     	; 0x1aec <LCD_init+0x482>
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <LCD_init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	6f 81       	ldd	r22, Y+7	; 0x07
    1b16:	78 85       	ldd	r23, Y+8	; 0x08
    1b18:	89 85       	ldd	r24, Y+9	; 0x09
    1b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	9a 83       	std	Y+2, r25	; 0x02
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <LCD_init+0x4ca>
    1b38:	9a 83       	std	Y+2, r25	; 0x02
    1b3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1b3c:	ca 5b       	subi	r28, 0xBA	; 186
    1b3e:	df 4f       	sbci	r29, 0xFF	; 255
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	08 95       	ret

00001b54 <LCD_wrtiteData>:

/************************************************/
/* 			 this function is used to          */
/*         write data on LCD                  */
/*********************************************/
void LCD_wrtiteData(u8 u8DataCpy){
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	0f 92       	push	r0
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	89 83       	std	Y+1, r24	; 0x01

	/* set RS to high  */
	DIO_setPinValue(LCD_u8_RS_PIN,DIO_Pin_high);
    1b60:	80 e1       	ldi	r24, 0x10	; 16
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>

	/* Execute command */
	LCD_excute(u8DataCpy);
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <LCD_excute>

}
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <LCD_writeCommand>:

/********************************************* ***/
/* 			 this function is used to           */
/*         execute LCD command                 */
/**********************************************/
void LCD_writeCommand(u8 u8CommandCpy){
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	89 83       	std	Y+1, r24	; 0x01

	/* set RS to LOW */
	DIO_setPinValue(LCD_u8_RS_PIN,DIO_Pin_low);
    1b82:	80 e1       	ldi	r24, 0x10	; 16
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	/* Execute command */
	LCD_excute(u8CommandCpy);
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <LCD_excute>
}
    1b90:	0f 90       	pop	r0
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <LCD_writeString>:

void LCD_writeString(u8 *ptr, u8 xpos, u8 ypos)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <LCD_writeString+0x6>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <LCD_writeString+0x8>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	6b 83       	std	Y+3, r22	; 0x03
    1baa:	4c 83       	std	Y+4, r20	; 0x04
	/*cmd to move cursor*/


	while(*ptr !='\0')
    1bac:	e9 81       	ldd	r30, Y+1	; 0x01
    1bae:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb0:	80 81       	ld	r24, Z
    1bb2:	88 23       	and	r24, r24
    1bb4:	d9 f7       	brne	.-10     	; 0x1bac <LCD_writeString+0x14>
	{


	}
}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <LCD_clear>:
void LCD_clear()
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62

	LCD_writeCommand(0x01);
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <LCD_writeCommand>

}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <LCD_excute>:

static void LCD_excute(u8 u8ValueCpy){
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	6d 97       	sbiw	r28, 0x1d	; 29
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	8d 8f       	std	Y+29, r24	; 0x1d

	/*set RW to low */
	DIO_setPinValue(LCD_u8_RW_PIN,DIO_Pin_low);
    1bee:	81 e1       	ldi	r24, 0x11	; 17
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_E_PIN,DIO_Pin_high);
	_delay_ms(1);
	DIO_setPinValue(LCD_u8_E_PIN,DIO_Pin_low);
#else

	DIO_setPinValue(LCD_u8_DATA_PIN_4,GET_BIT(u8ValueCpy,4));
    1bf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bf8:	88 2f       	mov	r24, r24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	80 71       	andi	r24, 0x10	; 16
    1bfe:	90 70       	andi	r25, 0x00	; 0
    1c00:	95 95       	asr	r25
    1c02:	87 95       	ror	r24
    1c04:	95 95       	asr	r25
    1c06:	87 95       	ror	r24
    1c08:	95 95       	asr	r25
    1c0a:	87 95       	ror	r24
    1c0c:	95 95       	asr	r25
    1c0e:	87 95       	ror	r24
    1c10:	98 2f       	mov	r25, r24
    1c12:	8c e1       	ldi	r24, 0x1C	; 28
    1c14:	69 2f       	mov	r22, r25
    1c16:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_5,GET_BIT(u8ValueCpy,5));
    1c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	80 72       	andi	r24, 0x20	; 32
    1c22:	90 70       	andi	r25, 0x00	; 0
    1c24:	95 95       	asr	r25
    1c26:	87 95       	ror	r24
    1c28:	95 95       	asr	r25
    1c2a:	87 95       	ror	r24
    1c2c:	95 95       	asr	r25
    1c2e:	87 95       	ror	r24
    1c30:	95 95       	asr	r25
    1c32:	87 95       	ror	r24
    1c34:	95 95       	asr	r25
    1c36:	87 95       	ror	r24
    1c38:	98 2f       	mov	r25, r24
    1c3a:	8d e1       	ldi	r24, 0x1D	; 29
    1c3c:	69 2f       	mov	r22, r25
    1c3e:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_6,GET_BIT(u8ValueCpy,6));
    1c42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	80 74       	andi	r24, 0x40	; 64
    1c4a:	90 70       	andi	r25, 0x00	; 0
    1c4c:	08 2e       	mov	r0, r24
    1c4e:	89 2f       	mov	r24, r25
    1c50:	00 0c       	add	r0, r0
    1c52:	88 1f       	adc	r24, r24
    1c54:	99 0b       	sbc	r25, r25
    1c56:	00 0c       	add	r0, r0
    1c58:	88 1f       	adc	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	98 2f       	mov	r25, r24
    1c5e:	8e e1       	ldi	r24, 0x1E	; 30
    1c60:	69 2f       	mov	r22, r25
    1c62:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_7,GET_BIT(u8ValueCpy,7));
    1c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c68:	98 2f       	mov	r25, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	99 27       	eor	r25, r25
    1c6e:	99 1f       	adc	r25, r25
    1c70:	8f e1       	ldi	r24, 0x1F	; 31
    1c72:	69 2f       	mov	r22, r25
    1c74:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>

	DIO_setPinValue(LCD_u8_E_PIN,DIO_Pin_high);
    1c78:	82 e1       	ldi	r24, 0x12	; 18
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e8       	ldi	r26, 0x80	; 128
    1c86:	bf e3       	ldi	r27, 0x3F	; 63
    1c88:	89 8f       	std	Y+25, r24	; 0x19
    1c8a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c90:	69 8d       	ldd	r22, Y+25	; 0x19
    1c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	4a ef       	ldi	r20, 0xFA	; 250
    1c9e:	54 e4       	ldi	r21, 0x44	; 68
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	8d 8b       	std	Y+21, r24	; 0x15
    1caa:	9e 8b       	std	Y+22, r25	; 0x16
    1cac:	af 8b       	std	Y+23, r26	; 0x17
    1cae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	5f e3       	ldi	r21, 0x3F	; 63
    1cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc4:	88 23       	and	r24, r24
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <LCD_excute+0xfa>
		__ticks = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9c 8b       	std	Y+20, r25	; 0x14
    1cce:	8b 8b       	std	Y+19, r24	; 0x13
    1cd0:	3f c0       	rjmp	.+126    	; 0x1d50 <LCD_excute+0x178>
	else if (__tmp > 65535)
    1cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	3f ef       	ldi	r19, 0xFF	; 255
    1cde:	4f e7       	ldi	r20, 0x7F	; 127
    1ce0:	57 e4       	ldi	r21, 0x47	; 71
    1ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce6:	18 16       	cp	r1, r24
    1ce8:	4c f5       	brge	.+82     	; 0x1d3c <LCD_excute+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cea:	69 8d       	ldd	r22, Y+25	; 0x19
    1cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e2       	ldi	r20, 0x20	; 32
    1cf8:	51 e4       	ldi	r21, 0x41	; 65
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <LCD_excute+0x15a>
    1d14:	88 ec       	ldi	r24, 0xC8	; 200
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9a 8b       	std	Y+18, r25	; 0x12
    1d1a:	89 8b       	std	Y+17, r24	; 0x11
    1d1c:	89 89       	ldd	r24, Y+17	; 0x11
    1d1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD_excute+0x148>
    1d24:	9a 8b       	std	Y+18, r25	; 0x12
    1d26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	9c 8b       	std	Y+20, r25	; 0x14
    1d30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d32:	8b 89       	ldd	r24, Y+19	; 0x13
    1d34:	9c 89       	ldd	r25, Y+20	; 0x14
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <LCD_excute+0x13c>
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <LCD_excute+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d40:	8f 89       	ldd	r24, Y+23	; 0x17
    1d42:	98 8d       	ldd	r25, Y+24	; 0x18
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9c 8b       	std	Y+20, r25	; 0x14
    1d4e:	8b 8b       	std	Y+19, r24	; 0x13
    1d50:	8b 89       	ldd	r24, Y+19	; 0x13
    1d52:	9c 89       	ldd	r25, Y+20	; 0x14
    1d54:	98 8b       	std	Y+16, r25	; 0x10
    1d56:	8f 87       	std	Y+15, r24	; 0x0f
    1d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5a:	98 89       	ldd	r25, Y+16	; 0x10
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_excute+0x184>
    1d60:	98 8b       	std	Y+16, r25	; 0x10
    1d62:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_u8_E_PIN,DIO_Pin_low);
    1d64:	82 e1       	ldi	r24, 0x12	; 18
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>

	DIO_setPinValue(LCD_u8_DATA_PIN_4,GET_BIT(u8ValueCpy,0));
    1d6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d6e:	98 2f       	mov	r25, r24
    1d70:	91 70       	andi	r25, 0x01	; 1
    1d72:	8c e1       	ldi	r24, 0x1C	; 28
    1d74:	69 2f       	mov	r22, r25
    1d76:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_5,GET_BIT(u8ValueCpy,1));
    1d7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d7c:	88 2f       	mov	r24, r24
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	82 70       	andi	r24, 0x02	; 2
    1d82:	90 70       	andi	r25, 0x00	; 0
    1d84:	95 95       	asr	r25
    1d86:	87 95       	ror	r24
    1d88:	98 2f       	mov	r25, r24
    1d8a:	8d e1       	ldi	r24, 0x1D	; 29
    1d8c:	69 2f       	mov	r22, r25
    1d8e:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_6,GET_BIT(u8ValueCpy,2));
    1d92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d94:	88 2f       	mov	r24, r24
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	84 70       	andi	r24, 0x04	; 4
    1d9a:	90 70       	andi	r25, 0x00	; 0
    1d9c:	95 95       	asr	r25
    1d9e:	87 95       	ror	r24
    1da0:	95 95       	asr	r25
    1da2:	87 95       	ror	r24
    1da4:	98 2f       	mov	r25, r24
    1da6:	8e e1       	ldi	r24, 0x1E	; 30
    1da8:	69 2f       	mov	r22, r25
    1daa:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_7,GET_BIT(u8ValueCpy,3));
    1dae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	88 70       	andi	r24, 0x08	; 8
    1db6:	90 70       	andi	r25, 0x00	; 0
    1db8:	95 95       	asr	r25
    1dba:	87 95       	ror	r24
    1dbc:	95 95       	asr	r25
    1dbe:	87 95       	ror	r24
    1dc0:	95 95       	asr	r25
    1dc2:	87 95       	ror	r24
    1dc4:	98 2f       	mov	r25, r24
    1dc6:	8f e1       	ldi	r24, 0x1F	; 31
    1dc8:	69 2f       	mov	r22, r25
    1dca:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>

	DIO_setPinValue(LCD_u8_E_PIN,DIO_Pin_high);
    1dce:	82 e1       	ldi	r24, 0x12	; 18
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e8       	ldi	r26, 0x80	; 128
    1ddc:	bf e3       	ldi	r27, 0x3F	; 63
    1dde:	8b 87       	std	Y+11, r24	; 0x0b
    1de0:	9c 87       	std	Y+12, r25	; 0x0c
    1de2:	ad 87       	std	Y+13, r26	; 0x0d
    1de4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4a ef       	ldi	r20, 0xFA	; 250
    1df4:	54 e4       	ldi	r21, 0x44	; 68
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	8f 83       	std	Y+7, r24	; 0x07
    1e00:	98 87       	std	Y+8, r25	; 0x08
    1e02:	a9 87       	std	Y+9, r26	; 0x09
    1e04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1a:	88 23       	and	r24, r24
    1e1c:	2c f4       	brge	.+10     	; 0x1e28 <LCD_excute+0x250>
		__ticks = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9e 83       	std	Y+6, r25	; 0x06
    1e24:	8d 83       	std	Y+5, r24	; 0x05
    1e26:	3f c0       	rjmp	.+126    	; 0x1ea6 <LCD_excute+0x2ce>
	else if (__tmp > 65535)
    1e28:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2a:	78 85       	ldd	r23, Y+8	; 0x08
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	3f ef       	ldi	r19, 0xFF	; 255
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	57 e4       	ldi	r21, 0x47	; 71
    1e38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3c:	18 16       	cp	r1, r24
    1e3e:	4c f5       	brge	.+82     	; 0x1e92 <LCD_excute+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e2       	ldi	r20, 0x20	; 32
    1e4e:	51 e4       	ldi	r21, 0x41	; 65
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	0f c0       	rjmp	.+30     	; 0x1e88 <LCD_excute+0x2b0>
    1e6a:	88 ec       	ldi	r24, 0xC8	; 200
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9c 83       	std	Y+4, r25	; 0x04
    1e70:	8b 83       	std	Y+3, r24	; 0x03
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <LCD_excute+0x29e>
    1e7a:	9c 83       	std	Y+4, r25	; 0x04
    1e7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	69 f7       	brne	.-38     	; 0x1e6a <LCD_excute+0x292>
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <LCD_excute+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e92:	6f 81       	ldd	r22, Y+7	; 0x07
    1e94:	78 85       	ldd	r23, Y+8	; 0x08
    1e96:	89 85       	ldd	r24, Y+9	; 0x09
    1e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	9a 83       	std	Y+2, r25	; 0x02
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <LCD_excute+0x2da>
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_setPinValue(LCD_u8_E_PIN,DIO_Pin_low);
    1eba:	82 e1       	ldi	r24, 0x12	; 18
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>

#endif
}
    1ec2:	6d 96       	adiw	r28, 0x1d	; 29
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <Keypad_init>:
#include "Keypad_config.h"
#include "Keypad.h"
static u8 Keypad_PressedButton = 0; 

void Keypad_init(void)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(KEYPAD_PIN_COL0,DIO_Pin_high);
    1edc:	84 e0       	ldi	r24, 0x04	; 4
    1ede:	61 e0       	ldi	r22, 0x01	; 1
    1ee0:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_COL1,DIO_Pin_high);
    1ee4:	85 e0       	ldi	r24, 0x05	; 5
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_COL2,DIO_Pin_high);
    1eec:	86 e0       	ldi	r24, 0x06	; 6
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_COL3,DIO_Pin_high);
    1ef4:	87 e0       	ldi	r24, 0x07	; 7
    1ef6:	61 e0       	ldi	r22, 0x01	; 1
    1ef8:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	
}
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <Keypad_checKCol>:

static void Keypad_checKCol(u8 ActiveRowNo)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	0f 92       	push	r0
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_getPinValue(KEYPAD_PIN_COL0) == DIO_Pin_low)
    1f0e:	84 e0       	ldi	r24, 0x04	; 4
    1f10:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_getPinValue>
    1f14:	88 23       	and	r24, r24
    1f16:	51 f4       	brne	.+20     	; 0x1f2c <Keypad_checKCol+0x2a>
	{
		Keypad_PressedButton = ActiveRowNo*4;
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	80 93 56 04 	sts	0x0456, r24
    1f2a:	2f c0       	rjmp	.+94     	; 0x1f8a <Keypad_checKCol+0x88>
	}
	else if(DIO_getPinValue(KEYPAD_PIN_COL1) == DIO_Pin_low)
    1f2c:	85 e0       	ldi	r24, 0x05	; 5
    1f2e:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_getPinValue>
    1f32:	88 23       	and	r24, r24
    1f34:	59 f4       	brne	.+22     	; 0x1f4c <Keypad_checKCol+0x4a>
	{
		Keypad_PressedButton = (ActiveRowNo*4)+1;
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	8f 5f       	subi	r24, 0xFF	; 255
    1f46:	80 93 56 04 	sts	0x0456, r24
    1f4a:	1f c0       	rjmp	.+62     	; 0x1f8a <Keypad_checKCol+0x88>
	}
	else if(DIO_getPinValue(KEYPAD_PIN_COL2) == DIO_Pin_low)
    1f4c:	86 e0       	ldi	r24, 0x06	; 6
    1f4e:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_getPinValue>
    1f52:	88 23       	and	r24, r24
    1f54:	59 f4       	brne	.+22     	; 0x1f6c <Keypad_checKCol+0x6a>
	{
		Keypad_PressedButton = (ActiveRowNo*4)+2;
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	80 93 56 04 	sts	0x0456, r24
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <Keypad_checKCol+0x88>
	}
	else if(DIO_getPinValue(KEYPAD_PIN_COL3) == DIO_Pin_low)
    1f6c:	87 e0       	ldi	r24, 0x07	; 7
    1f6e:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_getPinValue>
    1f72:	88 23       	and	r24, r24
    1f74:	51 f4       	brne	.+20     	; 0x1f8a <Keypad_checKCol+0x88>
	{
		Keypad_PressedButton = (ActiveRowNo*4)+3;
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	8d 5f       	subi	r24, 0xFD	; 253
    1f86:	80 93 56 04 	sts	0x0456, r24
	}
}
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <Keypad_getPressedButton>:

u8 Keypad_getPressedButton(void)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
	Keypad_PressedButton = -1;
    1f9a:	8f ef       	ldi	r24, 0xFF	; 255
    1f9c:	80 93 56 04 	sts	0x0456, r24
	/*row0 activated*/
	DIO_setPinValue(KEYPAD_PIN_R0,DIO_Pin_low); /*activate*/
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R1,DIO_Pin_high);
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	61 e0       	ldi	r22, 0x01	; 1
    1fac:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R2,DIO_Pin_high);
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	61 e0       	ldi	r22, 0x01	; 1
    1fb4:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R3,DIO_Pin_high);
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	61 e0       	ldi	r22, 0x01	; 1
    1fbc:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	Keypad_checKCol(0);
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <Keypad_checKCol>
	
	/*row1 activated*/
	DIO_setPinValue(KEYPAD_PIN_R0,DIO_Pin_high); 
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	61 e0       	ldi	r22, 0x01	; 1
    1fca:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R1,DIO_Pin_low);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R2,DIO_Pin_high);
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	61 e0       	ldi	r22, 0x01	; 1
    1fda:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R3,DIO_Pin_high);
    1fde:	83 e0       	ldi	r24, 0x03	; 3
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	Keypad_checKCol(1);
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <Keypad_checKCol>
	
	/*row2 activated*/
	DIO_setPinValue(KEYPAD_PIN_R0,DIO_Pin_high); 
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	61 e0       	ldi	r22, 0x01	; 1
    1ff0:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R1,DIO_Pin_high);
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R2,DIO_Pin_low);
    1ffc:	82 e0       	ldi	r24, 0x02	; 2
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R3,DIO_Pin_high);
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	61 e0       	ldi	r22, 0x01	; 1
    2008:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	Keypad_checKCol(2);
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <Keypad_checKCol>
	
	/*row3 activated*/
	DIO_setPinValue(KEYPAD_PIN_R0,DIO_Pin_high); 
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R1,DIO_Pin_high);
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	61 e0       	ldi	r22, 0x01	; 1
    201e:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R2,DIO_Pin_high);
    2022:	82 e0       	ldi	r24, 0x02	; 2
    2024:	61 e0       	ldi	r22, 0x01	; 1
    2026:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R3,DIO_Pin_low);
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	Keypad_checKCol(3);
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <Keypad_checKCol>
	
	return Keypad_PressedButton;
    2038:	80 91 56 04 	lds	r24, 0x0456
}
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <BCDSevSegments_enable>:
#include "BCDSevSegments_Priv.h"
#include "BCDSevSegments_config.h"
#include "BCDSevSegments.h"

void BCDSevSegments_enable(void)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(BCDSEVSEGMENTS_Enable_PIN,DIO_Pin_high);
    204a:	88 e0       	ldi	r24, 0x08	; 8
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	
}
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <BCDSevSegments_disable>:
void BCDSevSegments_disable(void)
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(BCDSEVSEGMENTS_Enable_PIN,DIO_Pin_low);
    2060:	88 e0       	ldi	r24, 0x08	; 8
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
}
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <BCDSevSegments_displayNo>:
void BCDSevSegments_displayNo(u8 Val)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	0f 92       	push	r0
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	89 83       	std	Y+1, r24	; 0x01
	if(Val <= 15)
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	80 31       	cpi	r24, 0x10	; 16
    207e:	88 f5       	brcc	.+98     	; 0x20e2 <BCDSevSegments_displayNo+0x74>
	{
	DIO_setPinValue(BCDSEVSEGMENTS_PIN_0,GET_BIT(Val,0));
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	98 2f       	mov	r25, r24
    2084:	91 70       	andi	r25, 0x01	; 1
    2086:	8c e0       	ldi	r24, 0x0C	; 12
    2088:	69 2f       	mov	r22, r25
    208a:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(BCDSEVSEGMENTS_PIN_1,GET_BIT(Val,1));
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	82 70       	andi	r24, 0x02	; 2
    2096:	90 70       	andi	r25, 0x00	; 0
    2098:	95 95       	asr	r25
    209a:	87 95       	ror	r24
    209c:	98 2f       	mov	r25, r24
    209e:	8d e0       	ldi	r24, 0x0D	; 13
    20a0:	69 2f       	mov	r22, r25
    20a2:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(BCDSEVSEGMENTS_PIN_2,GET_BIT(Val,2));
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	84 70       	andi	r24, 0x04	; 4
    20ae:	90 70       	andi	r25, 0x00	; 0
    20b0:	95 95       	asr	r25
    20b2:	87 95       	ror	r24
    20b4:	95 95       	asr	r25
    20b6:	87 95       	ror	r24
    20b8:	98 2f       	mov	r25, r24
    20ba:	8e e0       	ldi	r24, 0x0E	; 14
    20bc:	69 2f       	mov	r22, r25
    20be:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	DIO_setPinValue(BCDSEVSEGMENTS_PIN_3,GET_BIT(Val,3));
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	88 70       	andi	r24, 0x08	; 8
    20ca:	90 70       	andi	r25, 0x00	; 0
    20cc:	95 95       	asr	r25
    20ce:	87 95       	ror	r24
    20d0:	95 95       	asr	r25
    20d2:	87 95       	ror	r24
    20d4:	95 95       	asr	r25
    20d6:	87 95       	ror	r24
    20d8:	98 2f       	mov	r25, r24
    20da:	8f e0       	ldi	r24, 0x0F	; 15
    20dc:	69 2f       	mov	r22, r25
    20de:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
	}
}
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <_Lab_01_DIO>:
#include "../MCAL/DIO/DIO.h"

#define PIN_SW_1		DIO_PIN_D0
#define PIN_LED_1		DIO_PIN_C0
void _Lab_01_DIO(void)
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <_Lab_01_DIO+0x6>
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
	DIO_init();
    20f4:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_init>
	DIO_PinValue_t CurrentPinVal = DIO_Pin_low,PrevPinVal = DIO_Pin_low;
    20f8:	1a 82       	std	Y+2, r1	; 0x02
    20fa:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		CurrentPinVal = DIO_getPinValue(PIN_SW_1);
    20fc:	88 e1       	ldi	r24, 0x18	; 24
    20fe:	0e 94 46 08 	call	0x108c	; 0x108c <DIO_getPinValue>
    2102:	8a 83       	std	Y+2, r24	; 0x02
		if(CurrentPinVal == DIO_Pin_high)
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	31 f4       	brne	.+12     	; 0x2116 <_Lab_01_DIO+0x2c>
		{
			if(PrevPinVal == DIO_Pin_low)
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	88 23       	and	r24, r24
    210e:	19 f4       	brne	.+6      	; 0x2116 <_Lab_01_DIO+0x2c>
			{
				DIO_togglePin(PIN_LED_1);	
    2110:	80 e1       	ldi	r24, 0x10	; 16
    2112:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_togglePin>
			}
		}
		PrevPinVal = CurrentPinVal;
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	f0 cf       	rjmp	.-32     	; 0x20fc <_Lab_01_DIO+0x12>

0000211c <_Lab_02_SevSegments>:
#include "../Lib/STD_TYPES.h"
#include "../MCAL/DIO/DIO.h"
#include "../HAL/SevSegments/SevSegments.h"
#include "../HAL/BCDSevSegments/BCDSevSegments.h"
void _Lab_02_SevSegments(void)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	2f 97       	sbiw	r28, 0x0f	; 15
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
	u8 i;
	DIO_init();
    2130:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_init>
	SevSegments_enable();
    2134:	0e 94 a4 0a 	call	0x1548	; 0x1548 <SevSegments_enable>
	BCDSevSegments_enable();
    2138:	0e 94 21 10 	call	0x2042	; 0x2042 <BCDSevSegments_enable>
	BCDSevSegments_displayNo(5);
    213c:	85 e0       	ldi	r24, 0x05	; 5
    213e:	0e 94 37 10 	call	0x206e	; 0x206e <BCDSevSegments_displayNo>
	while(1)
	{
		
		for(i=0;i<10;i++)
    2142:	1f 86       	std	Y+15, r1	; 0x0f
    2144:	78 c0       	rjmp	.+240    	; 0x2236 <_Lab_02_SevSegments+0x11a>
		{
			SevSegments_displayNo(i);
    2146:	8f 85       	ldd	r24, Y+15	; 0x0f
    2148:	0e 94 ba 0a 	call	0x1574	; 0x1574 <SevSegments_displayNo>
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	aa ef       	ldi	r26, 0xFA	; 250
    2152:	b3 e4       	ldi	r27, 0x43	; 67
    2154:	8b 87       	std	Y+11, r24	; 0x0b
    2156:	9c 87       	std	Y+12, r25	; 0x0c
    2158:	ad 87       	std	Y+13, r26	; 0x0d
    215a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	6b 85       	ldd	r22, Y+11	; 0x0b
    215e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2160:	8d 85       	ldd	r24, Y+13	; 0x0d
    2162:	9e 85       	ldd	r25, Y+14	; 0x0e
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	4a ef       	ldi	r20, 0xFA	; 250
    216a:	54 e4       	ldi	r21, 0x44	; 68
    216c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	8f 83       	std	Y+7, r24	; 0x07
    2176:	98 87       	std	Y+8, r25	; 0x08
    2178:	a9 87       	std	Y+9, r26	; 0x09
    217a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e8       	ldi	r20, 0x80	; 128
    218a:	5f e3       	ldi	r21, 0x3F	; 63
    218c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2190:	88 23       	and	r24, r24
    2192:	2c f4       	brge	.+10     	; 0x219e <_Lab_02_SevSegments+0x82>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	3f c0       	rjmp	.+126    	; 0x221c <_Lab_02_SevSegments+0x100>
	else if (__tmp > 65535)
    219e:	6f 81       	ldd	r22, Y+7	; 0x07
    21a0:	78 85       	ldd	r23, Y+8	; 0x08
    21a2:	89 85       	ldd	r24, Y+9	; 0x09
    21a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	4c f5       	brge	.+82     	; 0x2208 <_Lab_02_SevSegments+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    21bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <_Lab_02_SevSegments+0xe2>
    21e0:	88 ec       	ldi	r24, 0xC8	; 200
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <_Lab_02_SevSegments+0xd0>
    21f0:	9c 83       	std	Y+4, r25	; 0x04
    21f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	8d 81       	ldd	r24, Y+5	; 0x05
    21f6:	9e 81       	ldd	r25, Y+6	; 0x06
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	9e 81       	ldd	r25, Y+6	; 0x06
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	69 f7       	brne	.-38     	; 0x21e0 <_Lab_02_SevSegments+0xc4>
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <_Lab_02_SevSegments+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2208:	6f 81       	ldd	r22, Y+7	; 0x07
    220a:	78 85       	ldd	r23, Y+8	; 0x08
    220c:	89 85       	ldd	r24, Y+9	; 0x09
    220e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <_Lab_02_SevSegments+0x10c>
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
	BCDSevSegments_enable();
	BCDSevSegments_displayNo(5);
	while(1)
	{
		
		for(i=0;i<10;i++)
    2230:	8f 85       	ldd	r24, Y+15	; 0x0f
    2232:	8f 5f       	subi	r24, 0xFF	; 255
    2234:	8f 87       	std	Y+15, r24	; 0x0f
    2236:	8f 85       	ldd	r24, Y+15	; 0x0f
    2238:	8a 30       	cpi	r24, 0x0A	; 10
    223a:	08 f4       	brcc	.+2      	; 0x223e <_Lab_02_SevSegments+0x122>
    223c:	84 cf       	rjmp	.-248    	; 0x2146 <_Lab_02_SevSegments+0x2a>
    223e:	81 cf       	rjmp	.-254    	; 0x2142 <_Lab_02_SevSegments+0x26>

00002240 <_Lab_04_Keypad>:
#include "../MCAL/DIO/DIO.h"
#include "../HAL/BCDSevSegments/BCDSevSegments.h"
#include "../HAL/Keypad/Keypad.h"

void _Lab_04_Keypad(void)
{
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	0f 92       	push	r0
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
	u8 PressedSw =-1;
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	89 83       	std	Y+1, r24	; 0x01
	DIO_init();
    224e:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_init>
	Keypad_init();
    2252:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <Keypad_init>
		
	while(1)
	{
		PressedSw = Keypad_getPressedButton();
    2256:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <Keypad_getPressedButton>
    225a:	89 83       	std	Y+1, r24	; 0x01
		if(PressedSw != -1)
		{
			BCDSevSegments_enable();
    225c:	0e 94 21 10 	call	0x2042	; 0x2042 <BCDSevSegments_enable>
			BCDSevSegments_displayNo(PressedSw);
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	0e 94 37 10 	call	0x206e	; 0x206e <BCDSevSegments_displayNo>
    2266:	f7 cf       	rjmp	.-18     	; 0x2256 <_Lab_04_Keypad+0x16>

00002268 <_Lab_05_LCD>:
#include "../Lib/STD_TYPES.h"
#include "../HAL/LCD/LCD.h"
#include "../MCAL/DIO/DIO.h"

void _Lab_05_LCD(void)
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62

	DIO_init();
    2270:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_init>
	LCD_init();
    2274:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_init>
	LCD_wrtiteData('a');
    2278:	81 e6       	ldi	r24, 0x61	; 97
    227a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_wrtiteData>
	LCD_wrtiteData('h');
    227e:	88 e6       	ldi	r24, 0x68	; 104
    2280:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_wrtiteData>
	LCD_wrtiteData('m');
    2284:	8d e6       	ldi	r24, 0x6D	; 109
    2286:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_wrtiteData>
	LCD_wrtiteData('e');
    228a:	85 e6       	ldi	r24, 0x65	; 101
    228c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_wrtiteData>
	LCD_wrtiteData('d');
    2290:	84 e6       	ldi	r24, 0x64	; 100
    2292:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_wrtiteData>
    2296:	ff cf       	rjmp	.-2      	; 0x2296 <_Lab_05_LCD+0x2e>

00002298 <_Lab_07_ADC>:
#include "../MCAL/DIO/DIO.h"
#include "../MCAL/GIE/GIE.h"
#include "../MCAL/ADC/ADC.h"

void _Lab_07_ADC(void)
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	00 d0       	rcall	.+0      	; 0x229e <_Lab_07_ADC+0x6>
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <_Lab_07_ADC+0x8>
    22a0:	0f 92       	push	r0
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
	u8 str[5]={0};
    22a6:	85 e0       	ldi	r24, 0x05	; 5
    22a8:	fe 01       	movw	r30, r28
    22aa:	31 96       	adiw	r30, 0x01	; 1
    22ac:	df 01       	movw	r26, r30
    22ae:	98 2f       	mov	r25, r24
    22b0:	1d 92       	st	X+, r1
    22b2:	9a 95       	dec	r25
    22b4:	e9 f7       	brne	.-6      	; 0x22b0 <_Lab_07_ADC+0x18>
	DIO_init();
    22b6:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_init>
	ADC_init();
    22ba:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <ADC_init>
	LCD_init();
    22be:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_init>

	GIE_enInterrupt();
    22c2:	0e 94 d6 06 	call	0xdac	; 0xdac <GIE_enInterrupt>
	ADC_enInterrupt();
    22c6:	0e 94 20 0a 	call	0x1440	; 0x1440 <ADC_enInterrupt>

	ADC_startConversion(ADC_Ch0);
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	0e 94 3c 0a 	call	0x1478	; 0x1478 <ADC_startConversion>

	while(1)
	{
		itoa(ADC_LastConvertedVal,str,10);
    22d0:	80 91 54 04 	lds	r24, 0x0454
    22d4:	90 91 55 04 	lds	r25, 0x0455
    22d8:	9e 01       	movw	r18, r28
    22da:	2f 5f       	subi	r18, 0xFF	; 255
    22dc:	3f 4f       	sbci	r19, 0xFF	; 255
    22de:	b9 01       	movw	r22, r18
    22e0:	4a e0       	ldi	r20, 0x0A	; 10
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	0e 94 b5 13 	call	0x276a	; 0x276a <itoa>
		LCD_writeString(str,0,0);
    22e8:	ce 01       	movw	r24, r28
    22ea:	01 96       	adiw	r24, 0x01	; 1
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_writeString>
    22f4:	ed cf       	rjmp	.-38     	; 0x22d0 <_Lab_07_ADC+0x38>

000022f6 <func>:
#include "../MCAL/DIO/DIO.h"
#include "../MCAL/GIE/GIE.h"
#include "../MCAL/EXTI/EXTI.h"

void func()
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
	DIO_togglePin(DIO_PIN_D0);
    22fe:	88 e1       	ldi	r24, 0x18	; 24
    2300:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_togglePin>
}
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <_Lab_08_EXTI>:


void _Lab_08_EXTI(void)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62


	DIO_init();
    2312:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_init>
	EXTI_init();
    2316:	0e 94 f2 06 	call	0xde4	; 0xde4 <EXTI_init>
	EXTI_setCallBack(func);
    231a:	8b e7       	ldi	r24, 0x7B	; 123
    231c:	91 e1       	ldi	r25, 0x11	; 17
    231e:	0e 94 07 07 	call	0xe0e	; 0xe0e <EXTI_setCallBack>
	EXTI_enInterrupt();
    2322:	0e 94 19 07 	call	0xe32	; 0xe32 <EXTI_enInterrupt>
	GIE_enInterrupt();
    2326:	0e 94 d6 06 	call	0xdac	; 0xdac <GIE_enInterrupt>
    232a:	ff cf       	rjmp	.-2      	; 0x232a <_Lab_08_EXTI+0x20>

0000232c <_Lab_09_UART>:
#include "../MCAL/DIO/DIO.h"
#include "../HAL/LCD/LCD.h"
#include "../MCAL/GIE/GIE.h"

void _Lab_09_UART(void)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	a2 97       	sbiw	r28, 0x22	; 34
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
	u16 i;
	u8 MsgPtr[16];
	u16 MsgLen=0;
    2340:	1a a2       	std	Y+34, r1	; 0x22
    2342:	19 a2       	std	Y+33, r1	; 0x21

	DIO_init();
    2344:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_init>
	LCD_init();
    2348:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_init>
	UART_init();
    234c:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	GIE_enInterrupt();
    2350:	0e 94 d6 06 	call	0xdac	; 0xdac <GIE_enInterrupt>
	UART_enRxInterrupt();
    2354:	0e 94 43 06 	call	0xc86	; 0xc86 <UART_enRxInterrupt>

	while(1)
	{

		UART_getMessage(MsgPtr,&MsgLen);
    2358:	ce 01       	movw	r24, r28
    235a:	41 96       	adiw	r24, 0x11	; 17
    235c:	9e 01       	movw	r18, r28
    235e:	2f 5d       	subi	r18, 0xDF	; 223
    2360:	3f 4f       	sbci	r19, 0xFF	; 255
    2362:	b9 01       	movw	r22, r18
    2364:	0e 94 05 06 	call	0xc0a	; 0xc0a <UART_getMessage>
		for(i=0;i<MsgLen;i++)
    2368:	18 8a       	std	Y+16, r1	; 0x10
    236a:	1f 86       	std	Y+15, r1	; 0x0f
    236c:	0f c0       	rjmp	.+30     	; 0x238c <_Lab_09_UART+0x60>
		{
			LCD_wrtiteData(MsgPtr[i]);
    236e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2370:	38 89       	ldd	r19, Y+16	; 0x10
    2372:	ce 01       	movw	r24, r28
    2374:	41 96       	adiw	r24, 0x11	; 17
    2376:	fc 01       	movw	r30, r24
    2378:	e2 0f       	add	r30, r18
    237a:	f3 1f       	adc	r31, r19
    237c:	80 81       	ld	r24, Z
    237e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_wrtiteData>

	while(1)
	{

		UART_getMessage(MsgPtr,&MsgLen);
		for(i=0;i<MsgLen;i++)
    2382:	8f 85       	ldd	r24, Y+15	; 0x0f
    2384:	98 89       	ldd	r25, Y+16	; 0x10
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	98 8b       	std	Y+16, r25	; 0x10
    238a:	8f 87       	std	Y+15, r24	; 0x0f
    238c:	29 a1       	ldd	r18, Y+33	; 0x21
    238e:	3a a1       	ldd	r19, Y+34	; 0x22
    2390:	8f 85       	ldd	r24, Y+15	; 0x0f
    2392:	98 89       	ldd	r25, Y+16	; 0x10
    2394:	82 17       	cp	r24, r18
    2396:	93 07       	cpc	r25, r19
    2398:	50 f3       	brcs	.-44     	; 0x236e <_Lab_09_UART+0x42>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e4       	ldi	r25, 0x40	; 64
    239e:	ac e1       	ldi	r26, 0x1C	; 28
    23a0:	b6 e4       	ldi	r27, 0x46	; 70
    23a2:	8b 87       	std	Y+11, r24	; 0x0b
    23a4:	9c 87       	std	Y+12, r25	; 0x0c
    23a6:	ad 87       	std	Y+13, r26	; 0x0d
    23a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4a ef       	ldi	r20, 0xFA	; 250
    23b8:	54 e4       	ldi	r21, 0x44	; 68
    23ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	8f 83       	std	Y+7, r24	; 0x07
    23c4:	98 87       	std	Y+8, r25	; 0x08
    23c6:	a9 87       	std	Y+9, r26	; 0x09
    23c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ca:	6f 81       	ldd	r22, Y+7	; 0x07
    23cc:	78 85       	ldd	r23, Y+8	; 0x08
    23ce:	89 85       	ldd	r24, Y+9	; 0x09
    23d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e8       	ldi	r20, 0x80	; 128
    23d8:	5f e3       	ldi	r21, 0x3F	; 63
    23da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23de:	88 23       	and	r24, r24
    23e0:	2c f4       	brge	.+10     	; 0x23ec <_Lab_09_UART+0xc0>
		__ticks = 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
    23ea:	3f c0       	rjmp	.+126    	; 0x246a <_Lab_09_UART+0x13e>
	else if (__tmp > 65535)
    23ec:	6f 81       	ldd	r22, Y+7	; 0x07
    23ee:	78 85       	ldd	r23, Y+8	; 0x08
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	3f ef       	ldi	r19, 0xFF	; 255
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	57 e4       	ldi	r21, 0x47	; 71
    23fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	4c f5       	brge	.+82     	; 0x2456 <_Lab_09_UART+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2404:	6b 85       	ldd	r22, Y+11	; 0x0b
    2406:	7c 85       	ldd	r23, Y+12	; 0x0c
    2408:	8d 85       	ldd	r24, Y+13	; 0x0d
    240a:	9e 85       	ldd	r25, Y+14	; 0x0e
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	0f c0       	rjmp	.+30     	; 0x244c <_Lab_09_UART+0x120>
    242e:	88 ec       	ldi	r24, 0xC8	; 200
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9c 83       	std	Y+4, r25	; 0x04
    2434:	8b 83       	std	Y+3, r24	; 0x03
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <_Lab_09_UART+0x10e>
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2442:	8d 81       	ldd	r24, Y+5	; 0x05
    2444:	9e 81       	ldd	r25, Y+6	; 0x06
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	9e 83       	std	Y+6, r25	; 0x06
    244a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	69 f7       	brne	.-38     	; 0x242e <_Lab_09_UART+0x102>
    2454:	81 cf       	rjmp	.-254    	; 0x2358 <_Lab_09_UART+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	6f 81       	ldd	r22, Y+7	; 0x07
    2458:	78 85       	ldd	r23, Y+8	; 0x08
    245a:	89 85       	ldd	r24, Y+9	; 0x09
    245c:	9a 85       	ldd	r25, Y+10	; 0x0a
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9e 83       	std	Y+6, r25	; 0x06
    2468:	8d 83       	std	Y+5, r24	; 0x05
    246a:	8d 81       	ldd	r24, Y+5	; 0x05
    246c:	9e 81       	ldd	r25, Y+6	; 0x06
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <_Lab_09_UART+0x14a>
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	6c cf       	rjmp	.-296    	; 0x2358 <_Lab_09_UART+0x2c>

00002480 <_lab_03_SevSegmentsMux>:

#define ENABLE_SEVSEGMENTS_2()			DIO_setPinValue(DIO_PIN_A6,DIO_Pin_low)
#define DISABLE_SEVSEGMENTS_2()			DIO_setPinValue(DIO_PIN_A6,DIO_Pin_high)

void _lab_03_SevSegmentsMux(void)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	6f 97       	sbiw	r28, 0x1f	; 31
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
	u8 i;
	u16 loop;
	DIO_init();
    2494:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_init>
	
	while(1)
	{
		for(i=0;i<100;i++)
    2498:	1f 8e       	std	Y+31, r1	; 0x1f
    249a:	14 c1       	rjmp	.+552    	; 0x26c4 <_lab_03_SevSegmentsMux+0x244>
		{	

			for(loop=0;loop<10;loop++)
    249c:	1e 8e       	std	Y+30, r1	; 0x1e
    249e:	1d 8e       	std	Y+29, r1	; 0x1d
    24a0:	08 c1       	rjmp	.+528    	; 0x26b2 <_lab_03_SevSegmentsMux+0x232>
			{
				DISABLE_SEVSEGMENTS_2();
    24a2:	86 e0       	ldi	r24, 0x06	; 6
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
				ENABLE_SEVSEGMENTS_1();
    24aa:	87 e0       	ldi	r24, 0x07	; 7
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
				SevSegments_displayNo(i%10);
    24b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24b4:	9a e0       	ldi	r25, 0x0A	; 10
    24b6:	69 2f       	mov	r22, r25
    24b8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__udivmodqi4>
    24bc:	89 2f       	mov	r24, r25
    24be:	0e 94 ba 0a 	call	0x1574	; 0x1574 <SevSegments_displayNo>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	a0 e2       	ldi	r26, 0x20	; 32
    24c8:	b1 e4       	ldi	r27, 0x41	; 65
    24ca:	89 8f       	std	Y+25, r24	; 0x19
    24cc:	9a 8f       	std	Y+26, r25	; 0x1a
    24ce:	ab 8f       	std	Y+27, r26	; 0x1b
    24d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d2:	69 8d       	ldd	r22, Y+25	; 0x19
    24d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	4a ef       	ldi	r20, 0xFA	; 250
    24e0:	54 e4       	ldi	r21, 0x44	; 68
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	8d 8b       	std	Y+21, r24	; 0x15
    24ec:	9e 8b       	std	Y+22, r25	; 0x16
    24ee:	af 8b       	std	Y+23, r26	; 0x17
    24f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24f2:	6d 89       	ldd	r22, Y+21	; 0x15
    24f4:	7e 89       	ldd	r23, Y+22	; 0x16
    24f6:	8f 89       	ldd	r24, Y+23	; 0x17
    24f8:	98 8d       	ldd	r25, Y+24	; 0x18
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e8       	ldi	r20, 0x80	; 128
    2500:	5f e3       	ldi	r21, 0x3F	; 63
    2502:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2506:	88 23       	and	r24, r24
    2508:	2c f4       	brge	.+10     	; 0x2514 <_lab_03_SevSegmentsMux+0x94>
		__ticks = 1;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9c 8b       	std	Y+20, r25	; 0x14
    2510:	8b 8b       	std	Y+19, r24	; 0x13
    2512:	3f c0       	rjmp	.+126    	; 0x2592 <_lab_03_SevSegmentsMux+0x112>
	else if (__tmp > 65535)
    2514:	6d 89       	ldd	r22, Y+21	; 0x15
    2516:	7e 89       	ldd	r23, Y+22	; 0x16
    2518:	8f 89       	ldd	r24, Y+23	; 0x17
    251a:	98 8d       	ldd	r25, Y+24	; 0x18
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2528:	18 16       	cp	r1, r24
    252a:	4c f5       	brge	.+82     	; 0x257e <_lab_03_SevSegmentsMux+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252c:	69 8d       	ldd	r22, Y+25	; 0x19
    252e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2530:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2532:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e2       	ldi	r20, 0x20	; 32
    253a:	51 e4       	ldi	r21, 0x41	; 65
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	bc 01       	movw	r22, r24
    2546:	cd 01       	movw	r24, r26
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9c 8b       	std	Y+20, r25	; 0x14
    2552:	8b 8b       	std	Y+19, r24	; 0x13
    2554:	0f c0       	rjmp	.+30     	; 0x2574 <_lab_03_SevSegmentsMux+0xf4>
    2556:	88 ec       	ldi	r24, 0xC8	; 200
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9a 8b       	std	Y+18, r25	; 0x12
    255c:	89 8b       	std	Y+17, r24	; 0x11
    255e:	89 89       	ldd	r24, Y+17	; 0x11
    2560:	9a 89       	ldd	r25, Y+18	; 0x12
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <_lab_03_SevSegmentsMux+0xe2>
    2566:	9a 8b       	std	Y+18, r25	; 0x12
    2568:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256a:	8b 89       	ldd	r24, Y+19	; 0x13
    256c:	9c 89       	ldd	r25, Y+20	; 0x14
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2574:	8b 89       	ldd	r24, Y+19	; 0x13
    2576:	9c 89       	ldd	r25, Y+20	; 0x14
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	69 f7       	brne	.-38     	; 0x2556 <_lab_03_SevSegmentsMux+0xd6>
    257c:	14 c0       	rjmp	.+40     	; 0x25a6 <_lab_03_SevSegmentsMux+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257e:	6d 89       	ldd	r22, Y+21	; 0x15
    2580:	7e 89       	ldd	r23, Y+22	; 0x16
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9c 8b       	std	Y+20, r25	; 0x14
    2590:	8b 8b       	std	Y+19, r24	; 0x13
    2592:	8b 89       	ldd	r24, Y+19	; 0x13
    2594:	9c 89       	ldd	r25, Y+20	; 0x14
    2596:	98 8b       	std	Y+16, r25	; 0x10
    2598:	8f 87       	std	Y+15, r24	; 0x0f
    259a:	8f 85       	ldd	r24, Y+15	; 0x0f
    259c:	98 89       	ldd	r25, Y+16	; 0x10
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <_lab_03_SevSegmentsMux+0x11e>
    25a2:	98 8b       	std	Y+16, r25	; 0x10
    25a4:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
			
				DISABLE_SEVSEGMENTS_1();
    25a6:	87 e0       	ldi	r24, 0x07	; 7
    25a8:	61 e0       	ldi	r22, 0x01	; 1
    25aa:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
				ENABLE_SEVSEGMENTS_2();
    25ae:	86 e0       	ldi	r24, 0x06	; 6
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_setPinValue>
				SevSegments_displayNo(i/10);
    25b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b8:	9a e0       	ldi	r25, 0x0A	; 10
    25ba:	69 2f       	mov	r22, r25
    25bc:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__udivmodqi4>
    25c0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <SevSegments_displayNo>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a0 e2       	ldi	r26, 0x20	; 32
    25ca:	b1 e4       	ldi	r27, 0x41	; 65
    25cc:	8b 87       	std	Y+11, r24	; 0x0b
    25ce:	9c 87       	std	Y+12, r25	; 0x0c
    25d0:	ad 87       	std	Y+13, r26	; 0x0d
    25d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25da:	9e 85       	ldd	r25, Y+14	; 0x0e
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	4a ef       	ldi	r20, 0xFA	; 250
    25e2:	54 e4       	ldi	r21, 0x44	; 68
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8f 83       	std	Y+7, r24	; 0x07
    25ee:	98 87       	std	Y+8, r25	; 0x08
    25f0:	a9 87       	std	Y+9, r26	; 0x09
    25f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f4:	6f 81       	ldd	r22, Y+7	; 0x07
    25f6:	78 85       	ldd	r23, Y+8	; 0x08
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	2c f4       	brge	.+10     	; 0x2616 <_lab_03_SevSegmentsMux+0x196>
		__ticks = 1;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	3f c0       	rjmp	.+126    	; 0x2694 <_lab_03_SevSegmentsMux+0x214>
	else if (__tmp > 65535)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	57 e4       	ldi	r21, 0x47	; 71
    2626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	4c f5       	brge	.+82     	; 0x2680 <_lab_03_SevSegmentsMux+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2630:	7c 85       	ldd	r23, Y+12	; 0x0c
    2632:	8d 85       	ldd	r24, Y+13	; 0x0d
    2634:	9e 85       	ldd	r25, Y+14	; 0x0e
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <_lab_03_SevSegmentsMux+0x1f6>
    2658:	88 ec       	ldi	r24, 0xC8	; 200
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9c 83       	std	Y+4, r25	; 0x04
    265e:	8b 83       	std	Y+3, r24	; 0x03
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <_lab_03_SevSegmentsMux+0x1e4>
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <_lab_03_SevSegmentsMux+0x1d8>
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <_lab_03_SevSegmentsMux+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	9a 83       	std	Y+2, r25	; 0x02
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <_lab_03_SevSegmentsMux+0x220>
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		for(i=0;i<100;i++)
		{	

			for(loop=0;loop<10;loop++)
    26a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	9e 8f       	std	Y+30, r25	; 0x1e
    26b0:	8d 8f       	std	Y+29, r24	; 0x1d
    26b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26b6:	8a 30       	cpi	r24, 0x0A	; 10
    26b8:	91 05       	cpc	r25, r1
    26ba:	08 f4       	brcc	.+2      	; 0x26be <_lab_03_SevSegmentsMux+0x23e>
    26bc:	f2 ce       	rjmp	.-540    	; 0x24a2 <_lab_03_SevSegmentsMux+0x22>
	u16 loop;
	DIO_init();
	
	while(1)
	{
		for(i=0;i<100;i++)
    26be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26c0:	8f 5f       	subi	r24, 0xFF	; 255
    26c2:	8f 8f       	std	Y+31, r24	; 0x1f
    26c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26c6:	84 36       	cpi	r24, 0x64	; 100
    26c8:	08 f4       	brcc	.+2      	; 0x26cc <_lab_03_SevSegmentsMux+0x24c>
    26ca:	e8 ce       	rjmp	.-560    	; 0x249c <_lab_03_SevSegmentsMux+0x1c>
    26cc:	e5 ce       	rjmp	.-566    	; 0x2498 <_lab_03_SevSegmentsMux+0x18>

000026ce <main>:
 * Created: 10/19/2018 3:07:24 PM
 * Author : MuhammadElzeiny
 */ 
#include "App/app.h"
int main(void)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	_Lab_05_LCD();
    26d6:	0e 94 34 11 	call	0x2268	; 0x2268 <_Lab_05_LCD>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0

}
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <__udivmodqi4>:
    26e4:	99 1b       	sub	r25, r25
    26e6:	79 e0       	ldi	r23, 0x09	; 9
    26e8:	04 c0       	rjmp	.+8      	; 0x26f2 <__udivmodqi4_ep>

000026ea <__udivmodqi4_loop>:
    26ea:	99 1f       	adc	r25, r25
    26ec:	96 17       	cp	r25, r22
    26ee:	08 f0       	brcs	.+2      	; 0x26f2 <__udivmodqi4_ep>
    26f0:	96 1b       	sub	r25, r22

000026f2 <__udivmodqi4_ep>:
    26f2:	88 1f       	adc	r24, r24
    26f4:	7a 95       	dec	r23
    26f6:	c9 f7       	brne	.-14     	; 0x26ea <__udivmodqi4_loop>
    26f8:	80 95       	com	r24
    26fa:	08 95       	ret

000026fc <__prologue_saves__>:
    26fc:	2f 92       	push	r2
    26fe:	3f 92       	push	r3
    2700:	4f 92       	push	r4
    2702:	5f 92       	push	r5
    2704:	6f 92       	push	r6
    2706:	7f 92       	push	r7
    2708:	8f 92       	push	r8
    270a:	9f 92       	push	r9
    270c:	af 92       	push	r10
    270e:	bf 92       	push	r11
    2710:	cf 92       	push	r12
    2712:	df 92       	push	r13
    2714:	ef 92       	push	r14
    2716:	ff 92       	push	r15
    2718:	0f 93       	push	r16
    271a:	1f 93       	push	r17
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	ca 1b       	sub	r28, r26
    2726:	db 0b       	sbc	r29, r27
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	09 94       	ijmp

00002734 <__epilogue_restores__>:
    2734:	2a 88       	ldd	r2, Y+18	; 0x12
    2736:	39 88       	ldd	r3, Y+17	; 0x11
    2738:	48 88       	ldd	r4, Y+16	; 0x10
    273a:	5f 84       	ldd	r5, Y+15	; 0x0f
    273c:	6e 84       	ldd	r6, Y+14	; 0x0e
    273e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2740:	8c 84       	ldd	r8, Y+12	; 0x0c
    2742:	9b 84       	ldd	r9, Y+11	; 0x0b
    2744:	aa 84       	ldd	r10, Y+10	; 0x0a
    2746:	b9 84       	ldd	r11, Y+9	; 0x09
    2748:	c8 84       	ldd	r12, Y+8	; 0x08
    274a:	df 80       	ldd	r13, Y+7	; 0x07
    274c:	ee 80       	ldd	r14, Y+6	; 0x06
    274e:	fd 80       	ldd	r15, Y+5	; 0x05
    2750:	0c 81       	ldd	r16, Y+4	; 0x04
    2752:	1b 81       	ldd	r17, Y+3	; 0x03
    2754:	aa 81       	ldd	r26, Y+2	; 0x02
    2756:	b9 81       	ldd	r27, Y+1	; 0x01
    2758:	ce 0f       	add	r28, r30
    275a:	d1 1d       	adc	r29, r1
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	ed 01       	movw	r28, r26
    2768:	08 95       	ret

0000276a <itoa>:
    276a:	fb 01       	movw	r30, r22
    276c:	9f 01       	movw	r18, r30
    276e:	e8 94       	clt
    2770:	42 30       	cpi	r20, 0x02	; 2
    2772:	c4 f0       	brlt	.+48     	; 0x27a4 <itoa+0x3a>
    2774:	45 32       	cpi	r20, 0x25	; 37
    2776:	b4 f4       	brge	.+44     	; 0x27a4 <itoa+0x3a>
    2778:	4a 30       	cpi	r20, 0x0A	; 10
    277a:	29 f4       	brne	.+10     	; 0x2786 <itoa+0x1c>
    277c:	97 fb       	bst	r25, 7
    277e:	1e f4       	brtc	.+6      	; 0x2786 <itoa+0x1c>
    2780:	90 95       	com	r25
    2782:	81 95       	neg	r24
    2784:	9f 4f       	sbci	r25, 0xFF	; 255
    2786:	64 2f       	mov	r22, r20
    2788:	77 27       	eor	r23, r23
    278a:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__udivmodhi4>
    278e:	80 5d       	subi	r24, 0xD0	; 208
    2790:	8a 33       	cpi	r24, 0x3A	; 58
    2792:	0c f0       	brlt	.+2      	; 0x2796 <itoa+0x2c>
    2794:	89 5d       	subi	r24, 0xD9	; 217
    2796:	81 93       	st	Z+, r24
    2798:	cb 01       	movw	r24, r22
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	a1 f7       	brne	.-24     	; 0x2786 <itoa+0x1c>
    279e:	16 f4       	brtc	.+4      	; 0x27a4 <itoa+0x3a>
    27a0:	5d e2       	ldi	r21, 0x2D	; 45
    27a2:	51 93       	st	Z+, r21
    27a4:	10 82       	st	Z, r1
    27a6:	c9 01       	movw	r24, r18
    27a8:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <strrev>

000027ac <strrev>:
    27ac:	dc 01       	movw	r26, r24
    27ae:	fc 01       	movw	r30, r24
    27b0:	67 2f       	mov	r22, r23
    27b2:	71 91       	ld	r23, Z+
    27b4:	77 23       	and	r23, r23
    27b6:	e1 f7       	brne	.-8      	; 0x27b0 <strrev+0x4>
    27b8:	32 97       	sbiw	r30, 0x02	; 2
    27ba:	04 c0       	rjmp	.+8      	; 0x27c4 <strrev+0x18>
    27bc:	7c 91       	ld	r23, X
    27be:	6d 93       	st	X+, r22
    27c0:	70 83       	st	Z, r23
    27c2:	62 91       	ld	r22, -Z
    27c4:	ae 17       	cp	r26, r30
    27c6:	bf 07       	cpc	r27, r31
    27c8:	c8 f3       	brcs	.-14     	; 0x27bc <strrev+0x10>
    27ca:	08 95       	ret

000027cc <__udivmodhi4>:
    27cc:	aa 1b       	sub	r26, r26
    27ce:	bb 1b       	sub	r27, r27
    27d0:	51 e1       	ldi	r21, 0x11	; 17
    27d2:	07 c0       	rjmp	.+14     	; 0x27e2 <__udivmodhi4_ep>

000027d4 <__udivmodhi4_loop>:
    27d4:	aa 1f       	adc	r26, r26
    27d6:	bb 1f       	adc	r27, r27
    27d8:	a6 17       	cp	r26, r22
    27da:	b7 07       	cpc	r27, r23
    27dc:	10 f0       	brcs	.+4      	; 0x27e2 <__udivmodhi4_ep>
    27de:	a6 1b       	sub	r26, r22
    27e0:	b7 0b       	sbc	r27, r23

000027e2 <__udivmodhi4_ep>:
    27e2:	88 1f       	adc	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	5a 95       	dec	r21
    27e8:	a9 f7       	brne	.-22     	; 0x27d4 <__udivmodhi4_loop>
    27ea:	80 95       	com	r24
    27ec:	90 95       	com	r25
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	08 95       	ret

000027f4 <_exit>:
    27f4:	f8 94       	cli

000027f6 <__stop_program>:
    27f6:	ff cf       	rjmp	.-2      	; 0x27f6 <__stop_program>
