
ATMega32_Preipherals_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002466  000024fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  00002508  2**0
                  ALLOC
  3 .stab         00002cd0  00000000  00000000  00002508  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001297  00000000  00000000  000051d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000646f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000671f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008368  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009253  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a000  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a160  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 11 	call	0x233c	; 0x233c <main>
      8a:	0c 94 31 12 	jmp	0x2462	; 0x2462 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_enInterrupt>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_reg.h"
#include "GIE.h"

void GIE_enInterrupt(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_diInterrupt>:
void GIE_diInterrupt(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <DIO_init>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO.h"

void DIO_init(void)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
	/* initialize DIO module by setting DDR registers with PORT direction*/
	DDRA = BIT_CONC(DIO_u8_PIN_DIR_7,DIO_u8_PIN_DIR_6,DIO_u8_PIN_DIR_5,DIO_u8_PIN_DIR_4,DIO_u8_PIN_DIR_3,DIO_u8_PIN_DIR_2,DIO_u8_PIN_DIR_1,DIO_u8_PIN_DIR_0);
     b86:	ea e3       	ldi	r30, 0x3A	; 58
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	8e ef       	ldi	r24, 0xFE	; 254
     b8c:	80 83       	st	Z, r24
	DDRB = BIT_CONC(DIO_u8_PIN_DIR_15,DIO_u8_PIN_DIR_14,DIO_u8_PIN_DIR_13,DIO_u8_PIN_DIR_12,DIO_u8_PIN_DIR_11,DIO_u8_PIN_DIR_10,DIO_u8_PIN_DIR_9,DIO_u8_PIN_DIR_8);
     b8e:	e7 e3       	ldi	r30, 0x37	; 55
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	80 83       	st	Z, r24
	DDRC = BIT_CONC(DIO_u8_PIN_DIR_23,DIO_u8_PIN_DIR_22,DIO_u8_PIN_DIR_21,DIO_u8_PIN_DIR_20,DIO_u8_PIN_DIR_19,DIO_u8_PIN_DIR_18,DIO_u8_PIN_DIR_17,DIO_u8_PIN_DIR_16);
     b96:	e4 e3       	ldi	r30, 0x34	; 52
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	80 83       	st	Z, r24
	DDRD = BIT_CONC(DIO_u8_PIN_DIR_31,DIO_u8_PIN_DIR_30,DIO_u8_PIN_DIR_29,DIO_u8_PIN_DIR_28,DIO_u8_PIN_DIR_27,DIO_u8_PIN_DIR_26,DIO_u8_PIN_DIR_25,DIO_u8_PIN_DIR_24);
     b9e:	e1 e3       	ldi	r30, 0x31	; 49
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	80 83       	st	Z, r24
}
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <DIO_setPinValue>:
void DIO_setPinValue(u8 PinNum, DIO_PinValue_t ValueCpy)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <DIO_setPinValue+0x6>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	89 83       	std	Y+1, r24	; 0x01
     bb8:	6a 83       	std	Y+2, r22	; 0x02
	/* switch between PORTS,
	 * assign the right bit in corresponding register with ValueCpy */
	if(PinNum <= DIO_u8_PORTA_END)
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	88 30       	cpi	r24, 0x08	; 8
     bbe:	48 f5       	brcc	.+82     	; 0xc12 <DIO_setPinValue+0x66>
	{
		/*in PORTA*/
		ASSIGN_BIT(PORTA,PinNum,ValueCpy);	
     bc0:	ab e3       	ldi	r26, 0x3B	; 59
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	eb e3       	ldi	r30, 0x3B	; 59
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	48 2f       	mov	r20, r24
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_setPinValue+0x30>
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	2a 95       	dec	r18
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_setPinValue+0x2c>
     be0:	80 95       	com	r24
     be2:	84 23       	and	r24, r20
     be4:	8c 93       	st	X, r24
     be6:	ab e3       	ldi	r26, 0x3B	; 59
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	eb e3       	ldi	r30, 0x3B	; 59
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	48 2f       	mov	r20, r24
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	b9 01       	movw	r22, r18
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <DIO_setPinValue+0x5a>
     c02:	66 0f       	add	r22, r22
     c04:	77 1f       	adc	r23, r23
     c06:	8a 95       	dec	r24
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <DIO_setPinValue+0x56>
     c0a:	cb 01       	movw	r24, r22
     c0c:	84 2b       	or	r24, r20
     c0e:	8c 93       	st	X, r24
     c10:	95 c0       	rjmp	.+298    	; 0xd3c <DIO_setPinValue+0x190>
	}
	else if(PinNum >=DIO_u8_PORTB_START && PinNum <= DIO_u8_PORTB_END)
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	88 30       	cpi	r24, 0x08	; 8
     c16:	78 f1       	brcs	.+94     	; 0xc76 <DIO_setPinValue+0xca>
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	80 31       	cpi	r24, 0x10	; 16
     c1c:	60 f5       	brcc	.+88     	; 0xc76 <DIO_setPinValue+0xca>
	{
		/*in PORTB*/
		PinNum -= DIO_u8_PORTB_OFFSET;
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	88 50       	subi	r24, 0x08	; 8
     c22:	89 83       	std	Y+1, r24	; 0x01
		ASSIGN_BIT(PORTB,PinNum,ValueCpy);
     c24:	a8 e3       	ldi	r26, 0x38	; 56
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e8 e3       	ldi	r30, 0x38	; 56
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_setPinValue+0x94>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	2a 95       	dec	r18
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_setPinValue+0x90>
     c44:	80 95       	com	r24
     c46:	84 23       	and	r24, r20
     c48:	8c 93       	st	X, r24
     c4a:	a8 e3       	ldi	r26, 0x38	; 56
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e8 e3       	ldi	r30, 0x38	; 56
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	88 2f       	mov	r24, r24
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	b9 01       	movw	r22, r18
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <DIO_setPinValue+0xbe>
     c66:	66 0f       	add	r22, r22
     c68:	77 1f       	adc	r23, r23
     c6a:	8a 95       	dec	r24
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <DIO_setPinValue+0xba>
     c6e:	cb 01       	movw	r24, r22
     c70:	84 2b       	or	r24, r20
     c72:	8c 93       	st	X, r24
     c74:	63 c0       	rjmp	.+198    	; 0xd3c <DIO_setPinValue+0x190>
		
	}
	else if(PinNum >=DIO_u8_PORTC_START && PinNum <= DIO_u8_PORTC_END)
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	80 31       	cpi	r24, 0x10	; 16
     c7a:	78 f1       	brcs	.+94     	; 0xcda <DIO_setPinValue+0x12e>
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	88 31       	cpi	r24, 0x18	; 24
     c80:	60 f5       	brcc	.+88     	; 0xcda <DIO_setPinValue+0x12e>
	{
			/*in PORTC*/
			PinNum -= DIO_u8_PORTC_OFFSET;
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	80 51       	subi	r24, 0x10	; 16
     c86:	89 83       	std	Y+1, r24	; 0x01
			ASSIGN_BIT(PORTC,PinNum,ValueCpy);
     c88:	a5 e3       	ldi	r26, 0x35	; 53
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e5 e3       	ldi	r30, 0x35	; 53
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_setPinValue+0xf8>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	2a 95       	dec	r18
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_setPinValue+0xf4>
     ca8:	80 95       	com	r24
     caa:	84 23       	and	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	a5 e3       	ldi	r26, 0x35	; 53
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e5 e3       	ldi	r30, 0x35	; 53
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	b9 01       	movw	r22, r18
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <DIO_setPinValue+0x122>
     cca:	66 0f       	add	r22, r22
     ccc:	77 1f       	adc	r23, r23
     cce:	8a 95       	dec	r24
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <DIO_setPinValue+0x11e>
     cd2:	cb 01       	movw	r24, r22
     cd4:	84 2b       	or	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	31 c0       	rjmp	.+98     	; 0xd3c <DIO_setPinValue+0x190>
			
	}
	else if(PinNum >=DIO_u8_PORTD_START && PinNum <= DIO_u8_PORTD_END)
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	88 31       	cpi	r24, 0x18	; 24
     cde:	70 f1       	brcs	.+92     	; 0xd3c <DIO_setPinValue+0x190>
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	80 32       	cpi	r24, 0x20	; 32
     ce4:	58 f5       	brcc	.+86     	; 0xd3c <DIO_setPinValue+0x190>
	{
			/*in PORTD*/
			PinNum -= DIO_u8_PORTD_OFFSET;
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	88 51       	subi	r24, 0x18	; 24
     cea:	89 83       	std	Y+1, r24	; 0x01
			ASSIGN_BIT(PORTD,PinNum,ValueCpy);
     cec:	a2 e3       	ldi	r26, 0x32	; 50
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e2 e3       	ldi	r30, 0x32	; 50
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <DIO_setPinValue+0x15c>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	2a 95       	dec	r18
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <DIO_setPinValue+0x158>
     d0c:	80 95       	com	r24
     d0e:	84 23       	and	r24, r20
     d10:	8c 93       	st	X, r24
     d12:	a2 e3       	ldi	r26, 0x32	; 50
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e2 e3       	ldi	r30, 0x32	; 50
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	b9 01       	movw	r22, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_setPinValue+0x186>
     d2e:	66 0f       	add	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_setPinValue+0x182>
     d36:	cb 01       	movw	r24, r22
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24
				
	}


}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_getPinValue>:
DIO_PinValue_t DIO_getPinValue(u8 PinNum)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <DIO_getPinValue+0x6>
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinValue_t PinValue = DIO_Pin_low;
     d52:	19 82       	std	Y+1, r1	; 0x01

	/*TODO: switch between PORTS,
	 * get the right bit in corresponding register (PINx)
	 * and assign the value to PinValue*/
		
	if(PinNum <= DIO_u8_PORTA_END)
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	88 30       	cpi	r24, 0x08	; 8
     d58:	f0 f4       	brcc	.+60     	; 0xd96 <DIO_getPinValue+0x50>
	{
		/*in PORTA*/
		PinValue = GET_BIT(PINA,PinNum);	
     d5a:	e9 e3       	ldi	r30, 0x39	; 57
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_getPinValue+0x2e>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	2a 95       	dec	r18
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_getPinValue+0x2a>
     d78:	9a 01       	movw	r18, r20
     d7a:	28 23       	and	r18, r24
     d7c:	39 23       	and	r19, r25
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	a9 01       	movw	r20, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_getPinValue+0x46>
     d88:	55 95       	asr	r21
     d8a:	47 95       	ror	r20
     d8c:	8a 95       	dec	r24
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_getPinValue+0x42>
     d90:	ca 01       	movw	r24, r20
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	74 c0       	rjmp	.+232    	; 0xe7e <DIO_getPinValue+0x138>
	}
	else if(PinNum >=DIO_u8_PORTB_START && PinNum <= DIO_u8_PORTB_END)
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	88 30       	cpi	r24, 0x08	; 8
     d9a:	20 f1       	brcs	.+72     	; 0xde4 <DIO_getPinValue+0x9e>
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	80 31       	cpi	r24, 0x10	; 16
     da0:	08 f5       	brcc	.+66     	; 0xde4 <DIO_getPinValue+0x9e>
	{
		/*in PORTB*/
		PinNum -= DIO_u8_PORTB_OFFSET;
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	88 50       	subi	r24, 0x08	; 8
     da6:	8a 83       	std	Y+2, r24	; 0x02
		PinValue = GET_BIT(PINB,PinNum);
     da8:	e6 e3       	ldi	r30, 0x36	; 54
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_getPinValue+0x7c>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	2a 95       	dec	r18
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_getPinValue+0x78>
     dc6:	9a 01       	movw	r18, r20
     dc8:	28 23       	and	r18, r24
     dca:	39 23       	and	r19, r25
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	a9 01       	movw	r20, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_getPinValue+0x94>
     dd6:	55 95       	asr	r21
     dd8:	47 95       	ror	r20
     dda:	8a 95       	dec	r24
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_getPinValue+0x90>
     dde:	ca 01       	movw	r24, r20
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	4d c0       	rjmp	.+154    	; 0xe7e <DIO_getPinValue+0x138>
		
	}
	else if(PinNum >=DIO_u8_PORTC_START && PinNum <= DIO_u8_PORTC_END)
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	80 31       	cpi	r24, 0x10	; 16
     de8:	20 f1       	brcs	.+72     	; 0xe32 <DIO_getPinValue+0xec>
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	88 31       	cpi	r24, 0x18	; 24
     dee:	08 f5       	brcc	.+66     	; 0xe32 <DIO_getPinValue+0xec>
	{
			/*in PORTC*/
			PinNum -= DIO_u8_PORTC_OFFSET;
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	80 51       	subi	r24, 0x10	; 16
     df4:	8a 83       	std	Y+2, r24	; 0x02
			PinValue = GET_BIT(PINC,PinNum);
     df6:	e3 e3       	ldi	r30, 0x33	; 51
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_getPinValue+0xca>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	2a 95       	dec	r18
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_getPinValue+0xc6>
     e14:	9a 01       	movw	r18, r20
     e16:	28 23       	and	r18, r24
     e18:	39 23       	and	r19, r25
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	a9 01       	movw	r20, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_getPinValue+0xe2>
     e24:	55 95       	asr	r21
     e26:	47 95       	ror	r20
     e28:	8a 95       	dec	r24
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_getPinValue+0xde>
     e2c:	ca 01       	movw	r24, r20
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	26 c0       	rjmp	.+76     	; 0xe7e <DIO_getPinValue+0x138>
			
	}
	else if(PinNum >=DIO_u8_PORTD_START && PinNum <= DIO_u8_PORTD_END)
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	88 31       	cpi	r24, 0x18	; 24
     e36:	18 f1       	brcs	.+70     	; 0xe7e <DIO_getPinValue+0x138>
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	80 32       	cpi	r24, 0x20	; 32
     e3c:	00 f5       	brcc	.+64     	; 0xe7e <DIO_getPinValue+0x138>
	{
			/*in PORTD*/
			PinNum -= DIO_u8_PORTD_OFFSET;
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	88 51       	subi	r24, 0x18	; 24
     e42:	8a 83       	std	Y+2, r24	; 0x02
			PinValue = GET_BIT(PIND,PinNum);			
     e44:	e0 e3       	ldi	r30, 0x30	; 48
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_getPinValue+0x118>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	2a 95       	dec	r18
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_getPinValue+0x114>
     e62:	9a 01       	movw	r18, r20
     e64:	28 23       	and	r18, r24
     e66:	39 23       	and	r19, r25
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a9 01       	movw	r20, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_getPinValue+0x130>
     e72:	55 95       	asr	r21
     e74:	47 95       	ror	r20
     e76:	8a 95       	dec	r24
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_getPinValue+0x12c>
     e7a:	ca 01       	movw	r24, r20
     e7c:	89 83       	std	Y+1, r24	; 0x01
	}

	return PinValue;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <DIO_setPortValue>:

void DIO_setPortValue(u8 PortNo, u8 PortVal)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <DIO_setPortValue+0x6>
     e90:	00 d0       	rcall	.+0      	; 0xe92 <DIO_setPortValue+0x8>
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	89 83       	std	Y+1, r24	; 0x01
     e98:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNo)
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	3c 83       	std	Y+4, r19	; 0x04
     ea2:	2b 83       	std	Y+3, r18	; 0x03
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	d1 f0       	breq	.+52     	; 0xee2 <DIO_setPortValue+0x58>
     eae:	2b 81       	ldd	r18, Y+3	; 0x03
     eb0:	3c 81       	ldd	r19, Y+4	; 0x04
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <DIO_setPortValue+0x38>
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	61 f0       	breq	.+24     	; 0xed8 <DIO_setPortValue+0x4e>
     ec0:	1e c0       	rjmp	.+60     	; 0xefe <DIO_setPortValue+0x74>
     ec2:	2b 81       	ldd	r18, Y+3	; 0x03
     ec4:	3c 81       	ldd	r19, Y+4	; 0x04
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	81 f0       	breq	.+32     	; 0xeec <DIO_setPortValue+0x62>
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	9c 81       	ldd	r25, Y+4	; 0x04
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	91 05       	cpc	r25, r1
     ed4:	81 f0       	breq	.+32     	; 0xef6 <DIO_setPortValue+0x6c>
     ed6:	13 c0       	rjmp	.+38     	; 0xefe <DIO_setPortValue+0x74>
	{
		case DIO_PORT_A:
		PORTA = PortVal;
     ed8:	eb e3       	ldi	r30, 0x3B	; 59
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	80 83       	st	Z, r24
     ee0:	0e c0       	rjmp	.+28     	; 0xefe <DIO_setPortValue+0x74>
		break;
		
		case DIO_PORT_B:
		PORTB = PortVal;
     ee2:	e8 e3       	ldi	r30, 0x38	; 56
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	80 83       	st	Z, r24
     eea:	09 c0       	rjmp	.+18     	; 0xefe <DIO_setPortValue+0x74>
		break;
		
		case DIO_PORT_C:
		PORTC = PortVal;
     eec:	e5 e3       	ldi	r30, 0x35	; 53
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	80 83       	st	Z, r24
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <DIO_setPortValue+0x74>
		break;
		
		case DIO_PORT_D:
		PORTD = PortVal;
     ef6:	e2 e3       	ldi	r30, 0x32	; 50
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	80 83       	st	Z, r24
		
		default:
		/*invalid Port no*/
		break;
	}	
}
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <DIO_getPortValue>:
u8 DIO_getPortValue(u8 PortNo)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <DIO_getPortValue+0x6>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <DIO_getPortValue+0x8>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	8a 83       	std	Y+2, r24	; 0x02
	u8 PortVal = 0;
     f1a:	19 82       	std	Y+1, r1	; 0x01
		switch(PortNo)
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	3c 83       	std	Y+4, r19	; 0x04
     f24:	2b 83       	std	Y+3, r18	; 0x03
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	91 05       	cpc	r25, r1
     f2e:	d1 f0       	breq	.+52     	; 0xf64 <DIO_getPortValue+0x58>
     f30:	2b 81       	ldd	r18, Y+3	; 0x03
     f32:	3c 81       	ldd	r19, Y+4	; 0x04
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	2c f4       	brge	.+10     	; 0xf44 <DIO_getPortValue+0x38>
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	61 f0       	breq	.+24     	; 0xf5a <DIO_getPortValue+0x4e>
     f42:	1e c0       	rjmp	.+60     	; 0xf80 <DIO_getPortValue+0x74>
     f44:	2b 81       	ldd	r18, Y+3	; 0x03
     f46:	3c 81       	ldd	r19, Y+4	; 0x04
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	81 f0       	breq	.+32     	; 0xf6e <DIO_getPortValue+0x62>
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	91 05       	cpc	r25, r1
     f56:	81 f0       	breq	.+32     	; 0xf78 <DIO_getPortValue+0x6c>
     f58:	13 c0       	rjmp	.+38     	; 0xf80 <DIO_getPortValue+0x74>
		{
			case DIO_PORT_A:
			PortVal = PINA;
     f5a:	e9 e3       	ldi	r30, 0x39	; 57
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	0e c0       	rjmp	.+28     	; 0xf80 <DIO_getPortValue+0x74>
			break;
			
			case DIO_PORT_B:
			PortVal = PINB;
     f64:	e6 e3       	ldi	r30, 0x36	; 54
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <DIO_getPortValue+0x74>
			break;
			
			case DIO_PORT_C:
			PortVal = PINC;
     f6e:	e3 e3       	ldi	r30, 0x33	; 51
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <DIO_getPortValue+0x74>
			break;
			
			case DIO_PORT_D:
			PortVal = PIND;
     f78:	e0 e3       	ldi	r30, 0x30	; 48
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	89 83       	std	Y+1, r24	; 0x01
			default:
			/*invalid Port no*/
			break;
		}
	
	return PortVal;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <DIO_togglePin>:

void DIO_togglePin(u8 PinNum)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	0f 92       	push	r0
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	89 83       	std	Y+1, r24	; 0x01
	/*TODO: switch between PORTS,
	 * assign the right bit in corresponding register with ValueCpy */
	if(PinNum <= DIO_u8_PORTA_END)
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	88 30       	cpi	r24, 0x08	; 8
     fa0:	a0 f4       	brcc	.+40     	; 0xfca <DIO_togglePin+0x3a>
	{
		/*in PORTA*/
		TOGGLE_BIT(PORTA,PinNum);	
     fa2:	ab e3       	ldi	r26, 0x3B	; 59
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	eb e3       	ldi	r30, 0x3B	; 59
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_togglePin+0x30>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_togglePin+0x2c>
     fc4:	84 27       	eor	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	56 c0       	rjmp	.+172    	; 0x1076 <DIO_togglePin+0xe6>
	}
	else if(PinNum >=DIO_u8_PORTB_START && PinNum <= DIO_u8_PORTB_END)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	88 30       	cpi	r24, 0x08	; 8
     fce:	d0 f0       	brcs	.+52     	; 0x1004 <DIO_togglePin+0x74>
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	80 31       	cpi	r24, 0x10	; 16
     fd4:	b8 f4       	brcc	.+46     	; 0x1004 <DIO_togglePin+0x74>
	{
		/*in PORTB*/
		PinNum -= DIO_u8_PORTB_OFFSET;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	88 50       	subi	r24, 0x08	; 8
     fda:	89 83       	std	Y+1, r24	; 0x01
		TOGGLE_BIT(PORTB,PinNum);
     fdc:	a8 e3       	ldi	r26, 0x38	; 56
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e8 e3       	ldi	r30, 0x38	; 56
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_togglePin+0x6a>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_togglePin+0x66>
     ffe:	84 27       	eor	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	39 c0       	rjmp	.+114    	; 0x1076 <DIO_togglePin+0xe6>
		
	}
	else if(PinNum >=DIO_u8_PORTC_START && PinNum <= DIO_u8_PORTC_END)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	80 31       	cpi	r24, 0x10	; 16
    1008:	d0 f0       	brcs	.+52     	; 0x103e <DIO_togglePin+0xae>
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	88 31       	cpi	r24, 0x18	; 24
    100e:	b8 f4       	brcc	.+46     	; 0x103e <DIO_togglePin+0xae>
	{
			/*in PORTC*/
			PinNum -= DIO_u8_PORTC_OFFSET;
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	80 51       	subi	r24, 0x10	; 16
    1014:	89 83       	std	Y+1, r24	; 0x01
			TOGGLE_BIT(PORTC,PinNum);
    1016:	a5 e3       	ldi	r26, 0x35	; 53
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e5 e3       	ldi	r30, 0x35	; 53
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_togglePin+0xa4>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_togglePin+0xa0>
    1038:	84 27       	eor	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	1c c0       	rjmp	.+56     	; 0x1076 <DIO_togglePin+0xe6>
			
	}
	else if(PinNum >=DIO_u8_PORTD_START && PinNum <= DIO_u8_PORTD_END)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	88 31       	cpi	r24, 0x18	; 24
    1042:	c8 f0       	brcs	.+50     	; 0x1076 <DIO_togglePin+0xe6>
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	80 32       	cpi	r24, 0x20	; 32
    1048:	b0 f4       	brcc	.+44     	; 0x1076 <DIO_togglePin+0xe6>
	{
			/*in PORTD*/
			PinNum -= DIO_u8_PORTD_OFFSET;
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	88 51       	subi	r24, 0x18	; 24
    104e:	89 83       	std	Y+1, r24	; 0x01
			TOGGLE_BIT(PORTD,PinNum);			
    1050:	a2 e3       	ldi	r26, 0x32	; 50
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e2 e3       	ldi	r30, 0x32	; 50
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_togglePin+0xde>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_togglePin+0xda>
    1072:	84 27       	eor	r24, r20
    1074:	8c 93       	st	X, r24
	}
}
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <ADC_init>:
#include "ADC_reg.h"
#include "ADC.h"

static u16 ADC_LastConvertedVal =0 ;
void ADC_init(void)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62

	/*Select Vref source*/
	ADMUX &= 0b00111111;
    1086:	a7 e2       	ldi	r26, 0x27	; 39
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e7 e2       	ldi	r30, 0x27	; 39
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8f 73       	andi	r24, 0x3F	; 63
    1092:	8c 93       	st	X, r24
	ADMUX |=(ADC_VREF_SOURCE_SELECTOR<<6);
    1094:	a7 e2       	ldi	r26, 0x27	; 39
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e7 e2       	ldi	r30, 0x27	; 39
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	80 64       	ori	r24, 0x40	; 64
    10a0:	8c 93       	st	X, r24

	/*select mode*/
#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
	SET_BIT(ADCSRA,5);
    10a2:	a6 e2       	ldi	r26, 0x26	; 38
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e6 e2       	ldi	r30, 0x26	; 38
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 62       	ori	r24, 0x20	; 32
    10ae:	8c 93       	st	X, r24

	/*Select trigger type*/
	SFIOR &=0b00011111;
    10b0:	a0 e5       	ldi	r26, 0x50	; 80
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e0 e5       	ldi	r30, 0x50	; 80
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	8f 71       	andi	r24, 0x1F	; 31
    10bc:	8c 93       	st	X, r24
	SFIOR |= (ADC_TRIGGER_TYPE<<5);
    10be:	a0 e5       	ldi	r26, 0x50	; 80
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e0 e5       	ldi	r30, 0x50	; 80
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	8c 93       	st	X, r24
#endif

	/*select prescaler*/
	ADCSRA &= 0b11111000;
    10ca:	a6 e2       	ldi	r26, 0x26	; 38
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e6 e2       	ldi	r30, 0x26	; 38
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	88 7f       	andi	r24, 0xF8	; 248
    10d6:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALER_SELECTOR;
    10d8:	a6 e2       	ldi	r26, 0x26	; 38
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e6 e2       	ldi	r30, 0x26	; 38
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	86 60       	ori	r24, 0x06	; 6
    10e4:	8c 93       	st	X, r24

	/*enable ADC peripheral*/
	SET_BIT(ADCSRA,7);
    10e6:	a6 e2       	ldi	r26, 0x26	; 38
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e6 e2       	ldi	r30, 0x26	; 38
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 68       	ori	r24, 0x80	; 128
    10f2:	8c 93       	st	X, r24

}
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <ADC_enInterrupt>:
void ADC_enInterrupt(void)
{
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    1102:	a6 e2       	ldi	r26, 0x26	; 38
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e6 e2       	ldi	r30, 0x26	; 38
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 60       	ori	r24, 0x08	; 8
    110e:	8c 93       	st	X, r24
}
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <ADC_diInterrupt>:
void ADC_diInterrupt(void)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIE);
    111e:	a6 e2       	ldi	r26, 0x26	; 38
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e6 e2       	ldi	r30, 0x26	; 38
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	87 7f       	andi	r24, 0xF7	; 247
    112a:	8c 93       	st	X, r24
}
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <ADC_startConversion>:
void ADC_startConversion(ADC_Ch_t ChannelNo)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	89 83       	std	Y+1, r24	; 0x01
	/*choose channel*/
	ADMUX &=0b11100000;
    113e:	a7 e2       	ldi	r26, 0x27	; 39
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e7 e2       	ldi	r30, 0x27	; 39
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 7e       	andi	r24, 0xE0	; 224
    114a:	8c 93       	st	X, r24
	ADMUX |= ChannelNo;
    114c:	a7 e2       	ldi	r26, 0x27	; 39
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e7 e2       	ldi	r30, 0x27	; 39
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	90 81       	ld	r25, Z
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	89 2b       	or	r24, r25
    115a:	8c 93       	st	X, r24

	/*start conversion*/
	SET_BIT(ADCSRA,ADSC);
    115c:	a6 e2       	ldi	r26, 0x26	; 38
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e6 e2       	ldi	r30, 0x26	; 38
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	80 64       	ori	r24, 0x40	; 64
    1168:	8c 93       	st	X, r24

	/*check if interrupt disabled*/
	if(GET_BIT(ADMUX,ADIE) == 0)
    116a:	e7 e2       	ldi	r30, 0x27	; 39
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	88 70       	andi	r24, 0x08	; 8
    1176:	90 70       	andi	r25, 0x00	; 0
    1178:	95 95       	asr	r25
    117a:	87 95       	ror	r24
    117c:	95 95       	asr	r25
    117e:	87 95       	ror	r24
    1180:	95 95       	asr	r25
    1182:	87 95       	ror	r24
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	c9 f4       	brne	.+50     	; 0x11ba <ADC_startConversion+0x88>
	{
		/*wait until ADC conversion is finished*/
		while(GET_BIT(ADCSRA,ADIF));
    1188:	e6 e2       	ldi	r30, 0x26	; 38
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	80 71       	andi	r24, 0x10	; 16
    1194:	90 70       	andi	r25, 0x00	; 0
    1196:	95 95       	asr	r25
    1198:	87 95       	ror	r24
    119a:	95 95       	asr	r25
    119c:	87 95       	ror	r24
    119e:	95 95       	asr	r25
    11a0:	87 95       	ror	r24
    11a2:	95 95       	asr	r25
    11a4:	87 95       	ror	r24
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	79 f7       	brne	.-34     	; 0x1188 <ADC_startConversion+0x56>
		/*update value*/
		ADC_LastConvertedVal = ADC;
    11aa:	e4 e2       	ldi	r30, 0x24	; 36
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	90 93 6f 00 	sts	0x006F, r25
    11b6:	80 93 6e 00 	sts	0x006E, r24
	}
}
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <ADC_getLastConvertedVal>:
u16 ADC_getLastConvertedVal(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	return ADC_LastConvertedVal;
    11ca:	80 91 6e 00 	lds	r24, 0x006E
    11ce:	90 91 6f 00 	lds	r25, 0x006F
}
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <__vector_16>:

void __vector_16(void) __attribute__((signal,used));

void __vector_16(void)
{
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	ef 93       	push	r30
    11e8:	ff 93       	push	r31
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
	/*update value*/
	ADC_LastConvertedVal = ADC;
    11f2:	e4 e2       	ldi	r30, 0x24	; 36
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	91 81       	ldd	r25, Z+1	; 0x01
    11fa:	90 93 6f 00 	sts	0x006F, r25
    11fe:	80 93 6e 00 	sts	0x006E, r24
}
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	9f 91       	pop	r25
    120c:	8f 91       	pop	r24
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	0f 90       	pop	r0
    1214:	1f 90       	pop	r1
    1216:	18 95       	reti

00001218 <SevSegments_enable>:

#include "SevSegments_Priv.h"
#include "SevSegments_config.h"
#include "SevSegments.h"
void SevSegments_enable(void)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
	#if (SEVSEGMENTS_COMMON_TYPE == SEVSEGMENTS_COMMON_CATHOD)
		/*set enable pin Low*/
		DIO_setPinValue(SEVSEGMENTS_COMMON_PIN,DIO_Pin_low);
    1220:	88 e1       	ldi	r24, 0x18	; 24
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	#else
		/*set enable pin High*/
		DIO_setPinValue(SEVSEGMENTS_COMMON_PIN,DIO_Pin_high);
	#endif
}
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <SevSegments_disable>:
void SevSegments_disable(void)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
		#if (SEVSEGMENTS_COMMON_TYPE == SEVSEGMENTS_COMMON_CATHOD)
		/*set enable pin Low*/
		DIO_setPinValue(SEVSEGMENTS_COMMON_PIN,DIO_Pin_high);
    1236:	88 e1       	ldi	r24, 0x18	; 24
    1238:	61 e0       	ldi	r22, 0x01	; 1
    123a:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
		#else
		/*set enable pin High*/
		DIO_setPinValue(SEVSEGMENTS_COMMON_PIN,DIO_Pin_low);
		#endif
	
}
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <SevSegments_displayNo>:
void SevSegments_displayNo(u8 Val)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <SevSegments_displayNo+0x6>
    124a:	00 d0       	rcall	.+0      	; 0x124c <SevSegments_displayNo+0x8>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	8a 83       	std	Y+2, r24	; 0x02
	u8 EncodedValue;
	switch(Val)
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	3c 83       	std	Y+4, r19	; 0x04
    125a:	2b 83       	std	Y+3, r18	; 0x03
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	91 05       	cpc	r25, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <SevSegments_displayNo+0x24>
    1266:	4b c0       	rjmp	.+150    	; 0x12fe <SevSegments_displayNo+0xba>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	25 30       	cpi	r18, 0x05	; 5
    126e:	31 05       	cpc	r19, r1
    1270:	d4 f4       	brge	.+52     	; 0x12a6 <SevSegments_displayNo+0x62>
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	91 05       	cpc	r25, r1
    127a:	c1 f1       	breq	.+112    	; 0x12ec <SevSegments_displayNo+0xa8>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	2c f4       	brge	.+10     	; 0x1290 <SevSegments_displayNo+0x4c>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	61 f1       	breq	.+88     	; 0x12e6 <SevSegments_displayNo+0xa2>
    128e:	49 c0       	rjmp	.+146    	; 0x1322 <SevSegments_displayNo+0xde>
    1290:	2b 81       	ldd	r18, Y+3	; 0x03
    1292:	3c 81       	ldd	r19, Y+4	; 0x04
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	61 f1       	breq	.+88     	; 0x12f2 <SevSegments_displayNo+0xae>
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	91 05       	cpc	r25, r1
    12a2:	51 f1       	breq	.+84     	; 0x12f8 <SevSegments_displayNo+0xb4>
    12a4:	3e c0       	rjmp	.+124    	; 0x1322 <SevSegments_displayNo+0xde>
    12a6:	2b 81       	ldd	r18, Y+3	; 0x03
    12a8:	3c 81       	ldd	r19, Y+4	; 0x04
    12aa:	27 30       	cpi	r18, 0x07	; 7
    12ac:	31 05       	cpc	r19, r1
    12ae:	81 f1       	breq	.+96     	; 0x1310 <SevSegments_displayNo+0xcc>
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	88 30       	cpi	r24, 0x08	; 8
    12b6:	91 05       	cpc	r25, r1
    12b8:	5c f4       	brge	.+22     	; 0x12d0 <SevSegments_displayNo+0x8c>
    12ba:	2b 81       	ldd	r18, Y+3	; 0x03
    12bc:	3c 81       	ldd	r19, Y+4	; 0x04
    12be:	25 30       	cpi	r18, 0x05	; 5
    12c0:	31 05       	cpc	r19, r1
    12c2:	01 f1       	breq	.+64     	; 0x1304 <SevSegments_displayNo+0xc0>
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	86 30       	cpi	r24, 0x06	; 6
    12ca:	91 05       	cpc	r25, r1
    12cc:	f1 f0       	breq	.+60     	; 0x130a <SevSegments_displayNo+0xc6>
    12ce:	29 c0       	rjmp	.+82     	; 0x1322 <SevSegments_displayNo+0xde>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	28 30       	cpi	r18, 0x08	; 8
    12d6:	31 05       	cpc	r19, r1
    12d8:	f1 f0       	breq	.+60     	; 0x1316 <SevSegments_displayNo+0xd2>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	89 30       	cpi	r24, 0x09	; 9
    12e0:	91 05       	cpc	r25, r1
    12e2:	e1 f0       	breq	.+56     	; 0x131c <SevSegments_displayNo+0xd8>
    12e4:	1e c0       	rjmp	.+60     	; 0x1322 <SevSegments_displayNo+0xde>
	{
		case 0:
			EncodedValue = 0b00111111;
    12e6:	8f e3       	ldi	r24, 0x3F	; 63
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	1c c0       	rjmp	.+56     	; 0x1324 <SevSegments_displayNo+0xe0>
			break;
		case 1:
			EncodedValue = 0b00000110;
    12ec:	86 e0       	ldi	r24, 0x06	; 6
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	19 c0       	rjmp	.+50     	; 0x1324 <SevSegments_displayNo+0xe0>
			break;
		case 2:
			EncodedValue = 0b01011011;
    12f2:	8b e5       	ldi	r24, 0x5B	; 91
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	16 c0       	rjmp	.+44     	; 0x1324 <SevSegments_displayNo+0xe0>
			break;
		case 3:
			EncodedValue = 0b01001111;
    12f8:	8f e4       	ldi	r24, 0x4F	; 79
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	13 c0       	rjmp	.+38     	; 0x1324 <SevSegments_displayNo+0xe0>
			break;
		case 4:
			EncodedValue = 0b01100110;
    12fe:	86 e6       	ldi	r24, 0x66	; 102
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	10 c0       	rjmp	.+32     	; 0x1324 <SevSegments_displayNo+0xe0>
			break;
		case 5:
			EncodedValue = 0b01101101;
    1304:	8d e6       	ldi	r24, 0x6D	; 109
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <SevSegments_displayNo+0xe0>
			break;
		case 6:
			EncodedValue = 0b01111101;
    130a:	8d e7       	ldi	r24, 0x7D	; 125
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	0a c0       	rjmp	.+20     	; 0x1324 <SevSegments_displayNo+0xe0>
			break;
		case 7:
			EncodedValue = 0b00000111;
    1310:	87 e0       	ldi	r24, 0x07	; 7
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	07 c0       	rjmp	.+14     	; 0x1324 <SevSegments_displayNo+0xe0>
			break;
		case 8:
			EncodedValue = 0b01111111;
    1316:	8f e7       	ldi	r24, 0x7F	; 127
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <SevSegments_displayNo+0xe0>
			break;
		case 9:
			EncodedValue = 0b01101111;
    131c:	8f e6       	ldi	r24, 0x6F	; 111
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <SevSegments_displayNo+0xe0>
			break;
		default:
			EncodedValue = 0b00000000;
    1322:	19 82       	std	Y+1, r1	; 0x01
			break;
	}
		#if (SEVSEGMENTS_COMMON_TYPE == SEVSEGMENTS_COMMON_CATHOD)
			DIO_setPortValue(SEVSEGMENTS_ATTACHED_PORT,EncodedValue);
    1324:	82 e0       	ldi	r24, 0x02	; 2
    1326:	69 81       	ldd	r22, Y+1	; 0x01
    1328:	0e 94 45 07 	call	0xe8a	; 0xe8a <DIO_setPortValue>
		#else
			DIO_setPortValue(SEVSEGMENTS_ATTACHED_PORT,~EncodedValue);
		#endif
	
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <LCD_init>:

/************************************************/
/* 			 this function is used to          */
/*         initialze  LCD                    */
/*********************************************/
void LCD_init(void){
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	c6 54       	subi	r28, 0x46	; 70
    1348:	d0 40       	sbci	r29, 0x00	; 0
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
#else
	/*
	 * To init LCD in 4-bit mode
	 * sequence 0x33,0x32,0x28 should be written as command
	 * */
	LCD_writeCommand(0x33); /*init*/
    1354:	83 e3       	ldi	r24, 0x33	; 51
    1356:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_writeCommand>
    135a:	fe 01       	movw	r30, r28
    135c:	ed 5b       	subi	r30, 0xBD	; 189
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a0 e8       	ldi	r26, 0x80	; 128
    1366:	bf e3       	ldi	r27, 0x3F	; 63
    1368:	80 83       	st	Z, r24
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	a2 83       	std	Z+2, r26	; 0x02
    136e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1370:	8e 01       	movw	r16, r28
    1372:	01 5c       	subi	r16, 0xC1	; 193
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    1376:	fe 01       	movw	r30, r28
    1378:	ed 5b       	subi	r30, 0xBD	; 189
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	4a ef       	ldi	r20, 0xFA	; 250
    138a:	54 e4       	ldi	r21, 0x44	; 68
    138c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	f8 01       	movw	r30, r16
    1396:	80 83       	st	Z, r24
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	a2 83       	std	Z+2, r26	; 0x02
    139c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    139e:	fe 01       	movw	r30, r28
    13a0:	ff 96       	adiw	r30, 0x3f	; 63
    13a2:	60 81       	ld	r22, Z
    13a4:	71 81       	ldd	r23, Z+1	; 0x01
    13a6:	82 81       	ldd	r24, Z+2	; 0x02
    13a8:	93 81       	ldd	r25, Z+3	; 0x03
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e8       	ldi	r20, 0x80	; 128
    13b0:	5f e3       	ldi	r21, 0x3F	; 63
    13b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b6:	88 23       	and	r24, r24
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <LCD_init+0x8a>
		__ticks = 1;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9e af       	std	Y+62, r25	; 0x3e
    13c0:	8d af       	std	Y+61, r24	; 0x3d
    13c2:	46 c0       	rjmp	.+140    	; 0x1450 <LCD_init+0x116>
	else if (__tmp > 65535)
    13c4:	fe 01       	movw	r30, r28
    13c6:	ff 96       	adiw	r30, 0x3f	; 63
    13c8:	60 81       	ld	r22, Z
    13ca:	71 81       	ldd	r23, Z+1	; 0x01
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	93 81       	ldd	r25, Z+3	; 0x03
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	3f ef       	ldi	r19, 0xFF	; 255
    13d4:	4f e7       	ldi	r20, 0x7F	; 127
    13d6:	57 e4       	ldi	r21, 0x47	; 71
    13d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13dc:	18 16       	cp	r1, r24
    13de:	64 f5       	brge	.+88     	; 0x1438 <LCD_init+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	fe 01       	movw	r30, r28
    13e2:	ed 5b       	subi	r30, 0xBD	; 189
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	60 81       	ld	r22, Z
    13e8:	71 81       	ldd	r23, Z+1	; 0x01
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	93 81       	ldd	r25, Z+3	; 0x03
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e2       	ldi	r20, 0x20	; 32
    13f4:	51 e4       	ldi	r21, 0x41	; 65
    13f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	bc 01       	movw	r22, r24
    1400:	cd 01       	movw	r24, r26
    1402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	9e af       	std	Y+62, r25	; 0x3e
    140c:	8d af       	std	Y+61, r24	; 0x3d
    140e:	0f c0       	rjmp	.+30     	; 0x142e <LCD_init+0xf4>
    1410:	88 ec       	ldi	r24, 0xC8	; 200
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9c af       	std	Y+60, r25	; 0x3c
    1416:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1418:	8b ad       	ldd	r24, Y+59	; 0x3b
    141a:	9c ad       	ldd	r25, Y+60	; 0x3c
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <LCD_init+0xe2>
    1420:	9c af       	std	Y+60, r25	; 0x3c
    1422:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1424:	8d ad       	ldd	r24, Y+61	; 0x3d
    1426:	9e ad       	ldd	r25, Y+62	; 0x3e
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	9e af       	std	Y+62, r25	; 0x3e
    142c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1430:	9e ad       	ldd	r25, Y+62	; 0x3e
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	69 f7       	brne	.-38     	; 0x1410 <LCD_init+0xd6>
    1436:	16 c0       	rjmp	.+44     	; 0x1464 <LCD_init+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1438:	fe 01       	movw	r30, r28
    143a:	ff 96       	adiw	r30, 0x3f	; 63
    143c:	60 81       	ld	r22, Z
    143e:	71 81       	ldd	r23, Z+1	; 0x01
    1440:	82 81       	ldd	r24, Z+2	; 0x02
    1442:	93 81       	ldd	r25, Z+3	; 0x03
    1444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9e af       	std	Y+62, r25	; 0x3e
    144e:	8d af       	std	Y+61, r24	; 0x3d
    1450:	8d ad       	ldd	r24, Y+61	; 0x3d
    1452:	9e ad       	ldd	r25, Y+62	; 0x3e
    1454:	9a af       	std	Y+58, r25	; 0x3a
    1456:	89 af       	std	Y+57, r24	; 0x39
    1458:	89 ad       	ldd	r24, Y+57	; 0x39
    145a:	9a ad       	ldd	r25, Y+58	; 0x3a
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <LCD_init+0x122>
    1460:	9a af       	std	Y+58, r25	; 0x3a
    1462:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	LCD_writeCommand(0x32); /*init*/
    1464:	82 e3       	ldi	r24, 0x32	; 50
    1466:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_writeCommand>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	a0 e8       	ldi	r26, 0x80	; 128
    1470:	bf e3       	ldi	r27, 0x3F	; 63
    1472:	8d ab       	std	Y+53, r24	; 0x35
    1474:	9e ab       	std	Y+54, r25	; 0x36
    1476:	af ab       	std	Y+55, r26	; 0x37
    1478:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147a:	6d a9       	ldd	r22, Y+53	; 0x35
    147c:	7e a9       	ldd	r23, Y+54	; 0x36
    147e:	8f a9       	ldd	r24, Y+55	; 0x37
    1480:	98 ad       	ldd	r25, Y+56	; 0x38
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	4a ef       	ldi	r20, 0xFA	; 250
    1488:	54 e4       	ldi	r21, 0x44	; 68
    148a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	89 ab       	std	Y+49, r24	; 0x31
    1494:	9a ab       	std	Y+50, r25	; 0x32
    1496:	ab ab       	std	Y+51, r26	; 0x33
    1498:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    149a:	69 a9       	ldd	r22, Y+49	; 0x31
    149c:	7a a9       	ldd	r23, Y+50	; 0x32
    149e:	8b a9       	ldd	r24, Y+51	; 0x33
    14a0:	9c a9       	ldd	r25, Y+52	; 0x34
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e8       	ldi	r20, 0x80	; 128
    14a8:	5f e3       	ldi	r21, 0x3F	; 63
    14aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ae:	88 23       	and	r24, r24
    14b0:	2c f4       	brge	.+10     	; 0x14bc <LCD_init+0x182>
		__ticks = 1;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	98 ab       	std	Y+48, r25	; 0x30
    14b8:	8f a7       	std	Y+47, r24	; 0x2f
    14ba:	3f c0       	rjmp	.+126    	; 0x153a <LCD_init+0x200>
	else if (__tmp > 65535)
    14bc:	69 a9       	ldd	r22, Y+49	; 0x31
    14be:	7a a9       	ldd	r23, Y+50	; 0x32
    14c0:	8b a9       	ldd	r24, Y+51	; 0x33
    14c2:	9c a9       	ldd	r25, Y+52	; 0x34
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	3f ef       	ldi	r19, 0xFF	; 255
    14c8:	4f e7       	ldi	r20, 0x7F	; 127
    14ca:	57 e4       	ldi	r21, 0x47	; 71
    14cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d0:	18 16       	cp	r1, r24
    14d2:	4c f5       	brge	.+82     	; 0x1526 <LCD_init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d4:	6d a9       	ldd	r22, Y+53	; 0x35
    14d6:	7e a9       	ldd	r23, Y+54	; 0x36
    14d8:	8f a9       	ldd	r24, Y+55	; 0x37
    14da:	98 ad       	ldd	r25, Y+56	; 0x38
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e2       	ldi	r20, 0x20	; 32
    14e2:	51 e4       	ldi	r21, 0x41	; 65
    14e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	bc 01       	movw	r22, r24
    14ee:	cd 01       	movw	r24, r26
    14f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	98 ab       	std	Y+48, r25	; 0x30
    14fa:	8f a7       	std	Y+47, r24	; 0x2f
    14fc:	0f c0       	rjmp	.+30     	; 0x151c <LCD_init+0x1e2>
    14fe:	88 ec       	ldi	r24, 0xC8	; 200
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9e a7       	std	Y+46, r25	; 0x2e
    1504:	8d a7       	std	Y+45, r24	; 0x2d
    1506:	8d a5       	ldd	r24, Y+45	; 0x2d
    1508:	9e a5       	ldd	r25, Y+46	; 0x2e
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <LCD_init+0x1d0>
    150e:	9e a7       	std	Y+46, r25	; 0x2e
    1510:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1512:	8f a5       	ldd	r24, Y+47	; 0x2f
    1514:	98 a9       	ldd	r25, Y+48	; 0x30
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	98 ab       	std	Y+48, r25	; 0x30
    151a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151c:	8f a5       	ldd	r24, Y+47	; 0x2f
    151e:	98 a9       	ldd	r25, Y+48	; 0x30
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	69 f7       	brne	.-38     	; 0x14fe <LCD_init+0x1c4>
    1524:	14 c0       	rjmp	.+40     	; 0x154e <LCD_init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1526:	69 a9       	ldd	r22, Y+49	; 0x31
    1528:	7a a9       	ldd	r23, Y+50	; 0x32
    152a:	8b a9       	ldd	r24, Y+51	; 0x33
    152c:	9c a9       	ldd	r25, Y+52	; 0x34
    152e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	98 ab       	std	Y+48, r25	; 0x30
    1538:	8f a7       	std	Y+47, r24	; 0x2f
    153a:	8f a5       	ldd	r24, Y+47	; 0x2f
    153c:	98 a9       	ldd	r25, Y+48	; 0x30
    153e:	9c a7       	std	Y+44, r25	; 0x2c
    1540:	8b a7       	std	Y+43, r24	; 0x2b
    1542:	8b a5       	ldd	r24, Y+43	; 0x2b
    1544:	9c a5       	ldd	r25, Y+44	; 0x2c
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <LCD_init+0x20c>
    154a:	9c a7       	std	Y+44, r25	; 0x2c
    154c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_writeCommand(0x28); /*init. LCD 2 line, 5x7 matrix*/
    154e:	88 e2       	ldi	r24, 0x28	; 40
    1550:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_writeCommand>
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	a0 e8       	ldi	r26, 0x80	; 128
    155a:	bf e3       	ldi	r27, 0x3F	; 63
    155c:	8f a3       	std	Y+39, r24	; 0x27
    155e:	98 a7       	std	Y+40, r25	; 0x28
    1560:	a9 a7       	std	Y+41, r26	; 0x29
    1562:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1564:	6f a1       	ldd	r22, Y+39	; 0x27
    1566:	78 a5       	ldd	r23, Y+40	; 0x28
    1568:	89 a5       	ldd	r24, Y+41	; 0x29
    156a:	9a a5       	ldd	r25, Y+42	; 0x2a
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	4a ef       	ldi	r20, 0xFA	; 250
    1572:	54 e4       	ldi	r21, 0x44	; 68
    1574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	8b a3       	std	Y+35, r24	; 0x23
    157e:	9c a3       	std	Y+36, r25	; 0x24
    1580:	ad a3       	std	Y+37, r26	; 0x25
    1582:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1584:	6b a1       	ldd	r22, Y+35	; 0x23
    1586:	7c a1       	ldd	r23, Y+36	; 0x24
    1588:	8d a1       	ldd	r24, Y+37	; 0x25
    158a:	9e a1       	ldd	r25, Y+38	; 0x26
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e8       	ldi	r20, 0x80	; 128
    1592:	5f e3       	ldi	r21, 0x3F	; 63
    1594:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1598:	88 23       	and	r24, r24
    159a:	2c f4       	brge	.+10     	; 0x15a6 <LCD_init+0x26c>
		__ticks = 1;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9a a3       	std	Y+34, r25	; 0x22
    15a2:	89 a3       	std	Y+33, r24	; 0x21
    15a4:	3f c0       	rjmp	.+126    	; 0x1624 <LCD_init+0x2ea>
	else if (__tmp > 65535)
    15a6:	6b a1       	ldd	r22, Y+35	; 0x23
    15a8:	7c a1       	ldd	r23, Y+36	; 0x24
    15aa:	8d a1       	ldd	r24, Y+37	; 0x25
    15ac:	9e a1       	ldd	r25, Y+38	; 0x26
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	3f ef       	ldi	r19, 0xFF	; 255
    15b2:	4f e7       	ldi	r20, 0x7F	; 127
    15b4:	57 e4       	ldi	r21, 0x47	; 71
    15b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ba:	18 16       	cp	r1, r24
    15bc:	4c f5       	brge	.+82     	; 0x1610 <LCD_init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15be:	6f a1       	ldd	r22, Y+39	; 0x27
    15c0:	78 a5       	ldd	r23, Y+40	; 0x28
    15c2:	89 a5       	ldd	r24, Y+41	; 0x29
    15c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e2       	ldi	r20, 0x20	; 32
    15cc:	51 e4       	ldi	r21, 0x41	; 65
    15ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	bc 01       	movw	r22, r24
    15d8:	cd 01       	movw	r24, r26
    15da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	9a a3       	std	Y+34, r25	; 0x22
    15e4:	89 a3       	std	Y+33, r24	; 0x21
    15e6:	0f c0       	rjmp	.+30     	; 0x1606 <LCD_init+0x2cc>
    15e8:	88 ec       	ldi	r24, 0xC8	; 200
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	98 a3       	std	Y+32, r25	; 0x20
    15ee:	8f 8f       	std	Y+31, r24	; 0x1f
    15f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15f2:	98 a1       	ldd	r25, Y+32	; 0x20
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <LCD_init+0x2ba>
    15f8:	98 a3       	std	Y+32, r25	; 0x20
    15fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fc:	89 a1       	ldd	r24, Y+33	; 0x21
    15fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	9a a3       	std	Y+34, r25	; 0x22
    1604:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1606:	89 a1       	ldd	r24, Y+33	; 0x21
    1608:	9a a1       	ldd	r25, Y+34	; 0x22
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	69 f7       	brne	.-38     	; 0x15e8 <LCD_init+0x2ae>
    160e:	14 c0       	rjmp	.+40     	; 0x1638 <LCD_init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1610:	6b a1       	ldd	r22, Y+35	; 0x23
    1612:	7c a1       	ldd	r23, Y+36	; 0x24
    1614:	8d a1       	ldd	r24, Y+37	; 0x25
    1616:	9e a1       	ldd	r25, Y+38	; 0x26
    1618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9a a3       	std	Y+34, r25	; 0x22
    1622:	89 a3       	std	Y+33, r24	; 0x21
    1624:	89 a1       	ldd	r24, Y+33	; 0x21
    1626:	9a a1       	ldd	r25, Y+34	; 0x22
    1628:	9e 8f       	std	Y+30, r25	; 0x1e
    162a:	8d 8f       	std	Y+29, r24	; 0x1d
    162c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    162e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <LCD_init+0x2f6>
    1634:	9e 8f       	std	Y+30, r25	; 0x1e
    1636:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#endif

	LCD_writeCommand(0x0E); /*display on, cursor on*/
    1638:	8e e0       	ldi	r24, 0x0E	; 14
    163a:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_writeCommand>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	a0 e8       	ldi	r26, 0x80	; 128
    1644:	bf e3       	ldi	r27, 0x3F	; 63
    1646:	89 8f       	std	Y+25, r24	; 0x19
    1648:	9a 8f       	std	Y+26, r25	; 0x1a
    164a:	ab 8f       	std	Y+27, r26	; 0x1b
    164c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164e:	69 8d       	ldd	r22, Y+25	; 0x19
    1650:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1652:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1654:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	4a ef       	ldi	r20, 0xFA	; 250
    165c:	54 e4       	ldi	r21, 0x44	; 68
    165e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	8d 8b       	std	Y+21, r24	; 0x15
    1668:	9e 8b       	std	Y+22, r25	; 0x16
    166a:	af 8b       	std	Y+23, r26	; 0x17
    166c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    166e:	6d 89       	ldd	r22, Y+21	; 0x15
    1670:	7e 89       	ldd	r23, Y+22	; 0x16
    1672:	8f 89       	ldd	r24, Y+23	; 0x17
    1674:	98 8d       	ldd	r25, Y+24	; 0x18
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	2c f4       	brge	.+10     	; 0x1690 <LCD_init+0x356>
		__ticks = 1;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9c 8b       	std	Y+20, r25	; 0x14
    168c:	8b 8b       	std	Y+19, r24	; 0x13
    168e:	3f c0       	rjmp	.+126    	; 0x170e <LCD_init+0x3d4>
	else if (__tmp > 65535)
    1690:	6d 89       	ldd	r22, Y+21	; 0x15
    1692:	7e 89       	ldd	r23, Y+22	; 0x16
    1694:	8f 89       	ldd	r24, Y+23	; 0x17
    1696:	98 8d       	ldd	r25, Y+24	; 0x18
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	4f e7       	ldi	r20, 0x7F	; 127
    169e:	57 e4       	ldi	r21, 0x47	; 71
    16a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	4c f5       	brge	.+82     	; 0x16fa <LCD_init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a8:	69 8d       	ldd	r22, Y+25	; 0x19
    16aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e2       	ldi	r20, 0x20	; 32
    16b6:	51 e4       	ldi	r21, 0x41	; 65
    16b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9c 8b       	std	Y+20, r25	; 0x14
    16ce:	8b 8b       	std	Y+19, r24	; 0x13
    16d0:	0f c0       	rjmp	.+30     	; 0x16f0 <LCD_init+0x3b6>
    16d2:	88 ec       	ldi	r24, 0xC8	; 200
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9a 8b       	std	Y+18, r25	; 0x12
    16d8:	89 8b       	std	Y+17, r24	; 0x11
    16da:	89 89       	ldd	r24, Y+17	; 0x11
    16dc:	9a 89       	ldd	r25, Y+18	; 0x12
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <LCD_init+0x3a4>
    16e2:	9a 8b       	std	Y+18, r25	; 0x12
    16e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	8b 89       	ldd	r24, Y+19	; 0x13
    16e8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	9c 8b       	std	Y+20, r25	; 0x14
    16ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f0:	8b 89       	ldd	r24, Y+19	; 0x13
    16f2:	9c 89       	ldd	r25, Y+20	; 0x14
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	69 f7       	brne	.-38     	; 0x16d2 <LCD_init+0x398>
    16f8:	14 c0       	rjmp	.+40     	; 0x1722 <LCD_init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fa:	6d 89       	ldd	r22, Y+21	; 0x15
    16fc:	7e 89       	ldd	r23, Y+22	; 0x16
    16fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1700:	98 8d       	ldd	r25, Y+24	; 0x18
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9c 8b       	std	Y+20, r25	; 0x14
    170c:	8b 8b       	std	Y+19, r24	; 0x13
    170e:	8b 89       	ldd	r24, Y+19	; 0x13
    1710:	9c 89       	ldd	r25, Y+20	; 0x14
    1712:	98 8b       	std	Y+16, r25	; 0x10
    1714:	8f 87       	std	Y+15, r24	; 0x0f
    1716:	8f 85       	ldd	r24, Y+15	; 0x0f
    1718:	98 89       	ldd	r25, Y+16	; 0x10
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <LCD_init+0x3e0>
    171e:	98 8b       	std	Y+16, r25	; 0x10
    1720:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	LCD_writeCommand(0x01); /*clear LCD*/
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_writeCommand>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a0 e0       	ldi	r26, 0x00	; 0
    172e:	b0 e4       	ldi	r27, 0x40	; 64
    1730:	8b 87       	std	Y+11, r24	; 0x0b
    1732:	9c 87       	std	Y+12, r25	; 0x0c
    1734:	ad 87       	std	Y+13, r26	; 0x0d
    1736:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1738:	6b 85       	ldd	r22, Y+11	; 0x0b
    173a:	7c 85       	ldd	r23, Y+12	; 0x0c
    173c:	8d 85       	ldd	r24, Y+13	; 0x0d
    173e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	4a ef       	ldi	r20, 0xFA	; 250
    1746:	54 e4       	ldi	r21, 0x44	; 68
    1748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	8f 83       	std	Y+7, r24	; 0x07
    1752:	98 87       	std	Y+8, r25	; 0x08
    1754:	a9 87       	std	Y+9, r26	; 0x09
    1756:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1758:	6f 81       	ldd	r22, Y+7	; 0x07
    175a:	78 85       	ldd	r23, Y+8	; 0x08
    175c:	89 85       	ldd	r24, Y+9	; 0x09
    175e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e8       	ldi	r20, 0x80	; 128
    1766:	5f e3       	ldi	r21, 0x3F	; 63
    1768:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    176c:	88 23       	and	r24, r24
    176e:	2c f4       	brge	.+10     	; 0x177a <LCD_init+0x440>
		__ticks = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	3f c0       	rjmp	.+126    	; 0x17f8 <LCD_init+0x4be>
	else if (__tmp > 65535)
    177a:	6f 81       	ldd	r22, Y+7	; 0x07
    177c:	78 85       	ldd	r23, Y+8	; 0x08
    177e:	89 85       	ldd	r24, Y+9	; 0x09
    1780:	9a 85       	ldd	r25, Y+10	; 0x0a
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	57 e4       	ldi	r21, 0x47	; 71
    178a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	4c f5       	brge	.+82     	; 0x17e4 <LCD_init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	6b 85       	ldd	r22, Y+11	; 0x0b
    1794:	7c 85       	ldd	r23, Y+12	; 0x0c
    1796:	8d 85       	ldd	r24, Y+13	; 0x0d
    1798:	9e 85       	ldd	r25, Y+14	; 0x0e
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	9e 83       	std	Y+6, r25	; 0x06
    17b8:	8d 83       	std	Y+5, r24	; 0x05
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <LCD_init+0x4a0>
    17bc:	88 ec       	ldi	r24, 0xC8	; 200
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9c 83       	std	Y+4, r25	; 0x04
    17c2:	8b 83       	std	Y+3, r24	; 0x03
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <LCD_init+0x48e>
    17cc:	9c 83       	std	Y+4, r25	; 0x04
    17ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	9e 81       	ldd	r25, Y+6	; 0x06
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	69 f7       	brne	.-38     	; 0x17bc <LCD_init+0x482>
    17e2:	14 c0       	rjmp	.+40     	; 0x180c <LCD_init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e4:	6f 81       	ldd	r22, Y+7	; 0x07
    17e6:	78 85       	ldd	r23, Y+8	; 0x08
    17e8:	89 85       	ldd	r24, Y+9	; 0x09
    17ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	8d 83       	std	Y+5, r24	; 0x05
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	9a 83       	std	Y+2, r25	; 0x02
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_init+0x4ca>
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    180c:	ca 5b       	subi	r28, 0xBA	; 186
    180e:	df 4f       	sbci	r29, 0xFF	; 255
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	08 95       	ret

00001824 <LCD_wrtiteData>:

/************************************************/
/* 			 this function is used to          */
/*         write data on LCD                  */
/*********************************************/
void LCD_wrtiteData(u8 u8DataCpy){
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	0f 92       	push	r0
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	89 83       	std	Y+1, r24	; 0x01

	/* set RS to high  */
	DIO_setPinValue(LCD_u8_RS_PIN,DIO_Pin_high);
    1830:	80 e1       	ldi	r24, 0x10	; 16
    1832:	61 e0       	ldi	r22, 0x01	; 1
    1834:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	/* Execute command */
	voidLcdExecute(u8DataCpy);
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <voidLcdExecute>
}
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <LCD_writeCommand>:

/********************************************* ***/
/* 			 this function is used to           */
/*         execute LCD command                 */
/**********************************************/
void LCD_writeCommand(u8 u8CommandCpy){
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	0f 92       	push	r0
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	89 83       	std	Y+1, r24	; 0x01

	/* set RS to LOW */
	DIO_setPinValue(LCD_u8_RS_PIN,DIO_Pin_low);
    1852:	80 e1       	ldi	r24, 0x10	; 16
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	/* Execute command */
	voidLcdExecute(u8CommandCpy);
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <voidLcdExecute>
}
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <LCD_writeString>:

void LCD_writeString(u8 *ptr, u8 xpos, u8 ypos)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	00 d0       	rcall	.+0      	; 0x186e <LCD_writeString+0x6>
    186e:	00 d0       	rcall	.+0      	; 0x1870 <LCD_writeString+0x8>
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	9a 83       	std	Y+2, r25	; 0x02
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	6b 83       	std	Y+3, r22	; 0x03
    187a:	4c 83       	std	Y+4, r20	; 0x04
	/*cmd to move cursor*/
	LCD_writeCommand((0x80 | ypos<<6 | xpos));
    187c:	8c 81       	ldd	r24, Y+4	; 0x04
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	00 24       	eor	r0, r0
    1884:	96 95       	lsr	r25
    1886:	87 95       	ror	r24
    1888:	07 94       	ror	r0
    188a:	96 95       	lsr	r25
    188c:	87 95       	ror	r24
    188e:	07 94       	ror	r0
    1890:	98 2f       	mov	r25, r24
    1892:	80 2d       	mov	r24, r0
    1894:	98 2f       	mov	r25, r24
    1896:	90 68       	ori	r25, 0x80	; 128
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	89 2b       	or	r24, r25
    189c:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_writeCommand>
    18a0:	0a c0       	rjmp	.+20     	; 0x18b6 <LCD_writeString+0x4e>

	while(*ptr !='\0')
	{
		LCD_wrtiteData(*ptr);
    18a2:	e9 81       	ldd	r30, Y+1	; 0x01
    18a4:	fa 81       	ldd	r31, Y+2	; 0x02
    18a6:	80 81       	ld	r24, Z
    18a8:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_wrtiteData>
		ptr++;
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	89 83       	std	Y+1, r24	; 0x01
void LCD_writeString(u8 *ptr, u8 xpos, u8 ypos)
{
	/*cmd to move cursor*/
	LCD_writeCommand((0x80 | ypos<<6 | xpos));

	while(*ptr !='\0')
    18b6:	e9 81       	ldd	r30, Y+1	; 0x01
    18b8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ba:	80 81       	ld	r24, Z
    18bc:	88 23       	and	r24, r24
    18be:	89 f7       	brne	.-30     	; 0x18a2 <LCD_writeString+0x3a>
	{
		LCD_wrtiteData(*ptr);
		ptr++;
	}
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <LCD_clear>:
void LCD_clear()
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(LCD_u8_RS_PIN,DIO_Pin_low);
    18d6:	80 e1       	ldi	r24, 0x10	; 16
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_RW_PIN,DIO_Pin_low);
    18de:	81 e1       	ldi	r24, 0x11	; 17
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	LCD_writeCommand(0b00000001);
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_writeCommand>
	//	_delay_ms(1.5);
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <LCD_savePattern>:

void LCD_savePattern(u8 *ptrPatternCpy,u8 u8CGRAMAddrCpy){
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <LCD_savePattern+0x6>
    18f8:	0f 92       	push	r0
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	6b 83       	std	Y+3, r22	; 0x03
	/*NOTE: step in CGRAM = 8 */
	u8CGRAMAddrCpy *= 8;
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	8b 83       	std	Y+3, r24	; 0x03
	/*set CGRAM Address*/
	LCD_writeCommand(0b01000000 | u8CGRAMAddrCpy );
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	80 64       	ori	r24, 0x40	; 64
    191c:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_writeCommand>

	LCD_wrtiteData(ptrPatternCpy[0]);
    1920:	e9 81       	ldd	r30, Y+1	; 0x01
    1922:	fa 81       	ldd	r31, Y+2	; 0x02
    1924:	80 81       	ld	r24, Z
    1926:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_wrtiteData>
	LCD_wrtiteData(ptrPatternCpy[1]);
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	fc 01       	movw	r30, r24
    1930:	31 96       	adiw	r30, 0x01	; 1
    1932:	80 81       	ld	r24, Z
    1934:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_wrtiteData>
	LCD_wrtiteData(ptrPatternCpy[2]);
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	fc 01       	movw	r30, r24
    193e:	32 96       	adiw	r30, 0x02	; 2
    1940:	80 81       	ld	r24, Z
    1942:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_wrtiteData>
	LCD_wrtiteData(ptrPatternCpy[3]);
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	fc 01       	movw	r30, r24
    194c:	33 96       	adiw	r30, 0x03	; 3
    194e:	80 81       	ld	r24, Z
    1950:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_wrtiteData>
	LCD_wrtiteData(ptrPatternCpy[4]);
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	fc 01       	movw	r30, r24
    195a:	34 96       	adiw	r30, 0x04	; 4
    195c:	80 81       	ld	r24, Z
    195e:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_wrtiteData>
	LCD_wrtiteData(ptrPatternCpy[5]);
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	fc 01       	movw	r30, r24
    1968:	35 96       	adiw	r30, 0x05	; 5
    196a:	80 81       	ld	r24, Z
    196c:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_wrtiteData>
	LCD_wrtiteData(ptrPatternCpy[6]);
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	fc 01       	movw	r30, r24
    1976:	36 96       	adiw	r30, 0x06	; 6
    1978:	80 81       	ld	r24, Z
    197a:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_wrtiteData>
	LCD_wrtiteData(ptrPatternCpy[7]);
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	fc 01       	movw	r30, r24
    1984:	37 96       	adiw	r30, 0x07	; 7
    1986:	80 81       	ld	r24, Z
    1988:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_wrtiteData>

}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <LCD_displayPattern>:

void LCD_displayPattern(u8 u8CGRAMAddrCpy,  u8 xpos, u8 ypos){
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <LCD_displayPattern+0x6>
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	6a 83       	std	Y+2, r22	; 0x02
    19a8:	4b 83       	std	Y+3, r20	; 0x03
	/*set DDRAM address*/
	LCD_writeCommand((0x80 | ypos<<6 | xpos));
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	00 24       	eor	r0, r0
    19b2:	96 95       	lsr	r25
    19b4:	87 95       	ror	r24
    19b6:	07 94       	ror	r0
    19b8:	96 95       	lsr	r25
    19ba:	87 95       	ror	r24
    19bc:	07 94       	ror	r0
    19be:	98 2f       	mov	r25, r24
    19c0:	80 2d       	mov	r24, r0
    19c2:	98 2f       	mov	r25, r24
    19c4:	90 68       	ori	r25, 0x80	; 128
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	89 2b       	or	r24, r25
    19ca:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_writeCommand>
	LCD_wrtiteData(u8CGRAMAddrCpy);
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_wrtiteData>
}
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <voidLcdExecute>:


static void voidLcdExecute(u8 u8ValueCpy){
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	6d 97       	sbiw	r28, 0x1d	; 29
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	8d 8f       	std	Y+29, r24	; 0x1d

	/*set RW to low */
	DIO_setPinValue(LCD_u8_RW_PIN,DIO_Pin_low);
    19f6:	81 e1       	ldi	r24, 0x11	; 17
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_2,  GET_BIT(u8ValueCpy,2));
	DIO_setPinValue(LCD_u8_DATA_PIN_3,  GET_BIT(u8ValueCpy,3));
#endif


	DIO_setPinValue(LCD_u8_DATA_PIN_4,  GET_BIT(u8ValueCpy,4));
    19fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	80 71       	andi	r24, 0x10	; 16
    1a06:	90 70       	andi	r25, 0x00	; 0
    1a08:	95 95       	asr	r25
    1a0a:	87 95       	ror	r24
    1a0c:	95 95       	asr	r25
    1a0e:	87 95       	ror	r24
    1a10:	95 95       	asr	r25
    1a12:	87 95       	ror	r24
    1a14:	95 95       	asr	r25
    1a16:	87 95       	ror	r24
    1a18:	98 2f       	mov	r25, r24
    1a1a:	8c e1       	ldi	r24, 0x1C	; 28
    1a1c:	69 2f       	mov	r22, r25
    1a1e:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_5,  GET_BIT(u8ValueCpy,5));
    1a22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	80 72       	andi	r24, 0x20	; 32
    1a2a:	90 70       	andi	r25, 0x00	; 0
    1a2c:	95 95       	asr	r25
    1a2e:	87 95       	ror	r24
    1a30:	95 95       	asr	r25
    1a32:	87 95       	ror	r24
    1a34:	95 95       	asr	r25
    1a36:	87 95       	ror	r24
    1a38:	95 95       	asr	r25
    1a3a:	87 95       	ror	r24
    1a3c:	95 95       	asr	r25
    1a3e:	87 95       	ror	r24
    1a40:	98 2f       	mov	r25, r24
    1a42:	8d e1       	ldi	r24, 0x1D	; 29
    1a44:	69 2f       	mov	r22, r25
    1a46:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_6,  GET_BIT(u8ValueCpy,6));
    1a4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	80 74       	andi	r24, 0x40	; 64
    1a52:	90 70       	andi	r25, 0x00	; 0
    1a54:	08 2e       	mov	r0, r24
    1a56:	89 2f       	mov	r24, r25
    1a58:	00 0c       	add	r0, r0
    1a5a:	88 1f       	adc	r24, r24
    1a5c:	99 0b       	sbc	r25, r25
    1a5e:	00 0c       	add	r0, r0
    1a60:	88 1f       	adc	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	98 2f       	mov	r25, r24
    1a66:	8e e1       	ldi	r24, 0x1E	; 30
    1a68:	69 2f       	mov	r22, r25
    1a6a:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_7,  GET_BIT(u8ValueCpy,7));
    1a6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a70:	98 2f       	mov	r25, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	99 27       	eor	r25, r25
    1a76:	99 1f       	adc	r25, r25
    1a78:	8f e1       	ldi	r24, 0x1F	; 31
    1a7a:	69 2f       	mov	r22, r25
    1a7c:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>

	/* set ENABLE high */
	DIO_setPinValue(LCD_u8_E_PIN,DIO_Pin_high);
    1a80:	82 e1       	ldi	r24, 0x12	; 18
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e8       	ldi	r26, 0x80	; 128
    1a8e:	bf e3       	ldi	r27, 0x3F	; 63
    1a90:	89 8f       	std	Y+25, r24	; 0x19
    1a92:	9a 8f       	std	Y+26, r25	; 0x1a
    1a94:	ab 8f       	std	Y+27, r26	; 0x1b
    1a96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a98:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	4a ef       	ldi	r20, 0xFA	; 250
    1aa6:	54 e4       	ldi	r21, 0x44	; 68
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	8d 8b       	std	Y+21, r24	; 0x15
    1ab2:	9e 8b       	std	Y+22, r25	; 0x16
    1ab4:	af 8b       	std	Y+23, r26	; 0x17
    1ab6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aba:	7e 89       	ldd	r23, Y+22	; 0x16
    1abc:	8f 89       	ldd	r24, Y+23	; 0x17
    1abe:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e8       	ldi	r20, 0x80	; 128
    1ac6:	5f e3       	ldi	r21, 0x3F	; 63
    1ac8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1acc:	88 23       	and	r24, r24
    1ace:	2c f4       	brge	.+10     	; 0x1ada <voidLcdExecute+0xfa>
		__ticks = 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9c 8b       	std	Y+20, r25	; 0x14
    1ad6:	8b 8b       	std	Y+19, r24	; 0x13
    1ad8:	3f c0       	rjmp	.+126    	; 0x1b58 <voidLcdExecute+0x178>
	else if (__tmp > 65535)
    1ada:	6d 89       	ldd	r22, Y+21	; 0x15
    1adc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ade:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	3f ef       	ldi	r19, 0xFF	; 255
    1ae6:	4f e7       	ldi	r20, 0x7F	; 127
    1ae8:	57 e4       	ldi	r21, 0x47	; 71
    1aea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aee:	18 16       	cp	r1, r24
    1af0:	4c f5       	brge	.+82     	; 0x1b44 <voidLcdExecute+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af2:	69 8d       	ldd	r22, Y+25	; 0x19
    1af4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e2       	ldi	r20, 0x20	; 32
    1b00:	51 e4       	ldi	r21, 0x41	; 65
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	cd 01       	movw	r24, r26
    1b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	9c 8b       	std	Y+20, r25	; 0x14
    1b18:	8b 8b       	std	Y+19, r24	; 0x13
    1b1a:	0f c0       	rjmp	.+30     	; 0x1b3a <voidLcdExecute+0x15a>
    1b1c:	88 ec       	ldi	r24, 0xC8	; 200
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	9a 8b       	std	Y+18, r25	; 0x12
    1b22:	89 8b       	std	Y+17, r24	; 0x11
    1b24:	89 89       	ldd	r24, Y+17	; 0x11
    1b26:	9a 89       	ldd	r25, Y+18	; 0x12
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <voidLcdExecute+0x148>
    1b2c:	9a 8b       	std	Y+18, r25	; 0x12
    1b2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b30:	8b 89       	ldd	r24, Y+19	; 0x13
    1b32:	9c 89       	ldd	r25, Y+20	; 0x14
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	9c 8b       	std	Y+20, r25	; 0x14
    1b38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	69 f7       	brne	.-38     	; 0x1b1c <voidLcdExecute+0x13c>
    1b42:	14 c0       	rjmp	.+40     	; 0x1b6c <voidLcdExecute+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b44:	6d 89       	ldd	r22, Y+21	; 0x15
    1b46:	7e 89       	ldd	r23, Y+22	; 0x16
    1b48:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9c 8b       	std	Y+20, r25	; 0x14
    1b56:	8b 8b       	std	Y+19, r24	; 0x13
    1b58:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5c:	98 8b       	std	Y+16, r25	; 0x10
    1b5e:	8f 87       	std	Y+15, r24	; 0x0f
    1b60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b62:	98 89       	ldd	r25, Y+16	; 0x10
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <voidLcdExecute+0x184>
    1b68:	98 8b       	std	Y+16, r25	; 0x10
    1b6a:	8f 87       	std	Y+15, r24	; 0x0f
	/* Delay 1 ms */
	_delay_ms(1);
	/*set Enable LOW */
	DIO_setPinValue(LCD_u8_E_PIN,DIO_Pin_low);
    1b6c:	82 e1       	ldi	r24, 0x12	; 18
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>



#if (LCD_MODE_PINS_NO == LCD_MODE_PINS_4)

	DIO_setPinValue(LCD_u8_DATA_PIN_4,  GET_BIT(u8ValueCpy,0));
    1b74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b76:	98 2f       	mov	r25, r24
    1b78:	91 70       	andi	r25, 0x01	; 1
    1b7a:	8c e1       	ldi	r24, 0x1C	; 28
    1b7c:	69 2f       	mov	r22, r25
    1b7e:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_5,  GET_BIT(u8ValueCpy,1));
    1b82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	82 70       	andi	r24, 0x02	; 2
    1b8a:	90 70       	andi	r25, 0x00	; 0
    1b8c:	95 95       	asr	r25
    1b8e:	87 95       	ror	r24
    1b90:	98 2f       	mov	r25, r24
    1b92:	8d e1       	ldi	r24, 0x1D	; 29
    1b94:	69 2f       	mov	r22, r25
    1b96:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_6,  GET_BIT(u8ValueCpy,2));
    1b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	84 70       	andi	r24, 0x04	; 4
    1ba2:	90 70       	andi	r25, 0x00	; 0
    1ba4:	95 95       	asr	r25
    1ba6:	87 95       	ror	r24
    1ba8:	95 95       	asr	r25
    1baa:	87 95       	ror	r24
    1bac:	98 2f       	mov	r25, r24
    1bae:	8e e1       	ldi	r24, 0x1E	; 30
    1bb0:	69 2f       	mov	r22, r25
    1bb2:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(LCD_u8_DATA_PIN_7,  GET_BIT(u8ValueCpy,3));
    1bb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	88 70       	andi	r24, 0x08	; 8
    1bbe:	90 70       	andi	r25, 0x00	; 0
    1bc0:	95 95       	asr	r25
    1bc2:	87 95       	ror	r24
    1bc4:	95 95       	asr	r25
    1bc6:	87 95       	ror	r24
    1bc8:	95 95       	asr	r25
    1bca:	87 95       	ror	r24
    1bcc:	98 2f       	mov	r25, r24
    1bce:	8f e1       	ldi	r24, 0x1F	; 31
    1bd0:	69 2f       	mov	r22, r25
    1bd2:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>

	/* set ENABLE high */
	DIO_setPinValue(LCD_u8_E_PIN,DIO_Pin_high);
    1bd6:	82 e1       	ldi	r24, 0x12	; 18
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 e8       	ldi	r26, 0x80	; 128
    1be4:	bf e3       	ldi	r27, 0x3F	; 63
    1be6:	8b 87       	std	Y+11, r24	; 0x0b
    1be8:	9c 87       	std	Y+12, r25	; 0x0c
    1bea:	ad 87       	std	Y+13, r26	; 0x0d
    1bec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	8f 83       	std	Y+7, r24	; 0x07
    1c08:	98 87       	std	Y+8, r25	; 0x08
    1c0a:	a9 87       	std	Y+9, r26	; 0x09
    1c0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c22:	88 23       	and	r24, r24
    1c24:	2c f4       	brge	.+10     	; 0x1c30 <voidLcdExecute+0x250>
		__ticks = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	3f c0       	rjmp	.+126    	; 0x1cae <voidLcdExecute+0x2ce>
	else if (__tmp > 65535)
    1c30:	6f 81       	ldd	r22, Y+7	; 0x07
    1c32:	78 85       	ldd	r23, Y+8	; 0x08
    1c34:	89 85       	ldd	r24, Y+9	; 0x09
    1c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	4f e7       	ldi	r20, 0x7F	; 127
    1c3e:	57 e4       	ldi	r21, 0x47	; 71
    1c40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c44:	18 16       	cp	r1, r24
    1c46:	4c f5       	brge	.+82     	; 0x1c9a <voidLcdExecute+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e2       	ldi	r20, 0x20	; 32
    1c56:	51 e4       	ldi	r21, 0x41	; 65
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <voidLcdExecute+0x2b0>
    1c72:	88 ec       	ldi	r24, 0xC8	; 200
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9c 83       	std	Y+4, r25	; 0x04
    1c78:	8b 83       	std	Y+3, r24	; 0x03
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <voidLcdExecute+0x29e>
    1c82:	9c 83       	std	Y+4, r25	; 0x04
    1c84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	69 f7       	brne	.-38     	; 0x1c72 <voidLcdExecute+0x292>
    1c98:	14 c0       	rjmp	.+40     	; 0x1cc2 <voidLcdExecute+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9c:	78 85       	ldd	r23, Y+8	; 0x08
    1c9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <voidLcdExecute+0x2da>
    1cbe:	9a 83       	std	Y+2, r25	; 0x02
    1cc0:	89 83       	std	Y+1, r24	; 0x01
	/* Delay 1 ms */
	_delay_ms(1);
	/*set Enable LOW */
	DIO_setPinValue(LCD_u8_E_PIN,DIO_Pin_low);
    1cc2:	82 e1       	ldi	r24, 0x12	; 18
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>

#endif

}
    1cca:	6d 96       	adiw	r28, 0x1d	; 29
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <Keypad_init>:
#include "Keypad_config.h"
#include "Keypad.h"
static u8 Keypad_PressedButton = 0; 

void Keypad_init(void)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(KEYPAD_PIN_COL0,DIO_Pin_high);
    1ce4:	84 e0       	ldi	r24, 0x04	; 4
    1ce6:	61 e0       	ldi	r22, 0x01	; 1
    1ce8:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_COL1,DIO_Pin_high);
    1cec:	85 e0       	ldi	r24, 0x05	; 5
    1cee:	61 e0       	ldi	r22, 0x01	; 1
    1cf0:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_COL2,DIO_Pin_high);
    1cf4:	86 e0       	ldi	r24, 0x06	; 6
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_COL3,DIO_Pin_high);
    1cfc:	87 e0       	ldi	r24, 0x07	; 7
    1cfe:	61 e0       	ldi	r22, 0x01	; 1
    1d00:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	
}
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <Keypad_checKCol>:

static void Keypad_checKCol(u8 ActiveRowNo)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	0f 92       	push	r0
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_getPinValue(KEYPAD_PIN_COL0) == DIO_Pin_low)
    1d16:	84 e0       	ldi	r24, 0x04	; 4
    1d18:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_getPinValue>
    1d1c:	88 23       	and	r24, r24
    1d1e:	51 f4       	brne	.+20     	; 0x1d34 <Keypad_checKCol+0x2a>
	{
		Keypad_PressedButton = ActiveRowNo*4;
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	80 93 70 00 	sts	0x0070, r24
    1d32:	2f c0       	rjmp	.+94     	; 0x1d92 <Keypad_checKCol+0x88>
	}
	else if(DIO_getPinValue(KEYPAD_PIN_COL1) == DIO_Pin_low)
    1d34:	85 e0       	ldi	r24, 0x05	; 5
    1d36:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_getPinValue>
    1d3a:	88 23       	and	r24, r24
    1d3c:	59 f4       	brne	.+22     	; 0x1d54 <Keypad_checKCol+0x4a>
	{
		Keypad_PressedButton = (ActiveRowNo*4)+1;
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	88 2f       	mov	r24, r24
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	80 93 70 00 	sts	0x0070, r24
    1d52:	1f c0       	rjmp	.+62     	; 0x1d92 <Keypad_checKCol+0x88>
	}
	else if(DIO_getPinValue(KEYPAD_PIN_COL2) == DIO_Pin_low)
    1d54:	86 e0       	ldi	r24, 0x06	; 6
    1d56:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_getPinValue>
    1d5a:	88 23       	and	r24, r24
    1d5c:	59 f4       	brne	.+22     	; 0x1d74 <Keypad_checKCol+0x6a>
	{
		Keypad_PressedButton = (ActiveRowNo*4)+2;
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	80 93 70 00 	sts	0x0070, r24
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <Keypad_checKCol+0x88>
	}
	else if(DIO_getPinValue(KEYPAD_PIN_COL3) == DIO_Pin_low)
    1d74:	87 e0       	ldi	r24, 0x07	; 7
    1d76:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_getPinValue>
    1d7a:	88 23       	and	r24, r24
    1d7c:	51 f4       	brne	.+20     	; 0x1d92 <Keypad_checKCol+0x88>
	{
		Keypad_PressedButton = (ActiveRowNo*4)+3;
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	8d 5f       	subi	r24, 0xFD	; 253
    1d8e:	80 93 70 00 	sts	0x0070, r24
	}
}
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <Keypad_getPressedButton>:

u8 Keypad_getPressedButton(void)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
	Keypad_PressedButton = -1;
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	80 93 70 00 	sts	0x0070, r24
	/*row0 activated*/
	DIO_setPinValue(KEYPAD_PIN_R0,DIO_Pin_low); /*activate*/
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R1,DIO_Pin_high);
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R2,DIO_Pin_high);
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	61 e0       	ldi	r22, 0x01	; 1
    1dbc:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R3,DIO_Pin_high);
    1dc0:	83 e0       	ldi	r24, 0x03	; 3
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	Keypad_checKCol(0);
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <Keypad_checKCol>
	
	/*row1 activated*/
	DIO_setPinValue(KEYPAD_PIN_R0,DIO_Pin_high); 
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R1,DIO_Pin_low);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R2,DIO_Pin_high);
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	61 e0       	ldi	r22, 0x01	; 1
    1de2:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R3,DIO_Pin_high);
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	61 e0       	ldi	r22, 0x01	; 1
    1dea:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	Keypad_checKCol(1);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <Keypad_checKCol>
	
	/*row2 activated*/
	DIO_setPinValue(KEYPAD_PIN_R0,DIO_Pin_high); 
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	61 e0       	ldi	r22, 0x01	; 1
    1df8:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R1,DIO_Pin_high);
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R2,DIO_Pin_low);
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R3,DIO_Pin_high);
    1e0c:	83 e0       	ldi	r24, 0x03	; 3
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	Keypad_checKCol(2);
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <Keypad_checKCol>
	
	/*row3 activated*/
	DIO_setPinValue(KEYPAD_PIN_R0,DIO_Pin_high); 
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R1,DIO_Pin_high);
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R2,DIO_Pin_high);
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(KEYPAD_PIN_R3,DIO_Pin_low);
    1e32:	83 e0       	ldi	r24, 0x03	; 3
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	Keypad_checKCol(3);
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <Keypad_checKCol>
	
	return Keypad_PressedButton;
    1e40:	80 91 70 00 	lds	r24, 0x0070
}
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <BCDSevSegments_enable>:
#include "BCDSevSegments_Priv.h"
#include "BCDSevSegments_config.h"
#include "BCDSevSegments.h"

void BCDSevSegments_enable(void)
{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(BCDSEVSEGMENTS_Enable_PIN,DIO_Pin_high);
    1e52:	88 e0       	ldi	r24, 0x08	; 8
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	
}
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <BCDSevSegments_disable>:
void BCDSevSegments_disable(void)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(BCDSEVSEGMENTS_Enable_PIN,DIO_Pin_low);
    1e68:	88 e0       	ldi	r24, 0x08	; 8
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
}
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <BCDSevSegments_displayNo>:
void BCDSevSegments_displayNo(u8 Val)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	0f 92       	push	r0
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	89 83       	std	Y+1, r24	; 0x01
	if(Val <= 15)
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	80 31       	cpi	r24, 0x10	; 16
    1e86:	88 f5       	brcc	.+98     	; 0x1eea <BCDSevSegments_displayNo+0x74>
	{
	DIO_setPinValue(BCDSEVSEGMENTS_PIN_0,GET_BIT(Val,0));
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	98 2f       	mov	r25, r24
    1e8c:	91 70       	andi	r25, 0x01	; 1
    1e8e:	8c e0       	ldi	r24, 0x0C	; 12
    1e90:	69 2f       	mov	r22, r25
    1e92:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(BCDSEVSEGMENTS_PIN_1,GET_BIT(Val,1));
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	88 2f       	mov	r24, r24
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	82 70       	andi	r24, 0x02	; 2
    1e9e:	90 70       	andi	r25, 0x00	; 0
    1ea0:	95 95       	asr	r25
    1ea2:	87 95       	ror	r24
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	8d e0       	ldi	r24, 0x0D	; 13
    1ea8:	69 2f       	mov	r22, r25
    1eaa:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(BCDSEVSEGMENTS_PIN_2,GET_BIT(Val,2));
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	84 70       	andi	r24, 0x04	; 4
    1eb6:	90 70       	andi	r25, 0x00	; 0
    1eb8:	95 95       	asr	r25
    1eba:	87 95       	ror	r24
    1ebc:	95 95       	asr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	98 2f       	mov	r25, r24
    1ec2:	8e e0       	ldi	r24, 0x0E	; 14
    1ec4:	69 2f       	mov	r22, r25
    1ec6:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	DIO_setPinValue(BCDSEVSEGMENTS_PIN_3,GET_BIT(Val,3));
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	88 70       	andi	r24, 0x08	; 8
    1ed2:	90 70       	andi	r25, 0x00	; 0
    1ed4:	95 95       	asr	r25
    1ed6:	87 95       	ror	r24
    1ed8:	95 95       	asr	r25
    1eda:	87 95       	ror	r24
    1edc:	95 95       	asr	r25
    1ede:	87 95       	ror	r24
    1ee0:	98 2f       	mov	r25, r24
    1ee2:	8f e0       	ldi	r24, 0x0F	; 15
    1ee4:	69 2f       	mov	r22, r25
    1ee6:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
	}
}
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <Lab_1>:
#include "../MCAL/DIO/DIO.h"

#define PIN_SW_1		DIO_PIN_D0
#define PIN_LED_1		DIO_PIN_C0
void Lab_1(void)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <Lab_1+0x6>
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
	DIO_init();
    1efc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_init>
	DIO_PinValue_t CurrentPinVal = DIO_Pin_low,PrevPinVal = DIO_Pin_low;
    1f00:	1a 82       	std	Y+2, r1	; 0x02
    1f02:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		CurrentPinVal = DIO_getPinValue(PIN_SW_1);
    1f04:	88 e1       	ldi	r24, 0x18	; 24
    1f06:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_getPinValue>
    1f0a:	8a 83       	std	Y+2, r24	; 0x02
		if(CurrentPinVal == DIO_Pin_high)
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	31 f4       	brne	.+12     	; 0x1f1e <Lab_1+0x2c>
		{
			if(PrevPinVal == DIO_Pin_low)
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	88 23       	and	r24, r24
    1f16:	19 f4       	brne	.+6      	; 0x1f1e <Lab_1+0x2c>
			{
				DIO_togglePin(PIN_LED_1);	
    1f18:	80 e1       	ldi	r24, 0x10	; 16
    1f1a:	0e 94 c8 07 	call	0xf90	; 0xf90 <DIO_togglePin>
			}
		}
		PrevPinVal = CurrentPinVal;
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	f0 cf       	rjmp	.-32     	; 0x1f04 <Lab_1+0x12>

00001f24 <_Lab_05_LCD>:
#include "../Lib/STD_TYPES.h"
#include "../HAL/LCD/LCD.h"
#include "../MCAL/DIO/DIO.h"

void _Lab_05_LCD(void)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62

	DIO_init();
    1f2c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_init>
	LCD_init();
    1f30:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_init>
	while(1)
	{

		LCD_writeString("Hello",0,0);
    1f34:	80 e6       	ldi	r24, 0x60	; 96
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_writeString>
    1f40:	f9 cf       	rjmp	.-14     	; 0x1f34 <_Lab_05_LCD+0x10>

00001f42 <_Lab_07_ADC>:
#include "../MCAL/DIO/DIO.h"
#include "../MCAL/GIE/GIE.h"
#include "../MCAL/ADC/ADC.h"

void _Lab_07_ADC(void)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	27 97       	sbiw	r28, 0x07	; 7
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
	u8 str[5]={0};
    1f56:	85 e0       	ldi	r24, 0x05	; 5
    1f58:	fe 01       	movw	r30, r28
    1f5a:	33 96       	adiw	r30, 0x03	; 3
    1f5c:	df 01       	movw	r26, r30
    1f5e:	98 2f       	mov	r25, r24
    1f60:	1d 92       	st	X+, r1
    1f62:	9a 95       	dec	r25
    1f64:	e9 f7       	brne	.-6      	; 0x1f60 <_Lab_07_ADC+0x1e>
	u8* ptr = str;
    1f66:	ce 01       	movw	r24, r28
    1f68:	03 96       	adiw	r24, 0x03	; 3
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
	DIO_init();
    1f6e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_init>
	ADC_init();
    1f72:	0e 94 3f 08 	call	0x107e	; 0x107e <ADC_init>
	LCD_init();
    1f76:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_init>

	GIE_enInterrupt();
    1f7a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_enInterrupt>
	ADC_enInterrupt();
    1f7e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ADC_enInterrupt>

	ADC_startConversion(ADC_Ch0);
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	0e 94 99 08 	call	0x1132	; 0x1132 <ADC_startConversion>

	while(1)
	{
		itoa(ADC_getLastConvertedVal(),ptr,10);
    1f88:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <ADC_getLastConvertedVal>
    1f8c:	29 81       	ldd	r18, Y+1	; 0x01
    1f8e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f90:	b9 01       	movw	r22, r18
    1f92:	4a e0       	ldi	r20, 0x0A	; 10
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <itoa>
		LCD_writeString(str,0,0);
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	03 96       	adiw	r24, 0x03	; 3
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 34 0c 	call	0x1868	; 0x1868 <LCD_writeString>
    1fa6:	f0 cf       	rjmp	.-32     	; 0x1f88 <_Lab_07_ADC+0x46>

00001fa8 <Lab_2>:
#include "../Lib/STD_TYPES.h"
#include "../MCAL/DIO/DIO.h"
#include "../HAL/SevSegments/SevSegments.h"
#include "../HAL/BCDSevSegments/BCDSevSegments.h"
void Lab_2(void)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	2f 97       	sbiw	r28, 0x0f	; 15
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
	u8 i;
	DIO_init();
    1fbc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_init>
	SevSegments_enable();
    1fc0:	0e 94 0c 09 	call	0x1218	; 0x1218 <SevSegments_enable>
	BCDSevSegments_enable();
    1fc4:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <BCDSevSegments_enable>
	BCDSevSegments_displayNo(5);
    1fc8:	85 e0       	ldi	r24, 0x05	; 5
    1fca:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <BCDSevSegments_displayNo>
	while(1)
	{
		
		for(i=0;i<10;i++)
    1fce:	1f 86       	std	Y+15, r1	; 0x0f
    1fd0:	78 c0       	rjmp	.+240    	; 0x20c2 <Lab_2+0x11a>
		{
			SevSegments_displayNo(i);
    1fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd4:	0e 94 22 09 	call	0x1244	; 0x1244 <SevSegments_displayNo>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	aa ef       	ldi	r26, 0xFA	; 250
    1fde:	b3 e4       	ldi	r27, 0x43	; 67
    1fe0:	8b 87       	std	Y+11, r24	; 0x0b
    1fe2:	9c 87       	std	Y+12, r25	; 0x0c
    1fe4:	ad 87       	std	Y+13, r26	; 0x0d
    1fe6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4a ef       	ldi	r20, 0xFA	; 250
    1ff6:	54 e4       	ldi	r21, 0x44	; 68
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	8f 83       	std	Y+7, r24	; 0x07
    2002:	98 87       	std	Y+8, r25	; 0x08
    2004:	a9 87       	std	Y+9, r26	; 0x09
    2006:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e8       	ldi	r20, 0x80	; 128
    2016:	5f e3       	ldi	r21, 0x3F	; 63
    2018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201c:	88 23       	and	r24, r24
    201e:	2c f4       	brge	.+10     	; 0x202a <Lab_2+0x82>
		__ticks = 1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9e 83       	std	Y+6, r25	; 0x06
    2026:	8d 83       	std	Y+5, r24	; 0x05
    2028:	3f c0       	rjmp	.+126    	; 0x20a8 <Lab_2+0x100>
	else if (__tmp > 65535)
    202a:	6f 81       	ldd	r22, Y+7	; 0x07
    202c:	78 85       	ldd	r23, Y+8	; 0x08
    202e:	89 85       	ldd	r24, Y+9	; 0x09
    2030:	9a 85       	ldd	r25, Y+10	; 0x0a
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	3f ef       	ldi	r19, 0xFF	; 255
    2036:	4f e7       	ldi	r20, 0x7F	; 127
    2038:	57 e4       	ldi	r21, 0x47	; 71
    203a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203e:	18 16       	cp	r1, r24
    2040:	4c f5       	brge	.+82     	; 0x2094 <Lab_2+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2042:	6b 85       	ldd	r22, Y+11	; 0x0b
    2044:	7c 85       	ldd	r23, Y+12	; 0x0c
    2046:	8d 85       	ldd	r24, Y+13	; 0x0d
    2048:	9e 85       	ldd	r25, Y+14	; 0x0e
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e2       	ldi	r20, 0x20	; 32
    2050:	51 e4       	ldi	r21, 0x41	; 65
    2052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
    206a:	0f c0       	rjmp	.+30     	; 0x208a <Lab_2+0xe2>
    206c:	88 ec       	ldi	r24, 0xC8	; 200
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	8b 83       	std	Y+3, r24	; 0x03
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <Lab_2+0xd0>
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	9e 83       	std	Y+6, r25	; 0x06
    2088:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	69 f7       	brne	.-38     	; 0x206c <Lab_2+0xc4>
    2092:	14 c0       	rjmp	.+40     	; 0x20bc <Lab_2+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2094:	6f 81       	ldd	r22, Y+7	; 0x07
    2096:	78 85       	ldd	r23, Y+8	; 0x08
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <Lab_2+0x10c>
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
	BCDSevSegments_enable();
	BCDSevSegments_displayNo(5);
	while(1)
	{
		
		for(i=0;i<10;i++)
    20bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20be:	8f 5f       	subi	r24, 0xFF	; 255
    20c0:	8f 87       	std	Y+15, r24	; 0x0f
    20c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c4:	8a 30       	cpi	r24, 0x0A	; 10
    20c6:	08 f4       	brcc	.+2      	; 0x20ca <Lab_2+0x122>
    20c8:	84 cf       	rjmp	.-248    	; 0x1fd2 <Lab_2+0x2a>
    20ca:	81 cf       	rjmp	.-254    	; 0x1fce <Lab_2+0x26>

000020cc <_Lab_03_Keypad>:
#include "../MCAL/DIO/DIO.h"
#include "../HAL/BCDSevSegments/BCDSevSegments.h"
#include "../HAL/Keypad/Keypad.h"

void _Lab_03_Keypad(void)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	0f 92       	push	r0
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
	u8 PressedSw =-1;
    20d6:	8f ef       	ldi	r24, 0xFF	; 255
    20d8:	89 83       	std	Y+1, r24	; 0x01
	DIO_init();
    20da:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_init>
	Keypad_init();
    20de:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <Keypad_init>
		
	while(1)
	{
		PressedSw = Keypad_getPressedButton();
    20e2:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <Keypad_getPressedButton>
    20e6:	89 83       	std	Y+1, r24	; 0x01
		if(PressedSw != -1)
		{
			BCDSevSegments_enable();
    20e8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <BCDSevSegments_enable>
			BCDSevSegments_displayNo(PressedSw);
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <BCDSevSegments_displayNo>
    20f2:	f7 cf       	rjmp	.-18     	; 0x20e2 <_Lab_03_Keypad+0x16>

000020f4 <_Lab_04>:

#define ENABLE_SEVSEGMENTS_2()			DIO_setPinValue(DIO_PIN_D1,DIO_Pin_low)
#define DISABLE_SEVSEGMENTS_2()			DIO_setPinValue(DIO_PIN_D1,DIO_Pin_high)

void _Lab_04(void)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	6f 97       	sbiw	r28, 0x1f	; 31
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
	u8 i;
	u16 loop;
	DIO_init();
    2108:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_init>
	
	while(1)
	{
		for(i=0;i<100;)
    210c:	1f 8e       	std	Y+31, r1	; 0x1f
    210e:	11 c1       	rjmp	.+546    	; 0x2332 <_Lab_04+0x23e>
		{	

			for(loop=0;loop<50;loop++)
    2110:	1e 8e       	std	Y+30, r1	; 0x1e
    2112:	1d 8e       	std	Y+29, r1	; 0x1d
    2114:	08 c1       	rjmp	.+528    	; 0x2326 <_Lab_04+0x232>
			{
				DISABLE_SEVSEGMENTS_2();
    2116:	89 e1       	ldi	r24, 0x19	; 25
    2118:	61 e0       	ldi	r22, 0x01	; 1
    211a:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
				ENABLE_SEVSEGMENTS_1();
    211e:	88 e1       	ldi	r24, 0x18	; 24
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
				SevSegments_displayNo(i%10);
    2126:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2128:	9a e0       	ldi	r25, 0x0A	; 10
    212a:	69 2f       	mov	r22, r25
    212c:	0e 94 a9 11 	call	0x2352	; 0x2352 <__udivmodqi4>
    2130:	89 2f       	mov	r24, r25
    2132:	0e 94 22 09 	call	0x1244	; 0x1244 <SevSegments_displayNo>
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e2       	ldi	r26, 0x20	; 32
    213c:	b1 e4       	ldi	r27, 0x41	; 65
    213e:	89 8f       	std	Y+25, r24	; 0x19
    2140:	9a 8f       	std	Y+26, r25	; 0x1a
    2142:	ab 8f       	std	Y+27, r26	; 0x1b
    2144:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2146:	69 8d       	ldd	r22, Y+25	; 0x19
    2148:	7a 8d       	ldd	r23, Y+26	; 0x1a
    214a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a ef       	ldi	r20, 0xFA	; 250
    2154:	54 e4       	ldi	r21, 0x44	; 68
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	8d 8b       	std	Y+21, r24	; 0x15
    2160:	9e 8b       	std	Y+22, r25	; 0x16
    2162:	af 8b       	std	Y+23, r26	; 0x17
    2164:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2166:	6d 89       	ldd	r22, Y+21	; 0x15
    2168:	7e 89       	ldd	r23, Y+22	; 0x16
    216a:	8f 89       	ldd	r24, Y+23	; 0x17
    216c:	98 8d       	ldd	r25, Y+24	; 0x18
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	2c f4       	brge	.+10     	; 0x2188 <_Lab_04+0x94>
		__ticks = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9c 8b       	std	Y+20, r25	; 0x14
    2184:	8b 8b       	std	Y+19, r24	; 0x13
    2186:	3f c0       	rjmp	.+126    	; 0x2206 <_Lab_04+0x112>
	else if (__tmp > 65535)
    2188:	6d 89       	ldd	r22, Y+21	; 0x15
    218a:	7e 89       	ldd	r23, Y+22	; 0x16
    218c:	8f 89       	ldd	r24, Y+23	; 0x17
    218e:	98 8d       	ldd	r25, Y+24	; 0x18
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	4c f5       	brge	.+82     	; 0x21f2 <_Lab_04+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	69 8d       	ldd	r22, Y+25	; 0x19
    21a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9c 8b       	std	Y+20, r25	; 0x14
    21c6:	8b 8b       	std	Y+19, r24	; 0x13
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <_Lab_04+0xf4>
    21ca:	88 ec       	ldi	r24, 0xC8	; 200
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9a 8b       	std	Y+18, r25	; 0x12
    21d0:	89 8b       	std	Y+17, r24	; 0x11
    21d2:	89 89       	ldd	r24, Y+17	; 0x11
    21d4:	9a 89       	ldd	r25, Y+18	; 0x12
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <_Lab_04+0xe2>
    21da:	9a 8b       	std	Y+18, r25	; 0x12
    21dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	8b 89       	ldd	r24, Y+19	; 0x13
    21e0:	9c 89       	ldd	r25, Y+20	; 0x14
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	9c 8b       	std	Y+20, r25	; 0x14
    21e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ea:	9c 89       	ldd	r25, Y+20	; 0x14
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	69 f7       	brne	.-38     	; 0x21ca <_Lab_04+0xd6>
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <_Lab_04+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f2:	6d 89       	ldd	r22, Y+21	; 0x15
    21f4:	7e 89       	ldd	r23, Y+22	; 0x16
    21f6:	8f 89       	ldd	r24, Y+23	; 0x17
    21f8:	98 8d       	ldd	r25, Y+24	; 0x18
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9c 8b       	std	Y+20, r25	; 0x14
    2204:	8b 8b       	std	Y+19, r24	; 0x13
    2206:	8b 89       	ldd	r24, Y+19	; 0x13
    2208:	9c 89       	ldd	r25, Y+20	; 0x14
    220a:	98 8b       	std	Y+16, r25	; 0x10
    220c:	8f 87       	std	Y+15, r24	; 0x0f
    220e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2210:	98 89       	ldd	r25, Y+16	; 0x10
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <_Lab_04+0x11e>
    2216:	98 8b       	std	Y+16, r25	; 0x10
    2218:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
			
				DISABLE_SEVSEGMENTS_1();
    221a:	88 e1       	ldi	r24, 0x18	; 24
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
				ENABLE_SEVSEGMENTS_2();
    2222:	89 e1       	ldi	r24, 0x19	; 25
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	0e 94 d6 05 	call	0xbac	; 0xbac <DIO_setPinValue>
				SevSegments_displayNo(i/10);
    222a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    222c:	9a e0       	ldi	r25, 0x0A	; 10
    222e:	69 2f       	mov	r22, r25
    2230:	0e 94 a9 11 	call	0x2352	; 0x2352 <__udivmodqi4>
    2234:	0e 94 22 09 	call	0x1244	; 0x1244 <SevSegments_displayNo>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	a0 e2       	ldi	r26, 0x20	; 32
    223e:	b1 e4       	ldi	r27, 0x41	; 65
    2240:	8b 87       	std	Y+11, r24	; 0x0b
    2242:	9c 87       	std	Y+12, r25	; 0x0c
    2244:	ad 87       	std	Y+13, r26	; 0x0d
    2246:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2248:	6b 85       	ldd	r22, Y+11	; 0x0b
    224a:	7c 85       	ldd	r23, Y+12	; 0x0c
    224c:	8d 85       	ldd	r24, Y+13	; 0x0d
    224e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	4a ef       	ldi	r20, 0xFA	; 250
    2256:	54 e4       	ldi	r21, 0x44	; 68
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	8f 83       	std	Y+7, r24	; 0x07
    2262:	98 87       	std	Y+8, r25	; 0x08
    2264:	a9 87       	std	Y+9, r26	; 0x09
    2266:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2268:	6f 81       	ldd	r22, Y+7	; 0x07
    226a:	78 85       	ldd	r23, Y+8	; 0x08
    226c:	89 85       	ldd	r24, Y+9	; 0x09
    226e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    227c:	88 23       	and	r24, r24
    227e:	2c f4       	brge	.+10     	; 0x228a <_Lab_04+0x196>
		__ticks = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9e 83       	std	Y+6, r25	; 0x06
    2286:	8d 83       	std	Y+5, r24	; 0x05
    2288:	3f c0       	rjmp	.+126    	; 0x2308 <_Lab_04+0x214>
	else if (__tmp > 65535)
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	3f ef       	ldi	r19, 0xFF	; 255
    2296:	4f e7       	ldi	r20, 0x7F	; 127
    2298:	57 e4       	ldi	r21, 0x47	; 71
    229a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    229e:	18 16       	cp	r1, r24
    22a0:	4c f5       	brge	.+82     	; 0x22f4 <_Lab_04+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e2       	ldi	r20, 0x20	; 32
    22b0:	51 e4       	ldi	r21, 0x41	; 65
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
    22ca:	0f c0       	rjmp	.+30     	; 0x22ea <_Lab_04+0x1f6>
    22cc:	88 ec       	ldi	r24, 0xC8	; 200
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <_Lab_04+0x1e4>
    22dc:	9c 83       	std	Y+4, r25	; 0x04
    22de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	9e 83       	std	Y+6, r25	; 0x06
    22e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	69 f7       	brne	.-38     	; 0x22cc <_Lab_04+0x1d8>
    22f2:	14 c0       	rjmp	.+40     	; 0x231c <_Lab_04+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f4:	6f 81       	ldd	r22, Y+7	; 0x07
    22f6:	78 85       	ldd	r23, Y+8	; 0x08
    22f8:	89 85       	ldd	r24, Y+9	; 0x09
    22fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	9a 83       	std	Y+2, r25	; 0x02
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <_Lab_04+0x220>
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		for(i=0;i<100;)
		{	

			for(loop=0;loop<50;loop++)
    231c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    231e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2320:	01 96       	adiw	r24, 0x01	; 1
    2322:	9e 8f       	std	Y+30, r25	; 0x1e
    2324:	8d 8f       	std	Y+29, r24	; 0x1d
    2326:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2328:	9e 8d       	ldd	r25, Y+30	; 0x1e
    232a:	82 33       	cpi	r24, 0x32	; 50
    232c:	91 05       	cpc	r25, r1
    232e:	08 f4       	brcc	.+2      	; 0x2332 <_Lab_04+0x23e>
    2330:	f2 ce       	rjmp	.-540    	; 0x2116 <_Lab_04+0x22>
	u16 loop;
	DIO_init();
	
	while(1)
	{
		for(i=0;i<100;)
    2332:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2334:	84 36       	cpi	r24, 0x64	; 100
    2336:	08 f4       	brcc	.+2      	; 0x233a <_Lab_04+0x246>
    2338:	eb ce       	rjmp	.-554    	; 0x2110 <_Lab_04+0x1c>
    233a:	e8 ce       	rjmp	.-560    	; 0x210c <_Lab_04+0x18>

0000233c <main>:
 * Created: 10/19/2018 3:07:24 PM
 * Author : MuhammadElzeiny
 */ 
#include "App/app.h"
int main(void)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	_Lab_07_ADC();
    2344:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <_Lab_07_ADC>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0

}
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <__udivmodqi4>:
    2352:	99 1b       	sub	r25, r25
    2354:	79 e0       	ldi	r23, 0x09	; 9
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <__udivmodqi4_ep>

00002358 <__udivmodqi4_loop>:
    2358:	99 1f       	adc	r25, r25
    235a:	96 17       	cp	r25, r22
    235c:	08 f0       	brcs	.+2      	; 0x2360 <__udivmodqi4_ep>
    235e:	96 1b       	sub	r25, r22

00002360 <__udivmodqi4_ep>:
    2360:	88 1f       	adc	r24, r24
    2362:	7a 95       	dec	r23
    2364:	c9 f7       	brne	.-14     	; 0x2358 <__udivmodqi4_loop>
    2366:	80 95       	com	r24
    2368:	08 95       	ret

0000236a <__prologue_saves__>:
    236a:	2f 92       	push	r2
    236c:	3f 92       	push	r3
    236e:	4f 92       	push	r4
    2370:	5f 92       	push	r5
    2372:	6f 92       	push	r6
    2374:	7f 92       	push	r7
    2376:	8f 92       	push	r8
    2378:	9f 92       	push	r9
    237a:	af 92       	push	r10
    237c:	bf 92       	push	r11
    237e:	cf 92       	push	r12
    2380:	df 92       	push	r13
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	ca 1b       	sub	r28, r26
    2394:	db 0b       	sbc	r29, r27
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	09 94       	ijmp

000023a2 <__epilogue_restores__>:
    23a2:	2a 88       	ldd	r2, Y+18	; 0x12
    23a4:	39 88       	ldd	r3, Y+17	; 0x11
    23a6:	48 88       	ldd	r4, Y+16	; 0x10
    23a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    23aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    23b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    23b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    23b4:	b9 84       	ldd	r11, Y+9	; 0x09
    23b6:	c8 84       	ldd	r12, Y+8	; 0x08
    23b8:	df 80       	ldd	r13, Y+7	; 0x07
    23ba:	ee 80       	ldd	r14, Y+6	; 0x06
    23bc:	fd 80       	ldd	r15, Y+5	; 0x05
    23be:	0c 81       	ldd	r16, Y+4	; 0x04
    23c0:	1b 81       	ldd	r17, Y+3	; 0x03
    23c2:	aa 81       	ldd	r26, Y+2	; 0x02
    23c4:	b9 81       	ldd	r27, Y+1	; 0x01
    23c6:	ce 0f       	add	r28, r30
    23c8:	d1 1d       	adc	r29, r1
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	ed 01       	movw	r28, r26
    23d6:	08 95       	ret

000023d8 <itoa>:
    23d8:	fb 01       	movw	r30, r22
    23da:	9f 01       	movw	r18, r30
    23dc:	e8 94       	clt
    23de:	42 30       	cpi	r20, 0x02	; 2
    23e0:	c4 f0       	brlt	.+48     	; 0x2412 <itoa+0x3a>
    23e2:	45 32       	cpi	r20, 0x25	; 37
    23e4:	b4 f4       	brge	.+44     	; 0x2412 <itoa+0x3a>
    23e6:	4a 30       	cpi	r20, 0x0A	; 10
    23e8:	29 f4       	brne	.+10     	; 0x23f4 <itoa+0x1c>
    23ea:	97 fb       	bst	r25, 7
    23ec:	1e f4       	brtc	.+6      	; 0x23f4 <itoa+0x1c>
    23ee:	90 95       	com	r25
    23f0:	81 95       	neg	r24
    23f2:	9f 4f       	sbci	r25, 0xFF	; 255
    23f4:	64 2f       	mov	r22, r20
    23f6:	77 27       	eor	r23, r23
    23f8:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodhi4>
    23fc:	80 5d       	subi	r24, 0xD0	; 208
    23fe:	8a 33       	cpi	r24, 0x3A	; 58
    2400:	0c f0       	brlt	.+2      	; 0x2404 <itoa+0x2c>
    2402:	89 5d       	subi	r24, 0xD9	; 217
    2404:	81 93       	st	Z+, r24
    2406:	cb 01       	movw	r24, r22
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	a1 f7       	brne	.-24     	; 0x23f4 <itoa+0x1c>
    240c:	16 f4       	brtc	.+4      	; 0x2412 <itoa+0x3a>
    240e:	5d e2       	ldi	r21, 0x2D	; 45
    2410:	51 93       	st	Z+, r21
    2412:	10 82       	st	Z, r1
    2414:	c9 01       	movw	r24, r18
    2416:	0c 94 0d 12 	jmp	0x241a	; 0x241a <strrev>

0000241a <strrev>:
    241a:	dc 01       	movw	r26, r24
    241c:	fc 01       	movw	r30, r24
    241e:	67 2f       	mov	r22, r23
    2420:	71 91       	ld	r23, Z+
    2422:	77 23       	and	r23, r23
    2424:	e1 f7       	brne	.-8      	; 0x241e <strrev+0x4>
    2426:	32 97       	sbiw	r30, 0x02	; 2
    2428:	04 c0       	rjmp	.+8      	; 0x2432 <strrev+0x18>
    242a:	7c 91       	ld	r23, X
    242c:	6d 93       	st	X+, r22
    242e:	70 83       	st	Z, r23
    2430:	62 91       	ld	r22, -Z
    2432:	ae 17       	cp	r26, r30
    2434:	bf 07       	cpc	r27, r31
    2436:	c8 f3       	brcs	.-14     	; 0x242a <strrev+0x10>
    2438:	08 95       	ret

0000243a <__udivmodhi4>:
    243a:	aa 1b       	sub	r26, r26
    243c:	bb 1b       	sub	r27, r27
    243e:	51 e1       	ldi	r21, 0x11	; 17
    2440:	07 c0       	rjmp	.+14     	; 0x2450 <__udivmodhi4_ep>

00002442 <__udivmodhi4_loop>:
    2442:	aa 1f       	adc	r26, r26
    2444:	bb 1f       	adc	r27, r27
    2446:	a6 17       	cp	r26, r22
    2448:	b7 07       	cpc	r27, r23
    244a:	10 f0       	brcs	.+4      	; 0x2450 <__udivmodhi4_ep>
    244c:	a6 1b       	sub	r26, r22
    244e:	b7 0b       	sbc	r27, r23

00002450 <__udivmodhi4_ep>:
    2450:	88 1f       	adc	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	5a 95       	dec	r21
    2456:	a9 f7       	brne	.-22     	; 0x2442 <__udivmodhi4_loop>
    2458:	80 95       	com	r24
    245a:	90 95       	com	r25
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	08 95       	ret

00002462 <_exit>:
    2462:	f8 94       	cli

00002464 <__stop_program>:
    2464:	ff cf       	rjmp	.-2      	; 0x2464 <__stop_program>
